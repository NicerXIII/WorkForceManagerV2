//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WFMv2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PayrollExtensionEntities : DbContext
    {
        public PayrollExtensionEntities()
            : base("name=PayrollExtensionEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Access> Accesses { get; set; }
        public virtual DbSet<Adjustment> Adjustments { get; set; }
        public virtual DbSet<Advance> Advances { get; set; }
        public virtual DbSet<Announcement> Announcements { get; set; }
        public virtual DbSet<ApproverMatrixGroup> ApproverMatrixGroups { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<CampaignType> CampaignTypes { get; set; }
        public virtual DbSet<CivilStatu> CivilStatus { get; set; }
        public virtual DbSet<Consolidate_Leaves> Consolidate_Leaves { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<dtproperty> dtproperties { get; set; }
        public virtual DbSet<Employee_Day_Absent> Employee_Day_Absent { get; set; }
        public virtual DbSet<Employee_ExemptMetricsCheck> Employee_ExemptMetricsCheck { get; set; }
        public virtual DbSet<Employee_Leaves> Employee_Leaves { get; set; }
        public virtual DbSet<Employee_Leaves_BackUp10312013> Employee_Leaves_BackUp10312013 { get; set; }
        public virtual DbSet<Employee_Leaves_Filed> Employee_Leaves_Filed { get; set; }
        public virtual DbSet<Employee_Leaves_Filed_Dec09> Employee_Leaves_Filed_Dec09 { get; set; }
        public virtual DbSet<Employee_Rate> Employee_Rate { get; set; }
        public virtual DbSet<EmployeeDispute> EmployeeDisputes { get; set; }
        public virtual DbSet<EmployeeLog> EmployeeLogs { get; set; }
        public virtual DbSet<EmployeeMedCert> EmployeeMedCerts { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeType> EmployeeTypes { get; set; }
        public virtual DbSet<EndOfPayroll> EndOfPayrolls { get; set; }
        public virtual DbSet<GraduatedTax> GraduatedTaxes { get; set; }
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<InitialLogEntry> InitialLogEntries { get; set; }
        public virtual DbSet<LeaveCreditsAdded> LeaveCreditsAddeds { get; set; }
        public virtual DbSet<LeaveType> LeaveTypes { get; set; }
        public virtual DbSet<Metric> Metrics { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<NDComputation> NDComputations { get; set; }
        public virtual DbSet<NotificationMode> NotificationModes { get; set; }
        public virtual DbSet<OIC> OICs { get; set; }
        public virtual DbSet<Pay> Pays { get; set; }
        public virtual DbSet<Pay_Details> Pay_Details { get; set; }
        public virtual DbSet<Payroll_Cutoff> Payroll_Cutoff { get; set; }
        public virtual DbSet<Payroll_Data> Payroll_Data { get; set; }
        public virtual DbSet<Payroll_DataGenerated> Payroll_DataGenerated { get; set; }
        public virtual DbSet<Payroll_DataTemp> Payroll_DataTemp { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<Representation> Representations { get; set; }
        public virtual DbSet<Salt> Salts { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<SSSLoan> SSSLoans { get; set; }
        public virtual DbSet<SSSLoan_Payment> SSSLoan_Payment { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<TaxScheme> TaxSchemes { get; set; }
        public virtual DbSet<Temp_Attendance_Complete> Temp_Attendance_Complete { get; set; }
        public virtual DbSet<Temp_LoanPayments> Temp_LoanPayments { get; set; }
        public virtual DbSet<TranspoAllowance> TranspoAllowances { get; set; }
        public virtual DbSet<UnauthorizedLog> UnauthorizedLogs { get; set; }
        public virtual DbSet<VERIFONE_Agents_List> VERIFONE_Agents_List { get; set; }
        public virtual DbSet<ApproverMatrixMember> ApproverMatrixMembers { get; set; }
        public virtual DbSet<ComplianceLeaveVerification> ComplianceLeaveVerifications { get; set; }
        public virtual DbSet<Employee_Leaves_Filed_20110223> Employee_Leaves_Filed_20110223 { get; set; }
        public virtual DbSet<Employee_Leaves_Filed_20110302> Employee_Leaves_Filed_20110302 { get; set; }
        public virtual DbSet<EmployeeLeaves_Backup_07152015> EmployeeLeaves_Backup_07152015 { get; set; }
        public virtual DbSet<EmployeeLogsBackup> EmployeeLogsBackups { get; set; }
        public virtual DbSet<EmployeesHistory> EmployeesHistories { get; set; }
        public virtual DbSet<FortuneCooky> FortuneCookies { get; set; }
        public virtual DbSet<HDMF> HDMFs { get; set; }
        public virtual DbSet<LoanDetail> LoanDetails { get; set; }
        public virtual DbSet<LoanHeader> LoanHeaders { get; set; }
        public virtual DbSet<NBIClearance> NBIClearances { get; set; }
        public virtual DbSet<OverBreak> OverBreaks { get; set; }
        public virtual DbSet<PayrollDump> PayrollDumps { get; set; }
        public virtual DbSet<PhilHealth> PhilHealths { get; set; }
        public virtual DbSet<PhilHealthOLD> PhilHealthOLDs { get; set; }
        public virtual DbSet<Rate> Rates { get; set; }
        public virtual DbSet<Recruitment> Recruitments { get; set; }
        public virtual DbSet<Reference> References { get; set; }
        public virtual DbSet<Representation03152011> Representation03152011 { get; set; }
        public virtual DbSet<Sequence> Sequences { get; set; }
        public virtual DbSet<Sponsor> Sponsors { get; set; }
        public virtual DbSet<SSS> SSSes { get; set; }
        public virtual DbSet<SSS_OLD> SSS_OLD { get; set; }
        public virtual DbSet<tbl_AuditTrail> tbl_AuditTrail { get; set; }
        public virtual DbSet<tblSample> tblSamples { get; set; }
        public virtual DbSet<Temp_EmployeePay> Temp_EmployeePay { get; set; }
        public virtual DbSet<Temp_Metric_Details> Temp_Metric_Details { get; set; }
        public virtual DbSet<Temp_MetricCostDetail> Temp_MetricCostDetail { get; set; }
        public virtual DbSet<Temp_Pay_Details> Temp_Pay_Details { get; set; }
        public virtual DbSet<EmployeeDetail> EmployeeDetails { get; set; }
        public virtual DbSet<EmployeesActive> EmployeesActives { get; set; }
        public virtual DbSet<EmployeesInActive> EmployeesInActives { get; set; }
    
        [DbFunction("PayrollExtensionEntities", "AbsentSLELCount")]
        public virtual IQueryable<AbsentSLELCount_Result> AbsentSLELCount(string date, string empID)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var empIDParameter = empID != null ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<AbsentSLELCount_Result>("[PayrollExtensionEntities].[AbsentSLELCount](@Date, @empID)", dateParameter, empIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "blabla")]
        public virtual IQueryable<blabla_Result> blabla()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<blabla_Result>("[PayrollExtensionEntities].[blabla]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "ForRecomputeEmployees")]
        public virtual IQueryable<ForRecomputeEmployees_Result> ForRecomputeEmployees(Nullable<int> payrollNumber)
        {
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ForRecomputeEmployees_Result>("[PayrollExtensionEntities].[ForRecomputeEmployees](@PayrollNumber)", payrollNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "Generate40HourRuleFormatted")]
        public virtual IQueryable<Generate40HourRuleFormatted_Result> Generate40HourRuleFormatted(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Generate40HourRuleFormatted_Result>("[PayrollExtensionEntities].[Generate40HourRuleFormatted](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "Get40HourAdjustment")]
        public virtual IQueryable<Get40HourAdjustment_Result> Get40HourAdjustment(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get40HourAdjustment_Result>("[PayrollExtensionEntities].[Get40HourAdjustment](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "Get40HourAdjustmentTotal")]
        public virtual IQueryable<Get40HourAdjustmentTotal_Result> Get40HourAdjustmentTotal(string dateFrom1)
        {
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get40HourAdjustmentTotal_Result>("[PayrollExtensionEntities].[Get40HourAdjustmentTotal](@DateFrom1)", dateFrom1Parameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "Get40HourAdjustmentVL")]
        public virtual IQueryable<Get40HourAdjustmentVL_Result> Get40HourAdjustmentVL(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Get40HourAdjustmentVL_Result>("[PayrollExtensionEntities].[Get40HourAdjustmentVL](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsencesDetails")]
        public virtual IQueryable<GetAbsencesDetails_Result> GetAbsencesDetails(Nullable<System.DateTime> date, string employeeNumber, Nullable<int> monthFromDiff, Nullable<int> monthToDiff)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var monthFromDiffParameter = monthFromDiff.HasValue ?
                new ObjectParameter("MonthFromDiff", monthFromDiff) :
                new ObjectParameter("MonthFromDiff", typeof(int));
    
            var monthToDiffParameter = monthToDiff.HasValue ?
                new ObjectParameter("MonthToDiff", monthToDiff) :
                new ObjectParameter("MonthToDiff", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsencesDetails_Result>("[PayrollExtensionEntities].[GetAbsencesDetails](@Date, @EmployeeNumber, @MonthFromDiff, @MonthToDiff)", dateParameter, employeeNumberParameter, monthFromDiffParameter, monthToDiffParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsencesDetails_NEW")]
        public virtual IQueryable<GetAbsencesDetails_NEW_Result> GetAbsencesDetails_NEW(Nullable<System.DateTime> date, Nullable<int> monthFromDiff, Nullable<int> monthToDiff)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var monthFromDiffParameter = monthFromDiff.HasValue ?
                new ObjectParameter("MonthFromDiff", monthFromDiff) :
                new ObjectParameter("MonthFromDiff", typeof(int));
    
            var monthToDiffParameter = monthToDiff.HasValue ?
                new ObjectParameter("MonthToDiff", monthToDiff) :
                new ObjectParameter("MonthToDiff", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsencesDetails_NEW_Result>("[PayrollExtensionEntities].[GetAbsencesDetails_NEW](@Date, @MonthFromDiff, @MonthToDiff)", dateParameter, monthFromDiffParameter, monthToDiffParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsencesDetailsNEW")]
        public virtual IQueryable<GetAbsencesDetailsNEW_Result> GetAbsencesDetailsNEW(Nullable<System.DateTime> date, string employeeNumber, Nullable<int> monthFromDiff, Nullable<int> monthToDiff)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var monthFromDiffParameter = monthFromDiff.HasValue ?
                new ObjectParameter("MonthFromDiff", monthFromDiff) :
                new ObjectParameter("MonthFromDiff", typeof(int));
    
            var monthToDiffParameter = monthToDiff.HasValue ?
                new ObjectParameter("MonthToDiff", monthToDiff) :
                new ObjectParameter("MonthToDiff", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsencesDetailsNEW_Result>("[PayrollExtensionEntities].[GetAbsencesDetailsNEW](@Date, @EmployeeNumber, @MonthFromDiff, @MonthToDiff)", dateParameter, employeeNumberParameter, monthFromDiffParameter, monthToDiffParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsentStartingFromHireDate")]
        public virtual IQueryable<GetAbsentStartingFromHireDate_Result> GetAbsentStartingFromHireDate(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsentStartingFromHireDate_Result>("[PayrollExtensionEntities].[GetAbsentStartingFromHireDate](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsentStartingFromHireDateWithTimeInandAType")]
        public virtual IQueryable<GetAbsentStartingFromHireDateWithTimeInandAType_Result> GetAbsentStartingFromHireDateWithTimeInandAType(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsentStartingFromHireDateWithTimeInandAType_Result>("[PayrollExtensionEntities].[GetAbsentStartingFromHireDateWithTimeInandAType](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsentStartingFromHireDateWithTimeInandAType2")]
        public virtual IQueryable<GetAbsentStartingFromHireDateWithTimeInandAType2_Result> GetAbsentStartingFromHireDateWithTimeInandAType2(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsentStartingFromHireDateWithTimeInandAType2_Result>("[PayrollExtensionEntities].[GetAbsentStartingFromHireDateWithTimeInandAType2](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsentStartingFromHireDateWithTimeInandAType2b")]
        public virtual IQueryable<GetAbsentStartingFromHireDateWithTimeInandAType2b_Result> GetAbsentStartingFromHireDateWithTimeInandAType2b(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsentStartingFromHireDateWithTimeInandAType2b_Result>("[PayrollExtensionEntities].[GetAbsentStartingFromHireDateWithTimeInandAType2b](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsentStartingFromHireDateWithTimeInandAType2REV")]
        public virtual IQueryable<GetAbsentStartingFromHireDateWithTimeInandAType2REV_Result> GetAbsentStartingFromHireDateWithTimeInandAType2REV(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsentStartingFromHireDateWithTimeInandAType2REV_Result>("[PayrollExtensionEntities].[GetAbsentStartingFromHireDateWithTimeInandAType2REV](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsentStartingFromHireDateWithTimeInandAType3")]
        public virtual IQueryable<GetAbsentStartingFromHireDateWithTimeInandAType3_Result> GetAbsentStartingFromHireDateWithTimeInandAType3(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsentStartingFromHireDateWithTimeInandAType3_Result>("[PayrollExtensionEntities].[GetAbsentStartingFromHireDateWithTimeInandAType3](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsentStartingFromHireDateWithTimeInandAType4")]
        public virtual IQueryable<GetAbsentStartingFromHireDateWithTimeInandAType4_Result> GetAbsentStartingFromHireDateWithTimeInandAType4(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsentStartingFromHireDateWithTimeInandAType4_Result>("[PayrollExtensionEntities].[GetAbsentStartingFromHireDateWithTimeInandAType4](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAbsentSuspendedVLSLEL")]
        public virtual IQueryable<GetAbsentSuspendedVLSLEL_Result> GetAbsentSuspendedVLSLEL(string dateFrom, string dateTo, string employeeNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAbsentSuspendedVLSLEL_Result>("[PayrollExtensionEntities].[GetAbsentSuspendedVLSLEL](@DateFrom, @DateTo, @EmployeeNumber)", dateFromParameter, dateToParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLAbsentSLELLatesFromHD")]
        public virtual IQueryable<GetALLAbsentSLELLatesFromHD_Result> GetALLAbsentSLELLatesFromHD(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLAbsentSLELLatesFromHD_Result>("[PayrollExtensionEntities].[GetALLAbsentSLELLatesFromHD](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLAbsentSLELLatesFromHD2")]
        public virtual IQueryable<GetALLAbsentSLELLatesFromHD2_Result> GetALLAbsentSLELLatesFromHD2(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLAbsentSLELLatesFromHD2_Result>("[PayrollExtensionEntities].[GetALLAbsentSLELLatesFromHD2](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLAbsentSLELLatesFromHD3")]
        public virtual IQueryable<GetALLAbsentSLELLatesFromHD3_Result> GetALLAbsentSLELLatesFromHD3(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLAbsentSLELLatesFromHD3_Result>("[PayrollExtensionEntities].[GetALLAbsentSLELLatesFromHD3](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLAbsentSLELLatesFromHD4")]
        public virtual IQueryable<GetALLAbsentSLELLatesFromHD4_Result> GetALLAbsentSLELLatesFromHD4(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLAbsentSLELLatesFromHD4_Result>("[PayrollExtensionEntities].[GetALLAbsentSLELLatesFromHD4](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLAbsentSLELLatesFromHD5")]
        public virtual IQueryable<GetALLAbsentSLELLatesFromHD5_Result> GetALLAbsentSLELLatesFromHD5(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLAbsentSLELLatesFromHD5_Result>("[PayrollExtensionEntities].[GetALLAbsentSLELLatesFromHD5](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAllAttendance")]
        public virtual IQueryable<GetAllAttendance_Result> GetAllAttendance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllAttendance_Result>("[PayrollExtensionEntities].[GetAllAttendance]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAllCampaign")]
        public virtual IQueryable<GetAllCampaign_Result> GetAllCampaign()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllCampaign_Result>("[PayrollExtensionEntities].[GetAllCampaign]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAllELSLAbsentsfrHD")]
        public virtual IQueryable<GetAllELSLAbsentsfrHD_Result> GetAllELSLAbsentsfrHD(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllELSLAbsentsfrHD_Result>("[PayrollExtensionEntities].[GetAllELSLAbsentsfrHD](@EmployeeID)", employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLLatesSLELAbsents")]
        public virtual IQueryable<GetALLLatesSLELAbsents_Result> GetALLLatesSLELAbsents(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLLatesSLELAbsents_Result>("[PayrollExtensionEntities].[GetALLLatesSLELAbsents](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAllNoSchedule")]
        public virtual IQueryable<GetAllNoSchedule_Result> GetAllNoSchedule(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllNoSchedule_Result>("[PayrollExtensionEntities].[GetAllNoSchedule](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLstartingFromHireDateTesting")]
        public virtual IQueryable<GetALLstartingFromHireDateTesting_Result> GetALLstartingFromHireDateTesting(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLstartingFromHireDateTesting_Result>("[PayrollExtensionEntities].[GetALLstartingFromHireDateTesting](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLstartingFromHireDateTesting2")]
        public virtual IQueryable<GetALLstartingFromHireDateTesting2_Result> GetALLstartingFromHireDateTesting2(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLstartingFromHireDateTesting2_Result>("[PayrollExtensionEntities].[GetALLstartingFromHireDateTesting2](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetALLstartingFromHireDateTesting3")]
        public virtual IQueryable<GetALLstartingFromHireDateTesting3_Result> GetALLstartingFromHireDateTesting3(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetALLstartingFromHireDateTesting3_Result>("[PayrollExtensionEntities].[GetALLstartingFromHireDateTesting3](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAllWithSetSchedule")]
        public virtual IQueryable<GetAllWithSetSchedule_Result> GetAllWithSetSchedule(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAllWithSetSchedule_Result>("[PayrollExtensionEntities].[GetAllWithSetSchedule](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAuditTrail")]
        public virtual IQueryable<GetAuditTrail_Result> GetAuditTrail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAuditTrail_Result>("[PayrollExtensionEntities].[GetAuditTrail]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAuditTrailx")]
        public virtual IQueryable<GetAuditTrailx_Result> GetAuditTrailx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAuditTrailx_Result>("[PayrollExtensionEntities].[GetAuditTrailx]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetAuditTrailxx")]
        public virtual IQueryable<GetAuditTrailxx_Result> GetAuditTrailxx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetAuditTrailxx_Result>("[PayrollExtensionEntities].[GetAuditTrailxx]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetBaseComputation")]
        public virtual IQueryable<GetBaseComputation_Result> GetBaseComputation(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetBaseComputation_Result>("[PayrollExtensionEntities].[GetBaseComputation](@Type)", typeParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetails")]
        public virtual IQueryable<GetCampaignDetails_Result> GetCampaignDetails(string campaignNamed, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var campaignNamedParameter = campaignNamed != null ?
                new ObjectParameter("CampaignNamed", campaignNamed) :
                new ObjectParameter("CampaignNamed", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetails_Result>("[PayrollExtensionEntities].[GetCampaignDetails](@CampaignNamed, @DateFrom, @DateTo)", campaignNamedParameter, dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsAbsent")]
        public virtual IQueryable<GetCampaignDetailsAbsent_Result> GetCampaignDetailsAbsent(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsAbsent_Result>("[PayrollExtensionEntities].[GetCampaignDetailsAbsent](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsAbsentSuspended")]
        public virtual IQueryable<GetCampaignDetailsAbsentSuspended_Result> GetCampaignDetailsAbsentSuspended(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsAbsentSuspended_Result>("[PayrollExtensionEntities].[GetCampaignDetailsAbsentSuspended](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsAbsentSuspendedHD")]
        public virtual IQueryable<GetCampaignDetailsAbsentSuspendedHD_Result> GetCampaignDetailsAbsentSuspendedHD(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsAbsentSuspendedHD_Result>("[PayrollExtensionEntities].[GetCampaignDetailsAbsentSuspendedHD](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsAbsentSuspendedHDbyHOURS")]
        public virtual IQueryable<GetCampaignDetailsAbsentSuspendedHDbyHOURS_Result> GetCampaignDetailsAbsentSuspendedHDbyHOURS(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsAbsentSuspendedHDbyHOURS_Result>("[PayrollExtensionEntities].[GetCampaignDetailsAbsentSuspendedHDbyHOURS](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsAbsentSuspendedREV")]
        public virtual IQueryable<GetCampaignDetailsAbsentSuspendedREV_Result> GetCampaignDetailsAbsentSuspendedREV(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsAbsentSuspendedREV_Result>("[PayrollExtensionEntities].[GetCampaignDetailsAbsentSuspendedREV](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsALL")]
        public virtual IQueryable<GetCampaignDetailsALL_Result> GetCampaignDetailsALL(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsALL_Result>("[PayrollExtensionEntities].[GetCampaignDetailsALL](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsALLx")]
        public virtual IQueryable<GetCampaignDetailsALLx_Result> GetCampaignDetailsALLx(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsALLx_Result>("[PayrollExtensionEntities].[GetCampaignDetailsALLx](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsTESTX")]
        public virtual IQueryable<GetCampaignDetailsTESTX_Result> GetCampaignDetailsTESTX(string campaignNamed, string dateFrom, string dateTo)
        {
            var campaignNamedParameter = campaignNamed != null ?
                new ObjectParameter("CampaignNamed", campaignNamed) :
                new ObjectParameter("CampaignNamed", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsTESTX_Result>("[PayrollExtensionEntities].[GetCampaignDetailsTESTX](@CampaignNamed, @DateFrom, @DateTo)", campaignNamedParameter, dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsVLSLEL")]
        public virtual IQueryable<GetCampaignDetailsVLSLEL_Result> GetCampaignDetailsVLSLEL(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsVLSLEL_Result>("[PayrollExtensionEntities].[GetCampaignDetailsVLSLEL](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsVLSLELREV")]
        public virtual IQueryable<GetCampaignDetailsVLSLELREV_Result> GetCampaignDetailsVLSLELREV(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsVLSLELREV_Result>("[PayrollExtensionEntities].[GetCampaignDetailsVLSLELREV](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCampaignDetailsVLSLELREVx")]
        public virtual IQueryable<GetCampaignDetailsVLSLELREVx_Result> GetCampaignDetailsVLSLELREVx(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCampaignDetailsVLSLELREVx_Result>("[PayrollExtensionEntities].[GetCampaignDetailsVLSLELREVx](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetConsolidatedRepEmpDetails91913")]
        public virtual IQueryable<GetConsolidatedRepEmpDetails91913_Result> GetConsolidatedRepEmpDetails91913(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetConsolidatedRepEmpDetails91913_Result>("[PayrollExtensionEntities].[GetConsolidatedRepEmpDetails91913](@EmployeeNumber)", employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetCurrentCutOff")]
        public virtual IQueryable<GetCurrentCutOff_Result> GetCurrentCutOff()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetCurrentCutOff_Result>("[PayrollExtensionEntities].[GetCurrentCutOff]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetDailyScheduleAudit")]
        public virtual IQueryable<GetDailyScheduleAudit_Result> GetDailyScheduleAudit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDailyScheduleAudit_Result>("[PayrollExtensionEntities].[GetDailyScheduleAudit]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetDailyScheduleAuditREV")]
        public virtual IQueryable<GetDailyScheduleAuditREV_Result> GetDailyScheduleAuditREV()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDailyScheduleAuditREV_Result>("[PayrollExtensionEntities].[GetDailyScheduleAuditREV]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetDailyScheduleAuditREV2")]
        public virtual IQueryable<GetDailyScheduleAuditREV2_Result> GetDailyScheduleAuditREV2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDailyScheduleAuditREV2_Result>("[PayrollExtensionEntities].[GetDailyScheduleAuditREV2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetDailyScheduleAuditREVmc")]
        public virtual IQueryable<GetDailyScheduleAuditREVmc_Result> GetDailyScheduleAuditREVmc()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDailyScheduleAuditREVmc_Result>("[PayrollExtensionEntities].[GetDailyScheduleAuditREVmc]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetDailyScheduleAuditREVxx")]
        public virtual IQueryable<GetDailyScheduleAuditREVxx_Result> GetDailyScheduleAuditREVxx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetDailyScheduleAuditREVxx_Result>("[PayrollExtensionEntities].[GetDailyScheduleAuditREVxx]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHours")]
        public virtual IQueryable<GetEmpActualHours_Result> GetEmpActualHours(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHours_Result>("[PayrollExtensionEntities].[GetEmpActualHours](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgents")]
        public virtual IQueryable<GetEmpActualHoursAgents_Result> GetEmpActualHoursAgents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgents_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgents]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsByTL")]
        public virtual IQueryable<GetEmpActualHoursAgentsByTL_Result> GetEmpActualHoursAgentsByTL(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsByTL_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsByTL](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsMonthly")]
        public virtual IQueryable<GetEmpActualHoursAgentsMonthly_Result> GetEmpActualHoursAgentsMonthly(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsMonthly_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsMonthly](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsNew")]
        public virtual IQueryable<GetEmpActualHoursAgentsNew_Result> GetEmpActualHoursAgentsNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsNew_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsNew]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsNewREV15")]
        public virtual IQueryable<GetEmpActualHoursAgentsNewREV15_Result> GetEmpActualHoursAgentsNewREV15()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsNewREV15_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsNewREV15]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsNewREV30")]
        public virtual IQueryable<GetEmpActualHoursAgentsNewREV30_Result> GetEmpActualHoursAgentsNewREV30()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsNewREV30_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsNewREV30]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREV")]
        public virtual IQueryable<GetEmpActualHoursAgentsREV_Result> GetEmpActualHoursAgentsREV(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREV_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREV](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREV2")]
        public virtual IQueryable<GetEmpActualHoursAgentsREV2_Result> GetEmpActualHoursAgentsREV2(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREV2_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREV2](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREV3")]
        public virtual IQueryable<GetEmpActualHoursAgentsREV3_Result> GetEmpActualHoursAgentsREV3(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREV3_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREV3](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREV4")]
        public virtual IQueryable<GetEmpActualHoursAgentsREV4_Result> GetEmpActualHoursAgentsREV4(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREV4_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREV4](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREV5")]
        public virtual IQueryable<GetEmpActualHoursAgentsREV5_Result> GetEmpActualHoursAgentsREV5(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREV5_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREV5](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREV7")]
        public virtual IQueryable<GetEmpActualHoursAgentsREV7_Result> GetEmpActualHoursAgentsREV7(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREV7_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREV7](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREV8")]
        public virtual IQueryable<GetEmpActualHoursAgentsREV8_Result> GetEmpActualHoursAgentsREV8(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREV8_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREV8](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREV8new")]
        public virtual IQueryable<GetEmpActualHoursAgentsREV8new_Result> GetEmpActualHoursAgentsREV8new(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREV8new_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREV8new](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsREVTemp")]
        public virtual IQueryable<GetEmpActualHoursAgentsREVTemp_Result> GetEmpActualHoursAgentsREVTemp(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsREVTemp_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsREVTemp](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsSpecDate")]
        public virtual IQueryable<GetEmpActualHoursAgentsSpecDate_Result> GetEmpActualHoursAgentsSpecDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsSpecDate_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsSpecDate]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursAgentsWeekly")]
        public virtual IQueryable<GetEmpActualHoursAgentsWeekly_Result> GetEmpActualHoursAgentsWeekly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursAgentsWeekly_Result>("[PayrollExtensionEntities].[GetEmpActualHoursAgentsWeekly]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV")]
        public virtual IQueryable<GetEmpActualHoursREV_Result> GetEmpActualHoursREV(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV2")]
        public virtual IQueryable<GetEmpActualHoursREV2_Result> GetEmpActualHoursREV2(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV2_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV2](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV3")]
        public virtual IQueryable<GetEmpActualHoursREV3_Result> GetEmpActualHoursREV3(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV3_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV3](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV4")]
        public virtual IQueryable<GetEmpActualHoursREV4_Result> GetEmpActualHoursREV4(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV4_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV4](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV5")]
        public virtual IQueryable<GetEmpActualHoursREV5_Result> GetEmpActualHoursREV5(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV5_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV5](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV6")]
        public virtual IQueryable<GetEmpActualHoursREV6_Result> GetEmpActualHoursREV6(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV6_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV6](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV6Edited")]
        public virtual IQueryable<GetEmpActualHoursREV6Edited_Result> GetEmpActualHoursREV6Edited(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV6Edited_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV6Edited](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV6Edited2")]
        public virtual IQueryable<GetEmpActualHoursREV6Edited2_Result> GetEmpActualHoursREV6Edited2(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV6Edited2_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV6Edited2](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV6Edited3")]
        public virtual IQueryable<GetEmpActualHoursREV6Edited3_Result> GetEmpActualHoursREV6Edited3(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV6Edited3_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV6Edited3](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV7")]
        public virtual IQueryable<GetEmpActualHoursREV7_Result> GetEmpActualHoursREV7(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV7_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV7](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursREV8")]
        public virtual IQueryable<GetEmpActualHoursREV8_Result> GetEmpActualHoursREV8(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursREV8_Result>("[PayrollExtensionEntities].[GetEmpActualHoursREV8](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursTOM")]
        public virtual IQueryable<GetEmpActualHoursTOM_Result> GetEmpActualHoursTOM(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursTOM_Result>("[PayrollExtensionEntities].[GetEmpActualHoursTOM](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursTOMRev")]
        public virtual IQueryable<GetEmpActualHoursTOMRev_Result> GetEmpActualHoursTOMRev(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursTOMRev_Result>("[PayrollExtensionEntities].[GetEmpActualHoursTOMRev](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpActualHoursWithAbsenB4Holiday")]
        public virtual IQueryable<GetEmpActualHoursWithAbsenB4Holiday_Result> GetEmpActualHoursWithAbsenB4Holiday(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpActualHoursWithAbsenB4Holiday_Result>("[PayrollExtensionEntities].[GetEmpActualHoursWithAbsenB4Holiday](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpCampaignTotalWorkHours")]
        public virtual IQueryable<GetEmpCampaignTotalWorkHours_Result> GetEmpCampaignTotalWorkHours(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpCampaignTotalWorkHours_Result>("[PayrollExtensionEntities].[GetEmpCampaignTotalWorkHours](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpLeaveFiled")]
        public virtual IQueryable<GetEmpLeaveFiled_Result> GetEmpLeaveFiled(string empNo)
        {
            var empNoParameter = empNo != null ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpLeaveFiled_Result>("[PayrollExtensionEntities].[GetEmpLeaveFiled](@EmpNo)", empNoParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeAbsent")]
        public virtual IQueryable<GetEmployeeAbsent_Result> GetEmployeeAbsent(string employeeNumber, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeAbsent_Result>("[PayrollExtensionEntities].[GetEmployeeAbsent](@EmployeeNumber, @FromDate, @ToDate)", employeeNumberParameter, fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeAbsentVR")]
        public virtual IQueryable<GetEmployeeAbsentVR_Result> GetEmployeeAbsentVR(string employeeNumber, Nullable<System.DateTime> toDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeAbsentVR_Result>("[PayrollExtensionEntities].[GetEmployeeAbsentVR](@EmployeeNumber, @ToDate)", employeeNumberParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeAssignment")]
        public virtual IQueryable<GetEmployeeAssignment_Result> GetEmployeeAssignment(string flag, string employeeNumber)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeAssignment_Result>("[PayrollExtensionEntities].[GetEmployeeAssignment](@Flag, @EmployeeNumber)", flagParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeByDepartment")]
        public virtual IQueryable<GetEmployeeByDepartment_Result> GetEmployeeByDepartment(Nullable<short> departmentID, string employeeNumber)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(short));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("employeeNumber", employeeNumber) :
                new ObjectParameter("employeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeByDepartment_Result>("[PayrollExtensionEntities].[GetEmployeeByDepartment](@DepartmentID, @employeeNumber)", departmentIDParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNames")]
        public virtual IQueryable<GetEmployeeNames_Result> GetEmployeeNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNames_Result>("[PayrollExtensionEntities].[GetEmployeeNames]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeND")]
        public virtual IQueryable<GetEmployeeND_Result> GetEmployeeND(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeND_Result>("[PayrollExtensionEntities].[GetEmployeeND](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDLH")]
        public virtual IQueryable<GetEmployeeNDLH_Result> GetEmployeeNDLH(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDLH_Result>("[PayrollExtensionEntities].[GetEmployeeNDLH](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDLHAMT")]
        public virtual IQueryable<GetEmployeeNDLHAMT_Result> GetEmployeeNDLHAMT(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDLHAMT_Result>("[PayrollExtensionEntities].[GetEmployeeNDLHAMT](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDLHR")]
        public virtual IQueryable<GetEmployeeNDLHR_Result> GetEmployeeNDLHR(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDLHR_Result>("[PayrollExtensionEntities].[GetEmployeeNDLHR](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDLHRAMT")]
        public virtual IQueryable<GetEmployeeNDLHRAMT_Result> GetEmployeeNDLHRAMT(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDLHRAMT_Result>("[PayrollExtensionEntities].[GetEmployeeNDLHRAMT](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDRD")]
        public virtual IQueryable<GetEmployeeNDRD_Result> GetEmployeeNDRD(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDRD_Result>("[PayrollExtensionEntities].[GetEmployeeNDRD](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDRDAMT")]
        public virtual IQueryable<GetEmployeeNDRDAMT_Result> GetEmployeeNDRDAMT(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDRDAMT_Result>("[PayrollExtensionEntities].[GetEmployeeNDRDAMT](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDSH")]
        public virtual IQueryable<GetEmployeeNDSH_Result> GetEmployeeNDSH(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDSH_Result>("[PayrollExtensionEntities].[GetEmployeeNDSH](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDSHAMT")]
        public virtual IQueryable<GetEmployeeNDSHAMT_Result> GetEmployeeNDSHAMT(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDSHAMT_Result>("[PayrollExtensionEntities].[GetEmployeeNDSHAMT](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDSHR")]
        public virtual IQueryable<GetEmployeeNDSHR_Result> GetEmployeeNDSHR(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDSHR_Result>("[PayrollExtensionEntities].[GetEmployeeNDSHR](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNDSHRAMT")]
        public virtual IQueryable<GetEmployeeNDSHRAMT_Result> GetEmployeeNDSHRAMT(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNDSHRAMT_Result>("[PayrollExtensionEntities].[GetEmployeeNDSHRAMT](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeNYH")]
        public virtual IQueryable<GetEmployeeNYH_Result> GetEmployeeNYH(Nullable<System.DateTime> from, string isRestDay, string employeeNumber)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeNYH_Result>("[PayrollExtensionEntities].[GetEmployeeNYH](@From, @isRestDay, @EmployeeNumber)", fromParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePay")]
        public virtual IQueryable<GetEmployeePay_Result> GetEmployeePay(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePay_Result>("[PayrollExtensionEntities].[GetEmployeePay](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePayIndividual")]
        public virtual IQueryable<GetEmployeePayIndividual_Result> GetEmployeePayIndividual(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePayIndividual_Result>("[PayrollExtensionEntities].[GetEmployeePayIndividual](@FromDate, @ToDate, @EmployeeNumber)", fromDateParameter, toDateParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePayPerEmployee")]
        public virtual IQueryable<GetEmployeePayPerEmployee_Result> GetEmployeePayPerEmployee(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePayPerEmployee_Result>("[PayrollExtensionEntities].[GetEmployeePayPerEmployee](@FromDate, @ToDate, @EmployeeNumber)", fromDateParameter, toDateParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePayREV")]
        public virtual IQueryable<GetEmployeePayREV_Result> GetEmployeePayREV(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePayREV_Result>("[PayrollExtensionEntities].[GetEmployeePayREV](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePayREV2")]
        public virtual IQueryable<GetEmployeePayREV2_Result> GetEmployeePayREV2(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePayREV2_Result>("[PayrollExtensionEntities].[GetEmployeePayREV2](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePayREV3")]
        public virtual IQueryable<GetEmployeePayREV3_Result> GetEmployeePayREV3(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePayREV3_Result>("[PayrollExtensionEntities].[GetEmployeePayREV3](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePayREV4")]
        public virtual IQueryable<GetEmployeePayREV4_Result> GetEmployeePayREV4(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePayREV4_Result>("[PayrollExtensionEntities].[GetEmployeePayREV4](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePayREV5")]
        public virtual IQueryable<GetEmployeePayREV5_Result> GetEmployeePayREV5(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePayREV5_Result>("[PayrollExtensionEntities].[GetEmployeePayREV5](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeePayREV6")]
        public virtual IQueryable<GetEmployeePayREV6_Result> GetEmployeePayREV6(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeePayREV6_Result>("[PayrollExtensionEntities].[GetEmployeePayREV6](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeeRegND")]
        public virtual IQueryable<GetEmployeeRegND_Result> GetEmployeeRegND(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string isRestDay, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeeRegND_Result>("[PayrollExtensionEntities].[GetEmployeeRegND](@FromDate, @ToDate, @isRestDay, @EmployeeNumber)", fromDateParameter, toDateParameter, isRestDayParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeesNBIClearance")]
        public virtual IQueryable<GetEmployeesNBIClearance_Result> GetEmployeesNBIClearance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeesNBIClearance_Result>("[PayrollExtensionEntities].[GetEmployeesNBIClearance]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeesOverBreak")]
        public virtual IQueryable<GetEmployeesOverBreak_Result> GetEmployeesOverBreak(string cID, Nullable<System.DateTime> date)
        {
            var cIDParameter = cID != null ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeesOverBreak_Result>("[PayrollExtensionEntities].[GetEmployeesOverBreak](@CID, @Date)", cIDParameter, dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeesOverBreakByDate")]
        public virtual IQueryable<GetEmployeesOverBreakByDate_Result> GetEmployeesOverBreakByDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeesOverBreakByDate_Result>("[PayrollExtensionEntities].[GetEmployeesOverBreakByDate](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmployeesOverBreakWFM")]
        public virtual IQueryable<GetEmployeesOverBreakWFM_Result> GetEmployeesOverBreakWFM(string employeeNumber, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmployeesOverBreakWFM_Result>("[PayrollExtensionEntities].[GetEmployeesOverBreakWFM](@EmployeeNumber, @PeriodStart, @PeriodEnd)", employeeNumberParameter, periodStartParameter, periodEndParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpNoLogout")]
        public virtual IQueryable<GetEmpNoLogout_Result> GetEmpNoLogout()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpNoLogout_Result>("[PayrollExtensionEntities].[GetEmpNoLogout]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpNoLogout2")]
        public virtual IQueryable<GetEmpNoLogout2_Result> GetEmpNoLogout2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpNoLogout2_Result>("[PayrollExtensionEntities].[GetEmpNoLogout2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpNoLogout3")]
        public virtual IQueryable<GetEmpNoLogout3_Result> GetEmpNoLogout3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpNoLogout3_Result>("[PayrollExtensionEntities].[GetEmpNoLogout3]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpPayTest")]
        public virtual IQueryable<GetEmpPayTest_Result> GetEmpPayTest(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpPayTest_Result>("[PayrollExtensionEntities].[GetEmpPayTest](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpPayTest2")]
        public virtual IQueryable<GetEmpPayTest2_Result> GetEmpPayTest2(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpPayTest2_Result>("[PayrollExtensionEntities].[GetEmpPayTest2](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpPayTest3")]
        public virtual IQueryable<GetEmpPayTest3_Result> GetEmpPayTest3(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpPayTest3_Result>("[PayrollExtensionEntities].[GetEmpPayTest3](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpPayTest4")]
        public virtual IQueryable<GetEmpPayTest4_Result> GetEmpPayTest4(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpPayTest4_Result>("[PayrollExtensionEntities].[GetEmpPayTest4](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpSummaryTotalWorkHours")]
        public virtual IQueryable<GetEmpSummaryTotalWorkHours_Result> GetEmpSummaryTotalWorkHours()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpSummaryTotalWorkHours_Result>("[PayrollExtensionEntities].[GetEmpSummaryTotalWorkHours]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpSummaryTotalWorkHoursNew")]
        public virtual IQueryable<GetEmpSummaryTotalWorkHoursNew_Result> GetEmpSummaryTotalWorkHoursNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpSummaryTotalWorkHoursNew_Result>("[PayrollExtensionEntities].[GetEmpSummaryTotalWorkHoursNew]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpSummaryTotalWorkHoursSpecDate")]
        public virtual IQueryable<GetEmpSummaryTotalWorkHoursSpecDate_Result> GetEmpSummaryTotalWorkHoursSpecDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpSummaryTotalWorkHoursSpecDate_Result>("[PayrollExtensionEntities].[GetEmpSummaryTotalWorkHoursSpecDate]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetEmpSummaryTotalWorkHoursWeekly")]
        public virtual IQueryable<GetEmpSummaryTotalWorkHoursWeekly_Result> GetEmpSummaryTotalWorkHoursWeekly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetEmpSummaryTotalWorkHoursWeekly_Result>("[PayrollExtensionEntities].[GetEmpSummaryTotalWorkHoursWeekly]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetGrossSalaryYearly")]
        public virtual IQueryable<GetGrossSalaryYearly_Result> GetGrossSalaryYearly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetGrossSalaryYearly_Result>("[PayrollExtensionEntities].[GetGrossSalaryYearly]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRule")]
        public virtual IQueryable<GetHourRule_Result> GetHourRule(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRule_Result>("[PayrollExtensionEntities].[GetHourRule](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRep")]
        public virtual IQueryable<GetHourRuleRep_Result> GetHourRuleRep()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRep_Result>("[PayrollExtensionEntities].[GetHourRuleRep]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepFin")]
        public virtual IQueryable<GetHourRuleRepFin_Result> GetHourRuleRepFin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepFin_Result>("[PayrollExtensionEntities].[GetHourRuleRepFin]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepMon")]
        public virtual IQueryable<GetHourRuleRepMon_Result> GetHourRuleRepMon()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepMon_Result>("[PayrollExtensionEntities].[GetHourRuleRepMon]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepMon2")]
        public virtual IQueryable<GetHourRuleRepMon2_Result> GetHourRuleRepMon2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepMon2_Result>("[PayrollExtensionEntities].[GetHourRuleRepMon2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepMonFin")]
        public virtual IQueryable<GetHourRuleRepMonFin_Result> GetHourRuleRepMonFin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepMonFin_Result>("[PayrollExtensionEntities].[GetHourRuleRepMonFin]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepMonFin2")]
        public virtual IQueryable<GetHourRuleRepMonFin2_Result> GetHourRuleRepMonFin2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepMonFin2_Result>("[PayrollExtensionEntities].[GetHourRuleRepMonFin2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepPayroll")]
        public virtual IQueryable<GetHourRuleRepPayroll_Result> GetHourRuleRepPayroll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepPayroll_Result>("[PayrollExtensionEntities].[GetHourRuleRepPayroll]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepPayrollFin")]
        public virtual IQueryable<GetHourRuleRepPayrollFin_Result> GetHourRuleRepPayrollFin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepPayrollFin_Result>("[PayrollExtensionEntities].[GetHourRuleRepPayrollFin]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepSun")]
        public virtual IQueryable<GetHourRuleRepSun_Result> GetHourRuleRepSun()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepSun_Result>("[PayrollExtensionEntities].[GetHourRuleRepSun]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepSun2")]
        public virtual IQueryable<GetHourRuleRepSun2_Result> GetHourRuleRepSun2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepSun2_Result>("[PayrollExtensionEntities].[GetHourRuleRepSun2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepSunFin")]
        public virtual IQueryable<GetHourRuleRepSunFin_Result> GetHourRuleRepSunFin()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepSunFin_Result>("[PayrollExtensionEntities].[GetHourRuleRepSunFin]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleRepSunFin2")]
        public virtual IQueryable<GetHourRuleRepSunFin2_Result> GetHourRuleRepSunFin2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleRepSunFin2_Result>("[PayrollExtensionEntities].[GetHourRuleRepSunFin2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleTab")]
        public virtual IQueryable<GetHourRuleTab_Result> GetHourRuleTab(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleTab_Result>("[PayrollExtensionEntities].[GetHourRuleTab](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleTabSep")]
        public virtual IQueryable<GetHourRuleTabSep_Result> GetHourRuleTabSep(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleTabSep_Result>("[PayrollExtensionEntities].[GetHourRuleTabSep](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleTabSepX")]
        public virtual IQueryable<GetHourRuleTabSepX_Result> GetHourRuleTabSepX(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleTabSepX_Result>("[PayrollExtensionEntities].[GetHourRuleTabSepX](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleTabX")]
        public virtual IQueryable<GetHourRuleTabX_Result> GetHourRuleTabX(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleTabX_Result>("[PayrollExtensionEntities].[GetHourRuleTabX](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetHourRuleTabXX")]
        public virtual IQueryable<GetHourRuleTabXX_Result> GetHourRuleTabXX(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetHourRuleTabXX_Result>("[PayrollExtensionEntities].[GetHourRuleTabXX](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesStartingFromHireDate")]
        public virtual IQueryable<GetLatesStartingFromHireDate_Result> GetLatesStartingFromHireDate(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesStartingFromHireDate_Result>("[PayrollExtensionEntities].[GetLatesStartingFromHireDate](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesStartingFromHireDateWithBeforeAfterRD")]
        public virtual IQueryable<GetLatesStartingFromHireDateWithBeforeAfterRD_Result> GetLatesStartingFromHireDateWithBeforeAfterRD(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesStartingFromHireDateWithBeforeAfterRD_Result>("[PayrollExtensionEntities].[GetLatesStartingFromHireDateWithBeforeAfterRD](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesStartingFromHireDateWithBeforeAfterRD1")]
        public virtual IQueryable<GetLatesStartingFromHireDateWithBeforeAfterRD1_Result> GetLatesStartingFromHireDateWithBeforeAfterRD1(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesStartingFromHireDateWithBeforeAfterRD1_Result>("[PayrollExtensionEntities].[GetLatesStartingFromHireDateWithBeforeAfterRD1](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesStartingFromHireDateWithBeforeAfterRD2")]
        public virtual IQueryable<GetLatesStartingFromHireDateWithBeforeAfterRD2_Result> GetLatesStartingFromHireDateWithBeforeAfterRD2(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesStartingFromHireDateWithBeforeAfterRD2_Result>("[PayrollExtensionEntities].[GetLatesStartingFromHireDateWithBeforeAfterRD2](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesToday")]
        public virtual IQueryable<GetLatesToday_Result> GetLatesToday(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesToday_Result>("[PayrollExtensionEntities].[GetLatesToday](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesTodays")]
        public virtual IQueryable<GetLatesTodays_Result> GetLatesTodays()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesTodays_Result>("[PayrollExtensionEntities].[GetLatesTodays]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesTodays2")]
        public virtual IQueryable<GetLatesTodays2_Result> GetLatesTodays2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesTodays2_Result>("[PayrollExtensionEntities].[GetLatesTodays2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesTodaysTest")]
        public virtual IQueryable<GetLatesTodaysTest_Result> GetLatesTodaysTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesTodaysTest_Result>("[PayrollExtensionEntities].[GetLatesTodaysTest]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesTodaysTest2")]
        public virtual IQueryable<GetLatesTodaysTest2_Result> GetLatesTodaysTest2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesTodaysTest2_Result>("[PayrollExtensionEntities].[GetLatesTodaysTest2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesTodayxx")]
        public virtual IQueryable<GetLatesTodayxx_Result> GetLatesTodayxx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesTodayxx_Result>("[PayrollExtensionEntities].[GetLatesTodayxx]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesWeekly")]
        public virtual IQueryable<GetLatesWeekly_Result> GetLatesWeekly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesWeekly_Result>("[PayrollExtensionEntities].[GetLatesWeekly]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetLatesWeeklyRep")]
        public virtual IQueryable<GetLatesWeeklyRep_Result> GetLatesWeeklyRep()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetLatesWeeklyRep_Result>("[PayrollExtensionEntities].[GetLatesWeeklyRep]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetMetricCostPeriod")]
        public virtual IQueryable<GetMetricCostPeriod_Result> GetMetricCostPeriod(Nullable<System.DateTime> dateMonth)
        {
            var dateMonthParameter = dateMonth.HasValue ?
                new ObjectParameter("DateMonth", dateMonth) :
                new ObjectParameter("DateMonth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMetricCostPeriod_Result>("[PayrollExtensionEntities].[GetMetricCostPeriod](@DateMonth)", dateMonthParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetMonthlyTotalHours")]
        public virtual IQueryable<GetMonthlyTotalHours_Result> GetMonthlyTotalHours()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMonthlyTotalHours_Result>("[PayrollExtensionEntities].[GetMonthlyTotalHours]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetMonthlyTotalHoursREV")]
        public virtual IQueryable<GetMonthlyTotalHoursREV_Result> GetMonthlyTotalHoursREV()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetMonthlyTotalHoursREV_Result>("[PayrollExtensionEntities].[GetMonthlyTotalHoursREV]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetND")]
        public virtual IQueryable<GetND_Result> GetND(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag, string employeeNumber)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetND_Result>("[PayrollExtensionEntities].[GetND](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @isRestDay, @AttFlag, @EmployeeNumber)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetND2")]
        public virtual IQueryable<GetND2_Result> GetND2(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag, string employeeNumber)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetND2_Result>("[PayrollExtensionEntities].[GetND2](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @isRestDay, @AttFlag, @EmployeeNumber)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNDCase1")]
        public virtual IQueryable<GetNDCase1_Result> GetNDCase1(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("IsRestDay", isRestDay) :
                new ObjectParameter("IsRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNDCase1_Result>("[PayrollExtensionEntities].[GetNDCase1](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @IsRestDay, @AttFlag)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNDCase2")]
        public virtual IQueryable<GetNDCase2_Result> GetNDCase2(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("IsRestDay", isRestDay) :
                new ObjectParameter("IsRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNDCase2_Result>("[PayrollExtensionEntities].[GetNDCase2](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @IsRestDay, @AttFlag)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNDCase3")]
        public virtual IQueryable<GetNDCase3_Result> GetNDCase3(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("IsRestDay", isRestDay) :
                new ObjectParameter("IsRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNDCase3_Result>("[PayrollExtensionEntities].[GetNDCase3](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @IsRestDay, @AttFlag)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNDEugeneTest")]
        public virtual IQueryable<GetNDEugeneTest_Result> GetNDEugeneTest(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag, string employeeNumber)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNDEugeneTest_Result>("[PayrollExtensionEntities].[GetNDEugeneTest](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @isRestDay, @AttFlag, @EmployeeNumber)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNDPatched")]
        public virtual IQueryable<GetNDPatched_Result> GetNDPatched(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag, string employeeNumber)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNDPatched_Result>("[PayrollExtensionEntities].[GetNDPatched](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @isRestDay, @AttFlag, @EmployeeNumber)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNDSH")]
        public virtual IQueryable<GetNDSH_Result> GetNDSH(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag, string employeeNumber)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNDSH_Result>("[PayrollExtensionEntities].[GetNDSH](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @isRestDay, @AttFlag, @EmployeeNumber)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNDSHx")]
        public virtual IQueryable<GetNDSHx_Result> GetNDSHx(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag, string employeeNumber)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNDSHx_Result>("[PayrollExtensionEntities].[GetNDSHx](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @isRestDay, @AttFlag, @EmployeeNumber)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeIn")]
        public virtual IQueryable<GetNoTimeIn_Result> GetNoTimeIn(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeIn_Result>("[PayrollExtensionEntities].[GetNoTimeIn](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInTest")]
        public virtual IQueryable<GetNoTimeInTest_Result> GetNoTimeInTest(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInTest_Result>("[PayrollExtensionEntities].[GetNoTimeInTest](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInToday")]
        public virtual IQueryable<GetNoTimeInToday_Result> GetNoTimeInToday()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInToday_Result>("[PayrollExtensionEntities].[GetNoTimeInToday]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInTracker")]
        public virtual IQueryable<GetNoTimeInTracker_Result> GetNoTimeInTracker(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInTracker_Result>("[PayrollExtensionEntities].[GetNoTimeInTracker](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInTracker03142014")]
        public virtual IQueryable<GetNoTimeInTracker03142014_Result> GetNoTimeInTracker03142014(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInTracker03142014_Result>("[PayrollExtensionEntities].[GetNoTimeInTracker03142014](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInTrackerREV")]
        public virtual IQueryable<GetNoTimeInTrackerREV_Result> GetNoTimeInTrackerREV(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInTrackerREV_Result>("[PayrollExtensionEntities].[GetNoTimeInTrackerREV](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInYesterday")]
        public virtual IQueryable<GetNoTimeInYesterday_Result> GetNoTimeInYesterday(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInYesterday_Result>("[PayrollExtensionEntities].[GetNoTimeInYesterday](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInYesterday1")]
        public virtual IQueryable<GetNoTimeInYesterday1_Result> GetNoTimeInYesterday1(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInYesterday1_Result>("[PayrollExtensionEntities].[GetNoTimeInYesterday1](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInYesterday1backup")]
        public virtual IQueryable<GetNoTimeInYesterday1backup_Result> GetNoTimeInYesterday1backup(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInYesterday1backup_Result>("[PayrollExtensionEntities].[GetNoTimeInYesterday1backup](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetNoTimeInYesterdayOLD")]
        public virtual IQueryable<GetNoTimeInYesterdayOLD_Result> GetNoTimeInYesterdayOLD(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetNoTimeInYesterdayOLD_Result>("[PayrollExtensionEntities].[GetNoTimeInYesterdayOLD](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "getOICPositionID")]
        public virtual IQueryable<getOICPositionID_Result> getOICPositionID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<getOICPositionID_Result>("[PayrollExtensionEntities].[getOICPositionID]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetOICSubordinateList")]
        public virtual IQueryable<GetOICSubordinateList_Result> GetOICSubordinateList(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetOICSubordinateList_Result>("[PayrollExtensionEntities].[GetOICSubordinateList](@EmployeeID)", employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetOTs")]
        public virtual IQueryable<GetOTs_Result> GetOTs(Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeOut, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, string isRestDay, string attFlag, string employeeNumber)
        {
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeOutParameter = timeOut.HasValue ?
                new ObjectParameter("TimeOut", timeOut) :
                new ObjectParameter("TimeOut", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var isRestDayParameter = isRestDay != null ?
                new ObjectParameter("isRestDay", isRestDay) :
                new ObjectParameter("isRestDay", typeof(string));
    
            var attFlagParameter = attFlag != null ?
                new ObjectParameter("AttFlag", attFlag) :
                new ObjectParameter("AttFlag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetOTs_Result>("[PayrollExtensionEntities].[GetOTs](@TimeIn, @TimeOut, @SchedIn, @SchedOut, @isRestDay, @AttFlag, @EmployeeNumber)", timeInParameter, timeOutParameter, schedInParameter, schedOutParameter, isRestDayParameter, attFlagParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetOvertime")]
        public virtual IQueryable<GetOvertime_Result> GetOvertime(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetOvertime_Result>("[PayrollExtensionEntities].[GetOvertime](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetPaylist")]
        public virtual IQueryable<GetPaylist_Result> GetPaylist()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPaylist_Result>("[PayrollExtensionEntities].[GetPaylist]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetPayroll4MetricCost")]
        public virtual IQueryable<GetPayroll4MetricCost_Result> GetPayroll4MetricCost(Nullable<int> payfrom, Nullable<int> payto)
        {
            var payfromParameter = payfrom.HasValue ?
                new ObjectParameter("Payfrom", payfrom) :
                new ObjectParameter("Payfrom", typeof(int));
    
            var paytoParameter = payto.HasValue ?
                new ObjectParameter("Payto", payto) :
                new ObjectParameter("Payto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPayroll4MetricCost_Result>("[PayrollExtensionEntities].[GetPayroll4MetricCost](@Payfrom, @Payto)", payfromParameter, paytoParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetPayroll4MetricCost2")]
        public virtual IQueryable<GetPayroll4MetricCost2_Result> GetPayroll4MetricCost2(Nullable<int> payfrom, Nullable<int> payto)
        {
            var payfromParameter = payfrom.HasValue ?
                new ObjectParameter("Payfrom", payfrom) :
                new ObjectParameter("Payfrom", typeof(int));
    
            var paytoParameter = payto.HasValue ?
                new ObjectParameter("Payto", payto) :
                new ObjectParameter("Payto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPayroll4MetricCost2_Result>("[PayrollExtensionEntities].[GetPayroll4MetricCost2](@Payfrom, @Payto)", payfromParameter, paytoParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GETPCINFO")]
        public virtual IQueryable<GETPCINFO_Result> GETPCINFO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GETPCINFO_Result>("[PayrollExtensionEntities].[GETPCINFO]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetPresentDay")]
        public virtual IQueryable<GetPresentDay_Result> GetPresentDay(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPresentDay_Result>("[PayrollExtensionEntities].[GetPresentDay](@EmployeeNumber, @From, @To)", employeeNumberParameter, fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetPreviousMetrics")]
        public virtual IQueryable<GetPreviousMetrics_Result> GetPreviousMetrics(string empID)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPreviousMetrics_Result>("[PayrollExtensionEntities].[GetPreviousMetrics](@empID)", empIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetPreviousMetricsDetails")]
        public virtual IQueryable<GetPreviousMetricsDetails_Result> GetPreviousMetricsDetails(Nullable<long> userLogID)
        {
            var userLogIDParameter = userLogID.HasValue ?
                new ObjectParameter("UserLogID", userLogID) :
                new ObjectParameter("UserLogID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetPreviousMetricsDetails_Result>("[PayrollExtensionEntities].[GetPreviousMetricsDetails](@UserLogID)", userLogIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSchedulerNoSchedule")]
        public virtual IQueryable<GetSchedulerNoSchedule_Result> GetSchedulerNoSchedule(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSchedulerNoSchedule_Result>("[PayrollExtensionEntities].[GetSchedulerNoSchedule](@EmployeeNumber, @From, @To)", employeeNumberParameter, fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSL30")]
        public virtual IQueryable<GetSL30_Result> GetSL30(Nullable<System.DateTime> date, string employeeNumber)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSL30_Result>("[PayrollExtensionEntities].[GetSL30](@Date, @EmployeeNumber)", dateParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSL90")]
        public virtual IQueryable<GetSL90_Result> GetSL90(Nullable<System.DateTime> date, string employeeNumber)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSL90_Result>("[PayrollExtensionEntities].[GetSL90](@Date, @EmployeeNumber)", dateParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSLEL")]
        public virtual IQueryable<GetSLEL_Result> GetSLEL()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSLEL_Result>("[PayrollExtensionEntities].[GetSLEL]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSLELStartingFromHireDate")]
        public virtual IQueryable<GetSLELStartingFromHireDate_Result> GetSLELStartingFromHireDate(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSLELStartingFromHireDate_Result>("[PayrollExtensionEntities].[GetSLELStartingFromHireDate](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSLELStartingFromHireDateREV")]
        public virtual IQueryable<GetSLELStartingFromHireDateREV_Result> GetSLELStartingFromHireDateREV(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSLELStartingFromHireDateREV_Result>("[PayrollExtensionEntities].[GetSLELStartingFromHireDateREV](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSLELStartingFromHireDateREV1")]
        public virtual IQueryable<GetSLELStartingFromHireDateREV1_Result> GetSLELStartingFromHireDateREV1(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSLELStartingFromHireDateREV1_Result>("[PayrollExtensionEntities].[GetSLELStartingFromHireDateREV1](@Flag, @EmployeeID)", flagParameter, employeeIDParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSponsor")]
        public virtual IQueryable<GetSponsor_Result> GetSponsor(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSponsor_Result>("[PayrollExtensionEntities].[GetSponsor](@EmployeeNumber)", employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSponsorDisqualificationAbsences")]
        public virtual IQueryable<GetSponsorDisqualificationAbsences_Result> GetSponsorDisqualificationAbsences(string employeeNumber, Nullable<System.DateTime> startDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSponsorDisqualificationAbsences_Result>("[PayrollExtensionEntities].[GetSponsorDisqualificationAbsences](@EmployeeNumber, @StartDate)", employeeNumberParameter, startDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSponsorDisqualificationNEW")]
        public virtual IQueryable<GetSponsorDisqualificationNEW_Result> GetSponsorDisqualificationNEW(string employeeNumber, Nullable<System.DateTime> startDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSponsorDisqualificationNEW_Result>("[PayrollExtensionEntities].[GetSponsorDisqualificationNEW](@EmployeeNumber, @StartDate)", employeeNumberParameter, startDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSponsorDisqualificationUTLates")]
        public virtual IQueryable<GetSponsorDisqualificationUTLates_Result> GetSponsorDisqualificationUTLates(string employeeNumber, Nullable<System.DateTime> startDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSponsorDisqualificationUTLates_Result>("[PayrollExtensionEntities].[GetSponsorDisqualificationUTLates](@EmployeeNumber, @StartDate)", employeeNumberParameter, startDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSubordinate")]
        public virtual IQueryable<GetSubordinate_Result> GetSubordinate(string oICNumber)
        {
            var oICNumberParameter = oICNumber != null ?
                new ObjectParameter("OICNumber", oICNumber) :
                new ObjectParameter("OICNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSubordinate_Result>("[PayrollExtensionEntities].[GetSubordinate](@OICNumber)", oICNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTracker")]
        public virtual IQueryable<GetSummaryAttendanceTracker_Result> GetSummaryAttendanceTracker(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTracker_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTracker](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackerManual")]
        public virtual IQueryable<GetSummaryAttendanceTrackerManual_Result> GetSummaryAttendanceTrackerManual(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackerManual_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackerManual](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackerREV")]
        public virtual IQueryable<GetSummaryAttendanceTrackerREV_Result> GetSummaryAttendanceTrackerREV()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackerREV_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackerREV]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackers")]
        public virtual IQueryable<GetSummaryAttendanceTrackers_Result> GetSummaryAttendanceTrackers(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackers_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackers](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackersSubManual")]
        public virtual IQueryable<GetSummaryAttendanceTrackersSubManual_Result> GetSummaryAttendanceTrackersSubManual(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackersSubManual_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackersSubManual](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackersTest")]
        public virtual IQueryable<GetSummaryAttendanceTrackersTest_Result> GetSummaryAttendanceTrackersTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackersTest_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackersTest]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackersTest081112")]
        public virtual IQueryable<GetSummaryAttendanceTrackersTest081112_Result> GetSummaryAttendanceTrackersTest081112()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackersTest081112_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackersTest081112]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackerTest")]
        public virtual IQueryable<GetSummaryAttendanceTrackerTest_Result> GetSummaryAttendanceTrackerTest(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackerTest_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackerTest](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackerxx")]
        public virtual IQueryable<GetSummaryAttendanceTrackerxx_Result> GetSummaryAttendanceTrackerxx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackerxx_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackerxx]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackerxx2")]
        public virtual IQueryable<GetSummaryAttendanceTrackerxx2_Result> GetSummaryAttendanceTrackerxx2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackerxx2_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackerxx2]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackerxxREV")]
        public virtual IQueryable<GetSummaryAttendanceTrackerxxREV_Result> GetSummaryAttendanceTrackerxxREV()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackerxxREV_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackerxxREV]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryAttendanceTrackerxxtest")]
        public virtual IQueryable<GetSummaryAttendanceTrackerxxtest_Result> GetSummaryAttendanceTrackerxxtest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryAttendanceTrackerxxtest_Result>("[PayrollExtensionEntities].[GetSummaryAttendanceTrackerxxtest]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryTrackerTest")]
        public virtual IQueryable<GetSummaryTrackerTest_Result> GetSummaryTrackerTest(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryTrackerTest_Result>("[PayrollExtensionEntities].[GetSummaryTrackerTest](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryTrackerTest2")]
        public virtual IQueryable<GetSummaryTrackerTest2_Result> GetSummaryTrackerTest2(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryTrackerTest2_Result>("[PayrollExtensionEntities].[GetSummaryTrackerTest2](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryTrackerTest3")]
        public virtual IQueryable<GetSummaryTrackerTest3_Result> GetSummaryTrackerTest3(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryTrackerTest3_Result>("[PayrollExtensionEntities].[GetSummaryTrackerTest3](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetSummaryTrackerTestDIN")]
        public virtual IQueryable<GetSummaryTrackerTestDIN_Result> GetSummaryTrackerTestDIN(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetSummaryTrackerTestDIN_Result>("[PayrollExtensionEntities].[GetSummaryTrackerTestDIN](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTempTotalHoursWork")]
        public virtual IQueryable<GetTempTotalHoursWork_Result> GetTempTotalHoursWork(string empID, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTempTotalHoursWork_Result>("[PayrollExtensionEntities].[GetTempTotalHoursWork](@empID, @from, @to)", empIDParameter, fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalGrossSalary")]
        public virtual IQueryable<GetTotalGrossSalary_Result> GetTotalGrossSalary(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalGrossSalary_Result>("[PayrollExtensionEntities].[GetTotalGrossSalary](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursPerDay")]
        public virtual IQueryable<GetTotalHoursPerDay_Result> GetTotalHoursPerDay(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursPerDay_Result>("[PayrollExtensionEntities].[GetTotalHoursPerDay](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork1")]
        public virtual IQueryable<GetTotalHoursWork1_Result> GetTotalHoursWork1(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork1_Result>("[PayrollExtensionEntities].[GetTotalHoursWork1](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork2")]
        public virtual IQueryable<GetTotalHoursWork2_Result> GetTotalHoursWork2(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork2_Result>("[PayrollExtensionEntities].[GetTotalHoursWork2](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork3")]
        public virtual IQueryable<GetTotalHoursWork3_Result> GetTotalHoursWork3(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork3_Result>("[PayrollExtensionEntities].[GetTotalHoursWork3](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork3REV")]
        public virtual IQueryable<GetTotalHoursWork3REV_Result> GetTotalHoursWork3REV(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork3REV_Result>("[PayrollExtensionEntities].[GetTotalHoursWork3REV](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork3REV2")]
        public virtual IQueryable<GetTotalHoursWork3REV2_Result> GetTotalHoursWork3REV2(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork3REV2_Result>("[PayrollExtensionEntities].[GetTotalHoursWork3REV2](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork3REV2a")]
        public virtual IQueryable<GetTotalHoursWork3REV2a_Result> GetTotalHoursWork3REV2a(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork3REV2a_Result>("[PayrollExtensionEntities].[GetTotalHoursWork3REV2a](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork3REV3")]
        public virtual IQueryable<GetTotalHoursWork3REV3_Result> GetTotalHoursWork3REV3()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork3REV3_Result>("[PayrollExtensionEntities].[GetTotalHoursWork3REV3]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork3REV4")]
        public virtual IQueryable<GetTotalHoursWork3REV4_Result> GetTotalHoursWork3REV4(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork3REV4_Result>("[PayrollExtensionEntities].[GetTotalHoursWork3REV4](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork3Test")]
        public virtual IQueryable<GetTotalHoursWork3Test_Result> GetTotalHoursWork3Test(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork3Test_Result>("[PayrollExtensionEntities].[GetTotalHoursWork3Test](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork4")]
        public virtual IQueryable<GetTotalHoursWork4_Result> GetTotalHoursWork4(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork4_Result>("[PayrollExtensionEntities].[GetTotalHoursWork4](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWork5")]
        public virtual IQueryable<GetTotalHoursWork5_Result> GetTotalHoursWork5(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWork5_Result>("[PayrollExtensionEntities].[GetTotalHoursWork5](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetTotalHoursWorkTest3")]
        public virtual IQueryable<GetTotalHoursWorkTest3_Result> GetTotalHoursWorkTest3(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("to", to) :
                new ObjectParameter("to", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetTotalHoursWorkTest3_Result>("[PayrollExtensionEntities].[GetTotalHoursWorkTest3](@from, @to)", fromParameter, toParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "Getundertime")]
        public virtual IQueryable<Getundertime_Result> Getundertime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Getundertime_Result>("[PayrollExtensionEntities].[Getundertime]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetUndertimeWeeklyRep")]
        public virtual IQueryable<GetUndertimeWeeklyRep_Result> GetUndertimeWeeklyRep()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetUndertimeWeeklyRep_Result>("[PayrollExtensionEntities].[GetUndertimeWeeklyRep]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetWeeklyAttendanceReports")]
        public virtual IQueryable<GetWeeklyAttendanceReports_Result> GetWeeklyAttendanceReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWeeklyAttendanceReports_Result>("[PayrollExtensionEntities].[GetWeeklyAttendanceReports]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "GetWeeklyAttendanceReportsForSeth")]
        public virtual IQueryable<GetWeeklyAttendanceReportsForSeth_Result> GetWeeklyAttendanceReportsForSeth(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWeeklyAttendanceReportsForSeth_Result>("[PayrollExtensionEntities].[GetWeeklyAttendanceReportsForSeth](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetWeeklyAttendanceReportsForSethTest")]
        public virtual IQueryable<GetWeeklyAttendanceReportsForSethTest_Result> GetWeeklyAttendanceReportsForSethTest(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWeeklyAttendanceReportsForSethTest_Result>("[PayrollExtensionEntities].[GetWeeklyAttendanceReportsForSethTest](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetWeeklyAttendanceSVN")]
        public virtual IQueryable<GetWeeklyAttendanceSVN_Result> GetWeeklyAttendanceSVN(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWeeklyAttendanceSVN_Result>("[PayrollExtensionEntities].[GetWeeklyAttendanceSVN](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetWeeklyAttendanceYearly")]
        public virtual IQueryable<GetWeeklyAttendanceYearly_Result> GetWeeklyAttendanceYearly(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWeeklyAttendanceYearly_Result>("[PayrollExtensionEntities].[GetWeeklyAttendanceYearly](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetWeeklyOTReports")]
        public virtual IQueryable<GetWeeklyOTReports_Result> GetWeeklyOTReports(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWeeklyOTReports_Result>("[PayrollExtensionEntities].[GetWeeklyOTReports](@DateFrom, @DateTo)", dateFromParameter, dateToParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "GetWeeklyScheduleAudit")]
        public virtual IQueryable<GetWeeklyScheduleAudit_Result> GetWeeklyScheduleAudit()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<GetWeeklyScheduleAudit_Result>("[PayrollExtensionEntities].[GetWeeklyScheduleAudit]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "LeaveAccrualDaily")]
        public virtual IQueryable<LeaveAccrualDaily_Result> LeaveAccrualDaily()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<LeaveAccrualDaily_Result>("[PayrollExtensionEntities].[LeaveAccrualDaily]()");
        }
    
        [DbFunction("PayrollExtensionEntities", "MonthPayPeriod")]
        public virtual IQueryable<MonthPayPeriod_Result> MonthPayPeriod(Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, Nullable<System.DateTime> paydate, Nullable<System.DateTime> monthPaydate)
        {
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var paydateParameter = paydate.HasValue ?
                new ObjectParameter("Paydate", paydate) :
                new ObjectParameter("Paydate", typeof(System.DateTime));
    
            var monthPaydateParameter = monthPaydate.HasValue ?
                new ObjectParameter("MonthPaydate", monthPaydate) :
                new ObjectParameter("MonthPaydate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MonthPayPeriod_Result>("[PayrollExtensionEntities].[MonthPayPeriod](@PeriodStart, @PeriodEnd, @Paydate, @MonthPaydate)", periodStartParameter, periodEndParameter, paydateParameter, monthPaydateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "PayrollAbsentSLVLEL")]
        public virtual IQueryable<PayrollAbsentSLVLEL_Result> PayrollAbsentSLVLEL(string dateFrom, string dateTo, string employeeNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PayrollAbsentSLVLEL_Result>("[PayrollExtensionEntities].[PayrollAbsentSLVLEL](@DateFrom, @DateTo, @EmployeeNumber)", dateFromParameter, dateToParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "PayrollHours")]
        public virtual IQueryable<PayrollHours_Result> PayrollHours(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PayrollHours_Result>("[PayrollExtensionEntities].[PayrollHours](@FromDate, @ToDate, @EmployeeNumber)", fromDateParameter, toDateParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "PayrollHoursTest")]
        public virtual IQueryable<PayrollHoursTest_Result> PayrollHoursTest(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PayrollHoursTest_Result>("[PayrollExtensionEntities].[PayrollHoursTest](@FromDate, @ToDate, @EmployeeNumber)", fromDateParameter, toDateParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "PayrollHoursTest2")]
        public virtual IQueryable<PayrollHoursTest2_Result> PayrollHoursTest2(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PayrollHoursTest2_Result>("[PayrollExtensionEntities].[PayrollHoursTest2](@FromDate, @ToDate)", fromDateParameter, toDateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "PayrollPay")]
        public virtual IQueryable<PayrollPay_Result> PayrollPay(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string employeeNumber)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<PayrollPay_Result>("[PayrollExtensionEntities].[PayrollPay](@FromDate, @ToDate, @EmployeeNumber)", fromDateParameter, toDateParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "SetEmployeeDayAbsent")]
        public virtual IQueryable<SetEmployeeDayAbsent_Result> SetEmployeeDayAbsent(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string employeeNumber)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SetEmployeeDayAbsent_Result>("[PayrollExtensionEntities].[SetEmployeeDayAbsent](@From, @To, @EmployeeNumber)", fromParameter, toParameter, employeeNumberParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "Split")]
        public virtual IQueryable<Split_Result> Split(string rowData, string splitOn)
        {
            var rowDataParameter = rowData != null ?
                new ObjectParameter("RowData", rowData) :
                new ObjectParameter("RowData", typeof(string));
    
            var splitOnParameter = splitOn != null ?
                new ObjectParameter("SplitOn", splitOn) :
                new ObjectParameter("SplitOn", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Split_Result>("[PayrollExtensionEntities].[Split](@RowData, @SplitOn)", rowDataParameter, splitOnParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "SPLIT2")]
        public virtual IQueryable<SPLIT2_Result> SPLIT2(string s, string trimPieces, string returnEmptyStrings)
        {
            var sParameter = s != null ?
                new ObjectParameter("s", s) :
                new ObjectParameter("s", typeof(string));
    
            var trimPiecesParameter = trimPieces != null ?
                new ObjectParameter("trimPieces", trimPieces) :
                new ObjectParameter("trimPieces", typeof(string));
    
            var returnEmptyStringsParameter = returnEmptyStrings != null ?
                new ObjectParameter("returnEmptyStrings", returnEmptyStrings) :
                new ObjectParameter("returnEmptyStrings", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SPLIT2_Result>("[PayrollExtensionEntities].[SPLIT2](@s, @trimPieces, @returnEmptyStrings)", sParameter, trimPiecesParameter, returnEmptyStringsParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "Tracker_GetNoTimeIn")]
        public virtual IQueryable<Tracker_GetNoTimeIn_Result> Tracker_GetNoTimeIn(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Tracker_GetNoTimeIn_Result>("[PayrollExtensionEntities].[Tracker_GetNoTimeIn](@Date)", dateParameter);
        }
    
        [DbFunction("PayrollExtensionEntities", "Tracker_GetSummaryAttendanceTracker")]
        public virtual IQueryable<Tracker_GetSummaryAttendanceTracker_Result> Tracker_GetSummaryAttendanceTracker(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<Tracker_GetSummaryAttendanceTracker_Result>("[PayrollExtensionEntities].[Tracker_GetSummaryAttendanceTracker](@Date)", dateParameter);
        }
    
        public virtual ObjectResult<f1500ClubGetEmployees_Result> f1500ClubGetEmployees(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f1500ClubGetEmployees_Result>("f1500ClubGetEmployees", employeeNumberParameter);
        }
    
        public virtual int AddEndOfPayroll(string empID, Nullable<System.DateTime> date, string remarks, string auditUser)
        {
            var empIDParameter = empID != null ?
                new ObjectParameter("EmpID", empID) :
                new ObjectParameter("EmpID", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEndOfPayroll", empIDParameter, dateParameter, remarksParameter, auditUserParameter);
        }
    
        public virtual int AttendanceWeekly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AttendanceWeekly");
        }
    
        public virtual int AuditTrail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuditTrail");
        }
    
        public virtual int AuditTrailxx()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AuditTrailxx");
        }
    
        public virtual int BackupNotification()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BackupNotification");
        }
    
        public virtual ObjectResult<Nullable<int>> ChangePassword(string employeeNumber, string password, string newPassword)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ChangePassword", employeeNumberParameter, passwordParameter, newPasswordParameter);
        }
    
        public virtual int ChangePasswordMetricUser(string employeeNumber, string password)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangePasswordMetricUser", employeeNumberParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckExistingLoan(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckExistingLoan", employeeNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckPayrollGenerated(Nullable<System.DateTime> schedDate, string employeeNumber)
        {
            var schedDateParameter = schedDate.HasValue ?
                new ObjectParameter("SchedDate", schedDate) :
                new ObjectParameter("SchedDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckPayrollGenerated", schedDateParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<CheckPayrollGeneratedREV_Result> CheckPayrollGeneratedREV(Nullable<System.DateTime> schedDate, string employeeNumber)
        {
            var schedDateParameter = schedDate.HasValue ?
                new ObjectParameter("SchedDate", schedDate) :
                new ObjectParameter("SchedDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckPayrollGeneratedREV_Result>("CheckPayrollGeneratedREV", schedDateParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckScheduleExist(string employeeNumber, Nullable<System.DateTime> date, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckScheduleExist", employeeNumberParameter, dateParameter, schedInParameter, schedOutParameter);
        }
    
        public virtual ObjectResult<ComputeTimespansByScheduleID_Result> ComputeTimespansByScheduleID(Nullable<int> scheduleID)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ComputeTimespansByScheduleID_Result>("ComputeTimespansByScheduleID", scheduleIDParameter);
        }
    
        public virtual int CreateMetricsUser(Nullable<bool> flag, string userName, string password, string firstName, string lastName, string active, Nullable<bool> changePW)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(bool));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var changePWParameter = changePW.HasValue ?
                new ObjectParameter("ChangePW", changePW) :
                new ObjectParameter("ChangePW", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateMetricsUser", flagParameter, userNameParameter, passwordParameter, firstNameParameter, lastNameParameter, activeParameter, changePWParameter);
        }
    
        public virtual int DeleteAttendance(Nullable<long> userLogID)
        {
            var userLogIDParameter = userLogID.HasValue ?
                new ObjectParameter("UserLogID", userLogID) :
                new ObjectParameter("UserLogID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAttendance", userLogIDParameter);
        }
    
        public virtual int DeleteEndOfPayroll(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEndOfPayroll", iDParameter);
        }
    
        public virtual int DeletefromOverBreak(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletefromOverBreak", iDParameter);
        }
    
        public virtual int DeleteFromSponsor(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteFromSponsor", iDParameter);
        }
    
        public virtual int DeleteOIC(Nullable<short> oICID)
        {
            var oICIDParameter = oICID.HasValue ?
                new ObjectParameter("OICID", oICID) :
                new ObjectParameter("OICID", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteOIC", oICIDParameter);
        }
    
        public virtual int DeletePayroll(Nullable<long> payrollNumber, Nullable<System.DateTime> payDate, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, Nullable<System.DateTime> period40HourStart, string posted, string auditUser, Nullable<System.DateTime> auditDate, string process, Nullable<int> num40HourWeeks, Nullable<int> pendingEmployees)
        {
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            var payDateParameter = payDate.HasValue ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(System.DateTime));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var period40HourStartParameter = period40HourStart.HasValue ?
                new ObjectParameter("Period40HourStart", period40HourStart) :
                new ObjectParameter("Period40HourStart", typeof(System.DateTime));
    
            var postedParameter = posted != null ?
                new ObjectParameter("Posted", posted) :
                new ObjectParameter("Posted", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var auditDateParameter = auditDate.HasValue ?
                new ObjectParameter("AuditDate", auditDate) :
                new ObjectParameter("AuditDate", typeof(System.DateTime));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var num40HourWeeksParameter = num40HourWeeks.HasValue ?
                new ObjectParameter("Num40HourWeeks", num40HourWeeks) :
                new ObjectParameter("Num40HourWeeks", typeof(int));
    
            var pendingEmployeesParameter = pendingEmployees.HasValue ?
                new ObjectParameter("PendingEmployees", pendingEmployees) :
                new ObjectParameter("PendingEmployees", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePayroll", payrollNumberParameter, payDateParameter, periodStartParameter, periodEndParameter, period40HourStartParameter, postedParameter, auditUserParameter, auditDateParameter, processParameter, num40HourWeeksParameter, pendingEmployeesParameter);
        }
    
        public virtual int DSARepAuto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DSARepAuto");
        }
    
        public virtual int DSARepAutoFinal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DSARepAutoFinal");
        }
    
        public virtual int dt_addtosourcecontrol(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_addtosourcecontrol_u(string vchSourceSafeINI, string vchProjectName, string vchComment, string vchLoginName, string vchPassword)
        {
            var vchSourceSafeINIParameter = vchSourceSafeINI != null ?
                new ObjectParameter("vchSourceSafeINI", vchSourceSafeINI) :
                new ObjectParameter("vchSourceSafeINI", typeof(string));
    
            var vchProjectNameParameter = vchProjectName != null ?
                new ObjectParameter("vchProjectName", vchProjectName) :
                new ObjectParameter("vchProjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_addtosourcecontrol_u", vchSourceSafeINIParameter, vchProjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_adduserobject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject");
        }
    
        public virtual int dt_adduserobject_vcs(string vchProperty)
        {
            var vchPropertyParameter = vchProperty != null ?
                new ObjectParameter("vchProperty", vchProperty) :
                new ObjectParameter("vchProperty", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_adduserobject_vcs", vchPropertyParameter);
        }
    
        public virtual int dt_checkinobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkinobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag, string txStream1, string txStream2, string txStream3)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            var txStream1Parameter = txStream1 != null ?
                new ObjectParameter("txStream1", txStream1) :
                new ObjectParameter("txStream1", typeof(string));
    
            var txStream2Parameter = txStream2 != null ?
                new ObjectParameter("txStream2", txStream2) :
                new ObjectParameter("txStream2", typeof(string));
    
            var txStream3Parameter = txStream3 != null ?
                new ObjectParameter("txStream3", txStream3) :
                new ObjectParameter("txStream3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkinobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter, txStream1Parameter, txStream2Parameter, txStream3Parameter);
        }
    
        public virtual int dt_checkoutobject(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_checkoutobject_u(string chObjectType, string vchObjectName, string vchComment, string vchLoginName, string vchPassword, Nullable<int> iVCSFlags, Nullable<int> iActionFlag)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchCommentParameter = vchComment != null ?
                new ObjectParameter("vchComment", vchComment) :
                new ObjectParameter("vchComment", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iVCSFlagsParameter = iVCSFlags.HasValue ?
                new ObjectParameter("iVCSFlags", iVCSFlags) :
                new ObjectParameter("iVCSFlags", typeof(int));
    
            var iActionFlagParameter = iActionFlag.HasValue ?
                new ObjectParameter("iActionFlag", iActionFlag) :
                new ObjectParameter("iActionFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_checkoutobject_u", chObjectTypeParameter, vchObjectNameParameter, vchCommentParameter, vchLoginNameParameter, vchPasswordParameter, iVCSFlagsParameter, iActionFlagParameter);
        }
    
        public virtual int dt_displayoaerror(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_displayoaerror_u(Nullable<int> iObject, Nullable<int> iresult)
        {
            var iObjectParameter = iObject.HasValue ?
                new ObjectParameter("iObject", iObject) :
                new ObjectParameter("iObject", typeof(int));
    
            var iresultParameter = iresult.HasValue ?
                new ObjectParameter("iresult", iresult) :
                new ObjectParameter("iresult", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_displayoaerror_u", iObjectParameter, iresultParameter);
        }
    
        public virtual int dt_droppropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_droppropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual int dt_dropuserobjectbyid(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_dropuserobjectbyid", idParameter);
        }
    
        public virtual int dt_generateansiname(ObjectParameter name)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_generateansiname", name);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop(string property, string value)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop", propertyParameter, valueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> dt_getobjwithprop_u(string property, string uvalue)
        {
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_getobjwithprop_u", propertyParameter, uvalueParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_Result> dt_getpropertiesbyid(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_Result>("dt_getpropertiesbyid", idParameter, propertyParameter);
        }
    
        public virtual ObjectResult<dt_getpropertiesbyid_u_Result> dt_getpropertiesbyid_u(Nullable<int> id, string property)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<dt_getpropertiesbyid_u_Result>("dt_getpropertiesbyid_u", idParameter, propertyParameter);
        }
    
        public virtual int dt_getpropertiesbyid_vcs(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_getpropertiesbyid_vcs_u(Nullable<int> id, string property, ObjectParameter value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_getpropertiesbyid_vcs_u", idParameter, propertyParameter, value);
        }
    
        public virtual int dt_isundersourcecontrol(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_isundersourcecontrol_u(string vchLoginName, string vchPassword, Nullable<int> iWhoToo)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            var iWhoTooParameter = iWhoToo.HasValue ?
                new ObjectParameter("iWhoToo", iWhoToo) :
                new ObjectParameter("iWhoToo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_isundersourcecontrol_u", vchLoginNameParameter, vchPasswordParameter, iWhoTooParameter);
        }
    
        public virtual int dt_removefromsourcecontrol()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_removefromsourcecontrol");
        }
    
        public virtual int dt_setpropertybyid(Nullable<int> id, string property, string value, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid", idParameter, propertyParameter, valueParameter, lvalueParameter);
        }
    
        public virtual int dt_setpropertybyid_u(Nullable<int> id, string property, string uvalue, byte[] lvalue)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var propertyParameter = property != null ?
                new ObjectParameter("property", property) :
                new ObjectParameter("property", typeof(string));
    
            var uvalueParameter = uvalue != null ?
                new ObjectParameter("uvalue", uvalue) :
                new ObjectParameter("uvalue", typeof(string));
    
            var lvalueParameter = lvalue != null ?
                new ObjectParameter("lvalue", lvalue) :
                new ObjectParameter("lvalue", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_setpropertybyid_u", idParameter, propertyParameter, uvalueParameter, lvalueParameter);
        }
    
        public virtual int dt_validateloginparams(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_validateloginparams_u(string vchLoginName, string vchPassword)
        {
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_validateloginparams_u", vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_vcsenabled()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_vcsenabled");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp006()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp006");
        }
    
        public virtual ObjectResult<Nullable<int>> dt_verstamp007()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("dt_verstamp007");
        }
    
        public virtual int dt_whocheckedout(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual int dt_whocheckedout_u(string chObjectType, string vchObjectName, string vchLoginName, string vchPassword)
        {
            var chObjectTypeParameter = chObjectType != null ?
                new ObjectParameter("chObjectType", chObjectType) :
                new ObjectParameter("chObjectType", typeof(string));
    
            var vchObjectNameParameter = vchObjectName != null ?
                new ObjectParameter("vchObjectName", vchObjectName) :
                new ObjectParameter("vchObjectName", typeof(string));
    
            var vchLoginNameParameter = vchLoginName != null ?
                new ObjectParameter("vchLoginName", vchLoginName) :
                new ObjectParameter("vchLoginName", typeof(string));
    
            var vchPasswordParameter = vchPassword != null ?
                new ObjectParameter("vchPassword", vchPassword) :
                new ObjectParameter("vchPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("dt_whocheckedout_u", chObjectTypeParameter, vchObjectNameParameter, vchLoginNameParameter, vchPasswordParameter);
        }
    
        public virtual ObjectResult<EK_1500Gain_Result> EK_1500Gain(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EK_1500Gain_Result>("EK_1500Gain", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<EK_1500LOSE_Result> EK_1500LOSE(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EK_1500LOSE_Result>("EK_1500LOSE", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual int EmailReSchedToTL(string employeenumber)
        {
            var employeenumberParameter = employeenumber != null ?
                new ObjectParameter("Employeenumber", employeenumber) :
                new ObjectParameter("Employeenumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmailReSchedToTL", employeenumberParameter);
        }
    
        public virtual int EmailReSchedToTLREV(string employeenumber)
        {
            var employeenumberParameter = employeenumber != null ?
                new ObjectParameter("Employeenumber", employeenumber) :
                new ObjectParameter("Employeenumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmailReSchedToTLREV", employeenumberParameter);
        }
    
        public virtual ObjectResult<EmployeeInfo_Result> EmployeeInfo(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeInfo_Result>("EmployeeInfo", employeeNumberParameter);
        }
    
        public virtual int EmployeeKioskChangeMainPassword(string employeeNumber, string password)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmployeeKioskChangeMainPassword", employeeNumberParameter, passwordParameter);
        }
    
        public virtual ObjectResult<EmployeeKioskGetEmployeeAdjustment_Result> EmployeeKioskGetEmployeeAdjustment(string employeeNumber, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeKioskGetEmployeeAdjustment_Result>("EmployeeKioskGetEmployeeAdjustment", employeeNumberParameter, periodStartParameter, periodEndParameter);
        }
    
        public virtual ObjectResult<EmployeeKioskGetEmployeeAdvances_Result> EmployeeKioskGetEmployeeAdvances(string employeeNumber, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeKioskGetEmployeeAdvances_Result>("EmployeeKioskGetEmployeeAdvances", employeeNumberParameter, periodStartParameter, periodEndParameter);
        }
    
        public virtual ObjectResult<EmployeeKioskGetEmployeeRepresentation_Result> EmployeeKioskGetEmployeeRepresentation(string employeeNumber, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmployeeKioskGetEmployeeRepresentation_Result>("EmployeeKioskGetEmployeeRepresentation", employeeNumberParameter, periodStartParameter, periodEndParameter);
        }
    
        public virtual int FlexiEmployeeLogin(string employeeNumber, Nullable<System.DateTime> timeIn, Nullable<int> scheduleID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("FlexiEmployeeLogin", employeeNumberParameter, timeInParameter, scheduleIDParameter);
        }
    
        public virtual ObjectResult<Generate40HourRule_Result> Generate40HourRule(string dateFrom, string dateTo, string employeeNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Generate40HourRule_Result>("Generate40HourRule", dateFromParameter, dateToParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<Generate40HourRule11122013_Result> Generate40HourRule11122013(string dateFrom, string dateTo)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Generate40HourRule11122013_Result>("Generate40HourRule11122013", dateFromParameter, dateToParameter);
        }
    
        public virtual int GenerateCompleteAttendance(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateCompleteAttendance", dateFromParameter, dateToParameter);
        }
    
        public virtual int GenerateHDMFLoanBalance(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GenerateHDMFLoanBalance", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GenerateOtherPaySlipData_Result> GenerateOtherPaySlipData(string iD, Nullable<System.DateTime> payDate)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var payDateParameter = payDate.HasValue ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateOtherPaySlipData_Result>("GenerateOtherPaySlipData", iDParameter, payDateParameter);
        }
    
        public virtual int GeneratePayrollData(string dateFrom, string dateTo, string employeeNumber, Nullable<int> payrollNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneratePayrollData", dateFromParameter, dateToParameter, employeeNumberParameter, payrollNumberParameter);
        }
    
        public virtual int GeneratePayrollData_02052014(string dateFrom, string dateTo, string employeeNumber, Nullable<int> payrollNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneratePayrollData_02052014", dateFromParameter, dateToParameter, employeeNumberParameter, payrollNumberParameter);
        }
    
        public virtual int GeneratePayrollDataOLD(string dateFrom, string dateTo, string employeeNumber, Nullable<int> payrollNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneratePayrollDataOLD", dateFromParameter, dateToParameter, employeeNumberParameter, payrollNumberParameter);
        }
    
        public virtual ObjectResult<GeneratePayrollDataOpt_Result> GeneratePayrollDataOpt(string dateFrom, string dateTo, string dateFrom1)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneratePayrollDataOpt_Result>("GeneratePayrollDataOpt", dateFromParameter, dateToParameter, dateFrom1Parameter);
        }
    
        public virtual ObjectResult<GeneratePayrollDataREV_Result> GeneratePayrollDataREV(string dateFrom, string dateTo, string dateFrom1)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneratePayrollDataREV_Result>("GeneratePayrollDataREV", dateFromParameter, dateToParameter, dateFrom1Parameter);
        }
    
        public virtual ObjectResult<GeneratePayrollDataREV2_Result> GeneratePayrollDataREV2(string dateFrom, string dateTo, string dateFrom1)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneratePayrollDataREV2_Result>("GeneratePayrollDataREV2", dateFromParameter, dateToParameter, dateFrom1Parameter);
        }
    
        public virtual ObjectResult<GeneratePayrollDataRev3_Result> GeneratePayrollDataRev3(string dateFrom, string dateTo, string dateFrom1)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneratePayrollDataRev3_Result>("GeneratePayrollDataRev3", dateFromParameter, dateToParameter, dateFrom1Parameter);
        }
    
        public virtual int GeneratePayrollDataREV4(string dateFrom, string dateTo, string dateFrom1)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneratePayrollDataREV4", dateFromParameter, dateToParameter, dateFrom1Parameter);
        }
    
        public virtual int GeneratePayrollDataSOURCE(string dateFrom, string dateTo, string employeeNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneratePayrollDataSOURCE", dateFromParameter, dateToParameter, employeeNumberParameter);
        }
    
        public virtual int GeneratePayrollDataSOURCE_12052013(string dateFrom, string dateTo, string employeeNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GeneratePayrollDataSOURCE_12052013", dateFromParameter, dateToParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<GeneratePayslip_Result> GeneratePayslip(string employeeNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GeneratePayslip_Result>("GeneratePayslip", employeeNumberParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<GenerateSSSLoanBalance_Result> GenerateSSSLoanBalance(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GenerateSSSLoanBalance_Result>("GenerateSSSLoanBalance", employeeNumberParameter);
        }
    
        public virtual int Get40HourReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get40HourReport");
        }
    
        public virtual int Get40HourReportMon()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get40HourReportMon");
        }
    
        public virtual int Get40HourReportMonNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get40HourReportMonNew");
        }
    
        public virtual int Get40HourReportSun()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get40HourReportSun");
        }
    
        public virtual int Get40HourReportSunNew()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Get40HourReportSunNew");
        }
    
        public virtual ObjectResult<Get40HourRulex_Result> Get40HourRulex()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get40HourRulex_Result>("Get40HourRulex");
        }
    
        public virtual ObjectResult<string> GetAddress(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetAddress", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetAllBeta_Result> GetAllBeta(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBeta_Result>("GetAllBeta", flagParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetAllLatesELSLAbsentsfrHD_Result> GetAllLatesELSLAbsentsfrHD(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLatesELSLAbsentsfrHD_Result>("GetAllLatesELSLAbsentsfrHD", flagParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetAllLatesELSLAbsentsfrHD1_Result> GetAllLatesELSLAbsentsfrHD1(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLatesELSLAbsentsfrHD1_Result>("GetAllLatesELSLAbsentsfrHD1", flagParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetAllLatesELSLAbsentsfrHD2_Result> GetAllLatesELSLAbsentsfrHD2(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLatesELSLAbsentsfrHD2_Result>("GetAllLatesELSLAbsentsfrHD2", flagParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetAllLatesELSLAbsentsfrHDREV_Result> GetAllLatesELSLAbsentsfrHDREV(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLatesELSLAbsentsfrHDREV_Result>("GetAllLatesELSLAbsentsfrHDREV", flagParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetAllReportToAgents_Result> GetAllReportToAgents(string reportTo)
        {
            var reportToParameter = reportTo != null ?
                new ObjectParameter("ReportTo", reportTo) :
                new ObjectParameter("ReportTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllReportToAgents_Result>("GetAllReportToAgents", reportToParameter);
        }
    
        public virtual ObjectResult<GetAnnualTax_Result> GetAnnualTax(Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAnnualTax_Result>("GetAnnualTax", periodStartParameter, periodEndParameter);
        }
    
        public virtual ObjectResult<GetApprovedOTPerEmployee_Result> GetApprovedOTPerEmployee(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetApprovedOTPerEmployee_Result>("GetApprovedOTPerEmployee", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetAttendance_Result> GetAttendance(string employeeNumber, string dateFrom, string dateTo)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAttendance_Result>("GetAttendance", employeeNumberParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int GETATTENDANCESTATUS2011(Nullable<System.DateTime> cOVEREDDATE)
        {
            var cOVEREDDATEParameter = cOVEREDDATE.HasValue ?
                new ObjectParameter("COVEREDDATE", cOVEREDDATE) :
                new ObjectParameter("COVEREDDATE", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GETATTENDANCESTATUS2011", cOVEREDDATEParameter);
        }
    
        public virtual int GetAttendanceTrackerSummary(string date)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAttendanceTrackerSummary", dateParameter);
        }
    
        public virtual ObjectResult<GetAuditDailySchedule_Result> GetAuditDailySchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAuditDailySchedule_Result>("GetAuditDailySchedule");
        }
    
        public virtual int GetClientFootPrint(string netAttributes)
        {
            var netAttributesParameter = netAttributes != null ?
                new ObjectParameter("NetAttributes", netAttributes) :
                new ObjectParameter("NetAttributes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetClientFootPrint", netAttributesParameter);
        }
    
        public virtual int GetCompleteAttendance(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCompleteAttendance", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual int GetCompleteAttendanceNew(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCompleteAttendanceNew", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetConsolidatedRep_Result> GetConsolidatedRep(string datefrom, string dateto)
        {
            var datefromParameter = datefrom != null ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(string));
    
            var datetoParameter = dateto != null ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsolidatedRep_Result>("GetConsolidatedRep", datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<GetConsolidatedRep91713_Result> GetConsolidatedRep91713(string datefrom, string dateto)
        {
            var datefromParameter = datefrom != null ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(string));
    
            var datetoParameter = dateto != null ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsolidatedRep91713_Result>("GetConsolidatedRep91713", datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<GetConsolidatedRepAttendance9302013_Result> GetConsolidatedRepAttendance9302013(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsolidatedRepAttendance9302013_Result>("GetConsolidatedRepAttendance9302013", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetConsolidatedRepByEmp_Result> GetConsolidatedRepByEmp(string iD, string datefrom, string dateto)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var datefromParameter = datefrom != null ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(string));
    
            var datetoParameter = dateto != null ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsolidatedRepByEmp_Result>("GetConsolidatedRepByEmp", iDParameter, datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<GetConsolidatedRepByEmp91713_Result> GetConsolidatedRepByEmp91713(string iD, string datefrom, string dateto)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var datefromParameter = datefrom != null ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(string));
    
            var datetoParameter = dateto != null ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsolidatedRepByEmp91713_Result>("GetConsolidatedRepByEmp91713", iDParameter, datefromParameter, datetoParameter);
        }
    
        public virtual int GetConsolidatedRepByEmpx(string iD, string datefrom, string dateto)
        {
            var iDParameter = iD != null ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(string));
    
            var datefromParameter = datefrom != null ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(string));
    
            var datetoParameter = dateto != null ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConsolidatedRepByEmpx", iDParameter, datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<GetConsolidatedRepLates91813_Result> GetConsolidatedRepLates91813(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsolidatedRepLates91813_Result>("GetConsolidatedRepLates91813", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetConsolidatedRepLeaves91813_Result> GetConsolidatedRepLeaves91813(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetConsolidatedRepLeaves91813_Result>("GetConsolidatedRepLeaves91813", employeeNumberParameter);
        }
    
        public virtual int GetConsolidatedRepx(string datefrom, string dateto)
        {
            var datefromParameter = datefrom != null ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(string));
    
            var datetoParameter = dateto != null ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetConsolidatedRepx", datefromParameter, datetoParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetCurrentDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetCurrentDate");
        }
    
        public virtual int GetDailyAuditSchedule()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDailyAuditSchedule");
        }
    
        public virtual int GetDetailsOfPayroll(string dateFrom, string dateTo, Nullable<long> payrollNumber)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDetailsOfPayroll", dateFromParameter, dateToParameter, payrollNumberParameter);
        }
    
        public virtual int GetDetailsOfPayrollREV(string dateFrom, string dateTo, Nullable<long> payrollNumber, string payDate, string dateFrom1)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            var payDateParameter = payDate != null ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(string));
    
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetDetailsOfPayrollREV", dateFromParameter, dateToParameter, payrollNumberParameter, payDateParameter, dateFrom1Parameter);
        }
    
        public virtual ObjectResult<GetELSLAbsentsfrHD_Result> GetELSLAbsentsfrHD(string flag, string employeeID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetELSLAbsentsfrHD_Result>("GetELSLAbsentsfrHD", flagParameter, employeeIDParameter);
        }
    
        public virtual ObjectResult<GetEmployeeAbsencesSummary_Result> GetEmployeeAbsencesSummary(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeAbsencesSummary_Result>("GetEmployeeAbsencesSummary", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetEmployeeAdjustment_Result> GetEmployeeAdjustment(string employeeNumber, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeAdjustment_Result>("GetEmployeeAdjustment", employeeNumberParameter, periodStartParameter, periodEndParameter);
        }
    
        public virtual ObjectResult<GetEmployeeByType_Result> GetEmployeeByType(string employeeFlag, string employeeType)
        {
            var employeeFlagParameter = employeeFlag != null ?
                new ObjectParameter("EmployeeFlag", employeeFlag) :
                new ObjectParameter("EmployeeFlag", typeof(string));
    
            var employeeTypeParameter = employeeType != null ?
                new ObjectParameter("EmployeeType", employeeType) :
                new ObjectParameter("EmployeeType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeByType_Result>("GetEmployeeByType", employeeFlagParameter, employeeTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeDayAbsent_Result> GetEmployeeDayAbsent(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDayAbsent_Result>("GetEmployeeDayAbsent", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetEmployeeDayAbsentSummary_Result> GetEmployeeDayAbsentSummary(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDayAbsentSummary_Result>("GetEmployeeDayAbsentSummary", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetEmployeeDetail_Result> GetEmployeeDetail(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDetail_Result>("GetEmployeeDetail", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLatesSummary_Result> GetEmployeeLatesSummary(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLatesSummary_Result>("GetEmployeeLatesSummary", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeave_Result> GetEmployeeLeave(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeave_Result>("GetEmployeeLeave", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeavesdDetails_Result> GetEmployeeLeavesdDetails(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeavesdDetails_Result>("GetEmployeeLeavesdDetails", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeavesdDetailsByReasonType_Result> GetEmployeeLeavesdDetailsByReasonType(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeavesdDetailsByReasonType_Result>("GetEmployeeLeavesdDetailsByReasonType", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeavesFiled_Result> GetEmployeeLeavesFiled(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeavesFiled_Result>("GetEmployeeLeavesFiled", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveSummary_Result> GetEmployeeLeaveSummary(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string leaveType)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveSummary_Result>("GetEmployeeLeaveSummary", fromParameter, toParameter, leaveTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveSummaryLWOP_Result> GetEmployeeLeaveSummaryLWOP(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string leaveType)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveSummaryLWOP_Result>("GetEmployeeLeaveSummaryLWOP", fromParameter, toParameter, leaveTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveSummaryLWOPEmpType_Result> GetEmployeeLeaveSummaryLWOPEmpType(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string leaveType, string empType)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var empTypeParameter = empType != null ?
                new ObjectParameter("EmpType", empType) :
                new ObjectParameter("EmpType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveSummaryLWOPEmpType_Result>("GetEmployeeLeaveSummaryLWOPEmpType", fromParameter, toParameter, leaveTypeParameter, empTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveSummaryLWOPwithFromToAndReason_Result> GetEmployeeLeaveSummaryLWOPwithFromToAndReason(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string leaveType)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveSummaryLWOPwithFromToAndReason_Result>("GetEmployeeLeaveSummaryLWOPwithFromToAndReason", fromParameter, toParameter, leaveTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveSummaryLWP_Result> GetEmployeeLeaveSummaryLWP(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string leaveType)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveSummaryLWP_Result>("GetEmployeeLeaveSummaryLWP", fromParameter, toParameter, leaveTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveSummaryLWP1_Result> GetEmployeeLeaveSummaryLWP1(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string leaveType)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveSummaryLWP1_Result>("GetEmployeeLeaveSummaryLWP1", fromParameter, toParameter, leaveTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveSummaryLWP2_Result> GetEmployeeLeaveSummaryLWP2(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string leaveType)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveSummaryLWP2_Result>("GetEmployeeLeaveSummaryLWP2", fromParameter, toParameter, leaveTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveSummaryLWPEmpType_Result> GetEmployeeLeaveSummaryLWPEmpType(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string leaveType, string empType)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var empTypeParameter = empType != null ?
                new ObjectParameter("EmpType", empType) :
                new ObjectParameter("EmpType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveSummaryLWPEmpType_Result>("GetEmployeeLeaveSummaryLWPEmpType", fromParameter, toParameter, leaveTypeParameter, empTypeParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLeaveUsed_Result> GetEmployeeLeaveUsed(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLeaveUsed_Result>("GetEmployeeLeaveUsed", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeeLogs_Result> GetEmployeeLogs(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeLogs_Result>("GetEmployeeLogs", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual int GetEmployeeMetrics(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmployeeMetrics", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeeRate_Result> GetEmployeeRate(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeRate_Result>("GetEmployeeRate", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployees_Result> GetEmployees(string whereValues)
        {
            var whereValuesParameter = whereValues != null ?
                new ObjectParameter("WhereValues", whereValues) :
                new ObjectParameter("WhereValues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployees_Result>("GetEmployees", whereValuesParameter);
        }
    
        public virtual ObjectResult<GetEmployees2_Result> GetEmployees2(string employeeFlag)
        {
            var employeeFlagParameter = employeeFlag != null ?
                new ObjectParameter("EmployeeFlag", employeeFlag) :
                new ObjectParameter("EmployeeFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployees2_Result>("GetEmployees2", employeeFlagParameter);
        }
    
        public virtual ObjectResult<GetEmployeesActive_Result> GetEmployeesActive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesActive_Result>("GetEmployeesActive");
        }
    
        public virtual ObjectResult<GetEmployeesActualCount_Result> GetEmployeesActualCount()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesActualCount_Result>("GetEmployeesActualCount");
        }
    
        public virtual ObjectResult<GetEmployeeSalaries_Result> GetEmployeeSalaries(string flag)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeSalaries_Result>("GetEmployeeSalaries", flagParameter);
        }
    
        public virtual ObjectResult<GetEmployeeSchedules_Result> GetEmployeeSchedules(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeSchedules_Result>("GetEmployeeSchedules", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetEmployeeSchedules_OLD_Result> GetEmployeeSchedules_OLD(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeSchedules_OLD_Result>("GetEmployeeSchedules_OLD", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetEmployeeSchedulesOTRestday_Result> GetEmployeeSchedulesOTRestday(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeSchedulesOTRestday_Result>("GetEmployeeSchedulesOTRestday", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GETEMPLOYEESEL2011_Result> GETEMPLOYEESEL2011()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETEMPLOYEESEL2011_Result>("GETEMPLOYEESEL2011");
        }
    
        public virtual ObjectResult<GetEmployeesInterimProcCounting_Result> GetEmployeesInterimProcCounting()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesInterimProcCounting_Result>("GetEmployeesInterimProcCounting");
        }
    
        public virtual ObjectResult<GETEMPLOYEESL2011_Result> GETEMPLOYEESL2011()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETEMPLOYEESL2011_Result>("GETEMPLOYEESL2011");
        }
    
        public virtual ObjectResult<GetEmployeesList_Result> GetEmployeesList(string tLID, string employeeNumber)
        {
            var tLIDParameter = tLID != null ?
                new ObjectParameter("TLID", tLID) :
                new ObjectParameter("TLID", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesList_Result>("GetEmployeesList", tLIDParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeesList1_Result> GetEmployeesList1(string tLID, string employeeNumber)
        {
            var tLIDParameter = tLID != null ?
                new ObjectParameter("TLID", tLID) :
                new ObjectParameter("TLID", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesList1_Result>("GetEmployeesList1", tLIDParameter, employeeNumberParameter);
        }
    
        public virtual int GetEmployeesList2(string whereValues, string employeeNumber)
        {
            var whereValuesParameter = whereValues != null ?
                new ObjectParameter("WhereValues", whereValues) :
                new ObjectParameter("WhereValues", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmployeesList2", whereValuesParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeesListBak_Result> GetEmployeesListBak(string tLID, string employeeNumber)
        {
            var tLIDParameter = tLID != null ?
                new ObjectParameter("TLID", tLID) :
                new ObjectParameter("TLID", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesListBak_Result>("GetEmployeesListBak", tLIDParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeesListForAttendanceSummary_Result> GetEmployeesListForAttendanceSummary(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesListForAttendanceSummary_Result>("GetEmployeesListForAttendanceSummary", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetEmployeesListx_Result> GetEmployeesListx(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeesListx_Result>("GetEmployeesListx", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GETEMPLOYEESVL2011_Result> GETEMPLOYEESVL2011()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GETEMPLOYEESVL2011_Result>("GETEMPLOYEESVL2011");
        }
    
        public virtual int GETEMPLOYEESVL2011_2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GETEMPLOYEESVL2011_2");
        }
    
        public virtual ObjectResult<Nullable<double>> GetEmployeeTAX(string employeeNumber, Nullable<double> grossPay)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var grossPayParameter = grossPay.HasValue ?
                new ObjectParameter("GrossPay", grossPay) :
                new ObjectParameter("GrossPay", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<double>>("GetEmployeeTAX", employeeNumberParameter, grossPayParameter);
        }
    
        public virtual int GetEmployeeTaxCode(string employeeNumber, string taxCode)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmployeeTaxCode", employeeNumberParameter, taxCodeParameter);
        }
    
        public virtual ObjectResult<string> GetFortuneCookie(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetFortuneCookie", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetGeneratedPayrollDataDetail_Result> GetGeneratedPayrollDataDetail(string employeeNumber, Nullable<int> payrollNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGeneratedPayrollDataDetail_Result>("GetGeneratedPayrollDataDetail", employeeNumberParameter, payrollNumberParameter);
        }
    
        public virtual ObjectResult<GetGeneratedPayrollDetail_Result> GetGeneratedPayrollDetail(string employeeNumber, Nullable<int> payrollNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGeneratedPayrollDetail_Result>("GetGeneratedPayrollDetail", employeeNumberParameter, payrollNumberParameter);
        }
    
        public virtual ObjectResult<GetHDMFPaymentHistory_Result> GetHDMFPaymentHistory(string empno)
        {
            var empnoParameter = empno != null ?
                new ObjectParameter("empno", empno) :
                new ObjectParameter("empno", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHDMFPaymentHistory_Result>("GetHDMFPaymentHistory", empnoParameter);
        }
    
        public virtual ObjectResult<GetHDMFPaymentHistoryWithFilter_Result> GetHDMFPaymentHistoryWithFilter(string empno, string filter)
        {
            var empnoParameter = empno != null ?
                new ObjectParameter("empno", empno) :
                new ObjectParameter("empno", typeof(string));
    
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHDMFPaymentHistoryWithFilter_Result>("GetHDMFPaymentHistoryWithFilter", empnoParameter, filterParameter);
        }
    
        public virtual ObjectResult<GetLeaveFiledByEmployee_Result> GetLeaveFiledByEmployee(string employeeNumber, string type)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveFiledByEmployee_Result>("GetLeaveFiledByEmployee", employeeNumberParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetLeaveFiledByEmployeeALL_Result> GetLeaveFiledByEmployeeALL(string employeeNumber, string type)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveFiledByEmployeeALL_Result>("GetLeaveFiledByEmployeeALL", employeeNumberParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetLeaveFiledByEmployeeOLD_Result> GetLeaveFiledByEmployeeOLD(string employeeNumber, string type)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveFiledByEmployeeOLD_Result>("GetLeaveFiledByEmployeeOLD", employeeNumberParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetLeaveFiledByEmployeeREV_Result> GetLeaveFiledByEmployeeREV(string employeeNumber, string type)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveFiledByEmployeeREV_Result>("GetLeaveFiledByEmployeeREV", employeeNumberParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetLeaveFiledByEmployeeREV2_Result> GetLeaveFiledByEmployeeREV2(string employeeNumber, string type)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveFiledByEmployeeREV2_Result>("GetLeaveFiledByEmployeeREV2", employeeNumberParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetLeaveFiledByEmployeeREV3_Result> GetLeaveFiledByEmployeeREV3(string employeeNumber, string type)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLeaveFiledByEmployeeREV3_Result>("GetLeaveFiledByEmployeeREV3", employeeNumberParameter, typeParameter);
        }
    
        public virtual ObjectResult<GetListOICSubordinate_Result> GetListOICSubordinate(string employeeID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListOICSubordinate_Result>("GetListOICSubordinate", employeeIDParameter);
        }
    
        public virtual ObjectResult<GetMetricDetails_Result> GetMetricDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMetricDetails_Result>("GetMetricDetails");
        }
    
        public virtual ObjectResult<GetModules_Result> GetModules()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetModules_Result>("GetModules");
        }
    
        public virtual int GetNightDiff_2012(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetNightDiff_2012", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetOTApproval_Result> GetOTApproval(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOTApproval_Result>("GetOTApproval", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetOTApproval_07292013_Result> GetOTApproval_07292013(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOTApproval_07292013_Result>("GetOTApproval_07292013", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetOTApproval_OLD_Result> GetOTApproval_OLD(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOTApproval_OLD_Result>("GetOTApproval_OLD", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual int GetPay(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> payrollNumber)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPay", dateFromParameter, dateToParameter, payrollNumberParameter);
        }
    
        public virtual int GetPay_OLD(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> payrollNumber)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPay_OLD", dateFromParameter, dateToParameter, payrollNumberParameter);
        }
    
        public virtual int GetPay2(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> payrollNumber)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPay2", dateFromParameter, dateToParameter, payrollNumberParameter);
        }
    
        public virtual ObjectResult<string> GetPayIndividual(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string employeeNumber)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetPayIndividual", dateFromParameter, dateToParameter, employeeNumberParameter);
        }
    
        public virtual int GetPayIndividual_OLD(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string employeeNumber)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayIndividual_OLD", dateFromParameter, dateToParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<string> GetPayIndividualREV(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string employeeNumber)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetPayIndividualREV", dateFromParameter, dateToParameter, employeeNumberParameter);
        }
    
        public virtual int GetPayPerEmployee(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> payrollNumber, string employeeNumber, Nullable<int> noUnderTime)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var noUnderTimeParameter = noUnderTime.HasValue ?
                new ObjectParameter("NoUnderTime", noUnderTime) :
                new ObjectParameter("NoUnderTime", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayPerEmployee", dateFromParameter, dateToParameter, payrollNumberParameter, employeeNumberParameter, noUnderTimeParameter);
        }
    
        public virtual ObjectResult<GetPayPeriodDate_Result> GetPayPeriodDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayPeriodDate_Result>("GetPayPeriodDate");
        }
    
        public virtual int GetPayProcessLoans(Nullable<long> payrollNumber)
        {
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayProcessLoans", payrollNumberParameter);
        }
    
        public virtual ObjectResult<GetPayroll_Result> GetPayroll(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string posted)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var postedParameter = posted != null ?
                new ObjectParameter("Posted", posted) :
                new ObjectParameter("Posted", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayroll_Result>("GetPayroll", dateFromParameter, dateToParameter, postedParameter);
        }
    
        public virtual ObjectResult<GetPayroll4MetricCostDetail_Result> GetPayroll4MetricCostDetail(Nullable<System.DateTime> monthDate)
        {
            var monthDateParameter = monthDate.HasValue ?
                new ObjectParameter("MonthDate", monthDate) :
                new ObjectParameter("MonthDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayroll4MetricCostDetail_Result>("GetPayroll4MetricCostDetail", monthDateParameter);
        }
    
        public virtual int GetPayroll4MetricCostDetail2(Nullable<int> payfrom, Nullable<int> payto)
        {
            var payfromParameter = payfrom.HasValue ?
                new ObjectParameter("Payfrom", payfrom) :
                new ObjectParameter("Payfrom", typeof(int));
    
            var paytoParameter = payto.HasValue ?
                new ObjectParameter("Payto", payto) :
                new ObjectParameter("Payto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayroll4MetricCostDetail2", payfromParameter, paytoParameter);
        }
    
        public virtual ObjectResult<GetPayroll4MetricCostSummary_Result> GetPayroll4MetricCostSummary(Nullable<System.DateTime> monthDate)
        {
            var monthDateParameter = monthDate.HasValue ?
                new ObjectParameter("MonthDate", monthDate) :
                new ObjectParameter("MonthDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayroll4MetricCostSummary_Result>("GetPayroll4MetricCostSummary", monthDateParameter);
        }
    
        public virtual int GetPayroll4MetricCostSummary2(Nullable<System.DateTime> payFrom, Nullable<System.DateTime> payTo)
        {
            var payFromParameter = payFrom.HasValue ?
                new ObjectParameter("PayFrom", payFrom) :
                new ObjectParameter("PayFrom", typeof(System.DateTime));
    
            var payToParameter = payTo.HasValue ?
                new ObjectParameter("PayTo", payTo) :
                new ObjectParameter("PayTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayroll4MetricCostSummary2", payFromParameter, payToParameter);
        }
    
        public virtual ObjectResult<GetPayrollAll_Result> GetPayrollAll(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string posted)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var postedParameter = posted != null ?
                new ObjectParameter("Posted", posted) :
                new ObjectParameter("Posted", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollAll_Result>("GetPayrollAll", dateFromParameter, dateToParameter, postedParameter);
        }
    
        public virtual ObjectResult<GetPayrollAllFirst_Last_Result> GetPayrollAllFirst_Last()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollAllFirst_Last_Result>("GetPayrollAllFirst_Last");
        }
    
        public virtual ObjectResult<GetPayrollCostPeriod_Result> GetPayrollCostPeriod(Nullable<System.DateTime> dateMonth)
        {
            var dateMonthParameter = dateMonth.HasValue ?
                new ObjectParameter("DateMonth", dateMonth) :
                new ObjectParameter("DateMonth", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollCostPeriod_Result>("GetPayrollCostPeriod", dateMonthParameter);
        }
    
        public virtual ObjectResult<GetPayrollCutoff_Result> GetPayrollCutoff(string payDay)
        {
            var payDayParameter = payDay != null ?
                new ObjectParameter("PayDay", payDay) :
                new ObjectParameter("PayDay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollCutoff_Result>("GetPayrollCutoff", payDayParameter);
        }
    
        public virtual int GetPayrollGeneratedData(string employeenumber, string dateFrom, string dateTo, Nullable<long> payrollNumber, string payDate, string dateFrom1, Nullable<int> noOfWeeks)
        {
            var employeenumberParameter = employeenumber != null ?
                new ObjectParameter("Employeenumber", employeenumber) :
                new ObjectParameter("Employeenumber", typeof(string));
    
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            var payDateParameter = payDate != null ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(string));
    
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            var noOfWeeksParameter = noOfWeeks.HasValue ?
                new ObjectParameter("NoOfWeeks", noOfWeeks) :
                new ObjectParameter("NoOfWeeks", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayrollGeneratedData", employeenumberParameter, dateFromParameter, dateToParameter, payrollNumberParameter, payDateParameter, dateFrom1Parameter, noOfWeeksParameter);
        }
    
        public virtual ObjectResult<GetPayrollMonthly_Result> GetPayrollMonthly(Nullable<int> month, string year, string posted)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var postedParameter = posted != null ?
                new ObjectParameter("Posted", posted) :
                new ObjectParameter("Posted", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayrollMonthly_Result>("GetPayrollMonthly", monthParameter, yearParameter, postedParameter);
        }
    
        public virtual ObjectResult<GetPayslip_Result> GetPayslip(string payDate)
        {
            var payDateParameter = payDate != null ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayslip_Result>("GetPayslip", payDateParameter);
        }
    
        public virtual int GetPayslip_orderby(string payDate, string orderby)
        {
            var payDateParameter = payDate != null ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(string));
    
            var orderbyParameter = orderby != null ?
                new ObjectParameter("Orderby", orderby) :
                new ObjectParameter("Orderby", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayslip_orderby", payDateParameter, orderbyParameter);
        }
    
        public virtual ObjectResult<GetPayslip_orig_Result> GetPayslip_orig(string payDate)
        {
            var payDateParameter = payDate != null ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayslip_orig_Result>("GetPayslip_orig", payDateParameter);
        }
    
        public virtual ObjectResult<GetPayslip_orig111513_Result> GetPayslip_orig111513(string payDate)
        {
            var payDateParameter = payDate != null ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayslip_orig111513_Result>("GetPayslip_orig111513", payDateParameter);
        }
    
        public virtual ObjectResult<GetPayslipX_Result> GetPayslipX(string payDate)
        {
            var payDateParameter = payDate != null ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPayslipX_Result>("GetPayslipX", payDateParameter);
        }
    
        public virtual int GetPayWithLoans(Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, Nullable<long> payrollNumber)
        {
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPayWithLoans", dateFromParameter, dateToParameter, payrollNumberParameter);
        }
    
        public virtual int GetPhilHealthContri(Nullable<decimal> gross)
        {
            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPhilHealthContri", grossParameter);
        }
    
        public virtual ObjectResult<GetRecruitHistory_Result> GetRecruitHistory(string lastName, string firstName, string middleName)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecruitHistory_Result>("GetRecruitHistory", lastNameParameter, firstNameParameter, middleNameParameter);
        }
    
        public virtual ObjectResult<GetReportTo_Result> GetReportTo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportTo_Result>("GetReportTo");
        }
    
        public virtual ObjectResult<GetRepresentationPerEmployee_Result> GetRepresentationPerEmployee(string employeeNumber, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepresentationPerEmployee_Result>("GetRepresentationPerEmployee", employeeNumberParameter, periodStartParameter, periodEndParameter);
        }
    
        public virtual ObjectResult<string> GetSchedin(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSchedin", idParameter);
        }
    
        public virtual ObjectResult<string> GetSchedinRDnHD(string id)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetSchedinRDnHD", idParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> GetSchedulerAccess(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("GetSchedulerAccess", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetSchedulerAttendance_Result> GetSchedulerAttendance(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerAttendance_Result>("GetSchedulerAttendance", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendance_Result> GetSchedulerCompleteAttendance(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendance_Result>("GetSchedulerCompleteAttendance", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendance_OLD_Result> GetSchedulerCompleteAttendance_OLD(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendance_OLD_Result>("GetSchedulerCompleteAttendance_OLD", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendance2011_Result> GetSchedulerCompleteAttendance2011(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendance2011_Result>("GetSchedulerCompleteAttendance2011", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceALL_Result> GetSchedulerCompleteAttendanceALL(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceALL_Result>("GetSchedulerCompleteAttendanceALL", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceEmp_Result> GetSchedulerCompleteAttendanceEmp(Nullable<System.DateTime> from, Nullable<System.DateTime> to, string empNo)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            var empNoParameter = empNo != null ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceEmp_Result>("GetSchedulerCompleteAttendanceEmp", fromParameter, toParameter, empNoParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceNDTotsl_Result> GetSchedulerCompleteAttendanceNDTotsl(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceNDTotsl_Result>("GetSchedulerCompleteAttendanceNDTotsl", fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceOPT_Result> GetSchedulerCompleteAttendanceOPT(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceOPT_Result>("GetSchedulerCompleteAttendanceOPT", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREV_Result> GetSchedulerCompleteAttendanceREV(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREV_Result>("GetSchedulerCompleteAttendanceREV", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREV_03182014_Result> GetSchedulerCompleteAttendanceREV_03182014(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREV_03182014_Result>("GetSchedulerCompleteAttendanceREV_03182014", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREV_040414_Result> GetSchedulerCompleteAttendanceREV_040414(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREV_040414_Result>("GetSchedulerCompleteAttendanceREV_040414", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREV04222014_Result> GetSchedulerCompleteAttendanceREV04222014(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREV04222014_Result>("GetSchedulerCompleteAttendanceREV04222014", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREV2_Result> GetSchedulerCompleteAttendanceREV2(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREV2_Result>("GetSchedulerCompleteAttendanceREV2", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREV3_Result> GetSchedulerCompleteAttendanceREV3(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREV3_Result>("GetSchedulerCompleteAttendanceREV3", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREVBackup_Result> GetSchedulerCompleteAttendanceREVBackup(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREVBackup_Result>("GetSchedulerCompleteAttendanceREVBackup", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREVold_Result> GetSchedulerCompleteAttendanceREVold(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREVold_Result>("GetSchedulerCompleteAttendanceREVold", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceREVx_Result> GetSchedulerCompleteAttendanceREVx(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceREVx_Result>("GetSchedulerCompleteAttendanceREVx", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceSummary_Result> GetSchedulerCompleteAttendanceSummary(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceSummary_Result>("GetSchedulerCompleteAttendanceSummary", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceSummary2_Result> GetSchedulerCompleteAttendanceSummary2(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceSummary2_Result>("GetSchedulerCompleteAttendanceSummary2", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerCompleteAttendanceTest_Result> GetSchedulerCompleteAttendanceTest(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerCompleteAttendanceTest_Result>("GetSchedulerCompleteAttendanceTest", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<GetSchedulerNoSchedules_Result> GetSchedulerNoSchedules(string headEmployeeNumber, string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var headEmployeeNumberParameter = headEmployeeNumber != null ?
                new ObjectParameter("HeadEmployeeNumber", headEmployeeNumber) :
                new ObjectParameter("HeadEmployeeNumber", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSchedulerNoSchedules_Result>("GetSchedulerNoSchedules", headEmployeeNumberParameter, employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetServerDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetServerDate");
        }
    
        public virtual int GetSSSContri(Nullable<decimal> gross)
        {
            var grossParameter = gross.HasValue ?
                new ObjectParameter("Gross", gross) :
                new ObjectParameter("Gross", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSSSContri", grossParameter);
        }
    
        public virtual ObjectResult<GetSssLoan_Result> GetSssLoan(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSssLoan_Result>("GetSssLoan", employeeNumberParameter);
        }
    
        public virtual ObjectResult<GetSuperior_Result> GetSuperior(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSuperior_Result>("GetSuperior", employeeNumberParameter);
        }
    
        public virtual ObjectResult<string> GetTaxDescriptions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetTaxDescriptions");
        }
    
        public virtual ObjectResult<Nullable<decimal>> GetTranspoAllowance(string employeenumber)
        {
            var employeenumberParameter = employeenumber != null ?
                new ObjectParameter("employeenumber", employeenumber) :
                new ObjectParameter("employeenumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("GetTranspoAllowance", employeenumberParameter);
        }
    
        public virtual ObjectResult<GetTransportaionAllowance_Result> GetTransportaionAllowance(Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransportaionAllowance_Result>("GetTransportaionAllowance", periodStartParameter, periodEndParameter);
        }
    
        public virtual ObjectResult<GetTransportaionAllowanceREV_Result> GetTransportaionAllowanceREV(Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransportaionAllowanceREV_Result>("GetTransportaionAllowanceREV", periodStartParameter, periodEndParameter);
        }
    
        public virtual ObjectResult<string> GetUserAccess(string employeeNumber, string access)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var accessParameter = access != null ?
                new ObjectParameter("Access", access) :
                new ObjectParameter("Access", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserAccess", employeeNumberParameter, accessParameter);
        }
    
        public virtual ObjectResult<GetUserAccessList_Result> GetUserAccessList(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserAccessList_Result>("GetUserAccessList", employeeNumberParameter);
        }
    
        public virtual int GetVERIFONEOvertime(Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetVERIFONEOvertime", fromParameter, toParameter);
        }
    
        public virtual int GetWSClientFootPrint(string netAttributes, string windowsUser)
        {
            var netAttributesParameter = netAttributes != null ?
                new ObjectParameter("NetAttributes", netAttributes) :
                new ObjectParameter("NetAttributes", typeof(string));
    
            var windowsUserParameter = windowsUser != null ?
                new ObjectParameter("WindowsUser", windowsUser) :
                new ObjectParameter("WindowsUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetWSClientFootPrint", netAttributesParameter, windowsUserParameter);
        }
    
        public virtual ObjectResult<HR_GetLeavesInfo_Result> HR_GetLeavesInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<HR_GetLeavesInfo_Result>("HR_GetLeavesInfo");
        }
    
        public virtual ObjectResult<Impersonate_GetEmployeeList_Result> Impersonate_GetEmployeeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Impersonate_GetEmployeeList_Result>("Impersonate_GetEmployeeList");
        }
    
        public virtual ObjectResult<Nullable<int>> Impersonate_IsImpersonator(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Impersonate_IsImpersonator", employeeNumberParameter);
        }
    
        public virtual int ImportBasicEmployeeInfo(string firstName, string lastName, string middleName, string pIN, string password)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportBasicEmployeeInfo", firstNameParameter, lastNameParameter, middleNameParameter, pINParameter, passwordParameter);
        }
    
        public virtual int ImportCPIPayrollTOPayrollData(string dateFrom, string dateTo, Nullable<long> payrollNumber, string payDate, string dateFrom1)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var payrollNumberParameter = payrollNumber.HasValue ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(long));
    
            var payDateParameter = payDate != null ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(string));
    
            var dateFrom1Parameter = dateFrom1 != null ?
                new ObjectParameter("DateFrom1", dateFrom1) :
                new ObjectParameter("DateFrom1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ImportCPIPayrollTOPayrollData", dateFromParameter, dateToParameter, payrollNumberParameter, payDateParameter, dateFrom1Parameter);
        }
    
        public virtual int InsertConsolidateLeaves(string employeeNumber, Nullable<long> scheduleId, Nullable<short> notificationMode, Nullable<System.DateTime> notificationTime, Nullable<short> leaveId, string reason, string remarks, Nullable<short> campaignid, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(long));
    
            var notificationModeParameter = notificationMode.HasValue ?
                new ObjectParameter("NotificationMode", notificationMode) :
                new ObjectParameter("NotificationMode", typeof(short));
    
            var notificationTimeParameter = notificationTime.HasValue ?
                new ObjectParameter("NotificationTime", notificationTime) :
                new ObjectParameter("NotificationTime", typeof(System.DateTime));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(short));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var campaignidParameter = campaignid.HasValue ?
                new ObjectParameter("Campaignid", campaignid) :
                new ObjectParameter("Campaignid", typeof(short));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertConsolidateLeaves", employeeNumberParameter, scheduleIdParameter, notificationModeParameter, notificationTimeParameter, leaveIdParameter, reasonParameter, remarksParameter, campaignidParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<string> InsertEmployee(string firstName, string lastName, string middleName, string password, string address, string homeNo, string mobileNo, string emailAdd, string auditUser)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var homeNoParameter = homeNo != null ?
                new ObjectParameter("HomeNo", homeNo) :
                new ObjectParameter("HomeNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emailAddParameter = emailAdd != null ?
                new ObjectParameter("EmailAdd", emailAdd) :
                new ObjectParameter("EmailAdd", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InsertEmployee", firstNameParameter, lastNameParameter, middleNameParameter, passwordParameter, addressParameter, homeNoParameter, mobileNoParameter, emailAddParameter, auditUserParameter);
        }
    
        public virtual int InsertEmployeeAdvances(string employeeNumber, Nullable<decimal> advanceAmt, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, string rEMARKS, string auditUser, Nullable<System.DateTime> auditDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var advanceAmtParameter = advanceAmt.HasValue ?
                new ObjectParameter("AdvanceAmt", advanceAmt) :
                new ObjectParameter("AdvanceAmt", typeof(decimal));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var rEMARKSParameter = rEMARKS != null ?
                new ObjectParameter("REMARKS", rEMARKS) :
                new ObjectParameter("REMARKS", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var auditDateParameter = auditDate.HasValue ?
                new ObjectParameter("AuditDate", auditDate) :
                new ObjectParameter("AuditDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployeeAdvances", employeeNumberParameter, advanceAmtParameter, periodStartParameter, periodEndParameter, rEMARKSParameter, auditUserParameter, auditDateParameter);
        }
    
        public virtual int InsertEmployeeLeaves(string employeeNumber, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployeeLeaves", employeeNumberParameter, auditUserParameter);
        }
    
        public virtual int InsertEmployeeRate(string employeeNumber, Nullable<double> perMonth, Nullable<decimal> representation, Nullable<decimal> taxShield)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var perMonthParameter = perMonth.HasValue ?
                new ObjectParameter("PerMonth", perMonth) :
                new ObjectParameter("PerMonth", typeof(double));
    
            var representationParameter = representation.HasValue ?
                new ObjectParameter("Representation", representation) :
                new ObjectParameter("Representation", typeof(decimal));
    
            var taxShieldParameter = taxShield.HasValue ?
                new ObjectParameter("TaxShield", taxShield) :
                new ObjectParameter("TaxShield", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEmployeeRate", employeeNumberParameter, perMonthParameter, representationParameter, taxShieldParameter);
        }
    
        public virtual int InsertEncPass(Nullable<int> employeeID, string encPass)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var encPassParameter = encPass != null ?
                new ObjectParameter("EncPass", encPass) :
                new ObjectParameter("EncPass", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertEncPass", employeeIDParameter, encPassParameter);
        }
    
        public virtual int InsertHDMFPaymentAdvances(string empno, Nullable<decimal> amt, Nullable<System.DateTime> periodstart, Nullable<System.DateTime> periodend, string remarks, string audituser, Nullable<System.DateTime> auditdate)
        {
            var empnoParameter = empno != null ?
                new ObjectParameter("empno", empno) :
                new ObjectParameter("empno", typeof(string));
    
            var amtParameter = amt.HasValue ?
                new ObjectParameter("amt", amt) :
                new ObjectParameter("amt", typeof(decimal));
    
            var periodstartParameter = periodstart.HasValue ?
                new ObjectParameter("periodstart", periodstart) :
                new ObjectParameter("periodstart", typeof(System.DateTime));
    
            var periodendParameter = periodend.HasValue ?
                new ObjectParameter("periodend", periodend) :
                new ObjectParameter("periodend", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var audituserParameter = audituser != null ?
                new ObjectParameter("audituser", audituser) :
                new ObjectParameter("audituser", typeof(string));
    
            var auditdateParameter = auditdate.HasValue ?
                new ObjectParameter("auditdate", auditdate) :
                new ObjectParameter("auditdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertHDMFPaymentAdvances", empnoParameter, amtParameter, periodstartParameter, periodendParameter, remarksParameter, audituserParameter, auditdateParameter);
        }
    
        public virtual int InsertIntoNBICLearance(string employeeNumber, Nullable<int> cID, Nullable<System.DateTime> exDate, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var cIDParameter = cID.HasValue ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(int));
    
            var exDateParameter = exDate.HasValue ?
                new ObjectParameter("ExDate", exDate) :
                new ObjectParameter("ExDate", typeof(System.DateTime));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoNBICLearance", employeeNumberParameter, cIDParameter, exDateParameter, auditUserParameter);
        }
    
        public virtual int InsertIntoOverBreak(string employeeNumber, string cID, Nullable<decimal> minsOverBreak, Nullable<System.DateTime> date, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var cIDParameter = cID != null ?
                new ObjectParameter("CID", cID) :
                new ObjectParameter("CID", typeof(string));
    
            var minsOverBreakParameter = minsOverBreak.HasValue ?
                new ObjectParameter("MinsOverBreak", minsOverBreak) :
                new ObjectParameter("MinsOverBreak", typeof(decimal));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoOverBreak", employeeNumberParameter, cIDParameter, minsOverBreakParameter, dateParameter, auditUserParameter);
        }
    
        public virtual int InsertIntoRecruitment(Nullable<System.DateTime> applicationDate, string sources, string referral, string lastName, string firstName, string middleName, Nullable<System.DateTime> dOB, string civilStatus, string landLine, string mobile, string email, string presentAdd, string permanentAdd, string provincialAdd, Nullable<int> preposition, Nullable<int> grammar, Nullable<int> orderTaking, string firstInterview, string firstCommRating, string firstStoryRating, string firstRem, string firstRecom, string secondInterview, string secondCommRating, string secondRem, string secondRecom, string thirdInterview, string thirdCommRating, string thirdRem, string thirdRecom, string finalRemarks, string finalRecommendation, string position, string positionSelected, string campaign, Nullable<System.DateTime> startDate, string type, string result)
        {
            var applicationDateParameter = applicationDate.HasValue ?
                new ObjectParameter("ApplicationDate", applicationDate) :
                new ObjectParameter("ApplicationDate", typeof(System.DateTime));
    
            var sourcesParameter = sources != null ?
                new ObjectParameter("Sources", sources) :
                new ObjectParameter("Sources", typeof(string));
    
            var referralParameter = referral != null ?
                new ObjectParameter("Referral", referral) :
                new ObjectParameter("Referral", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var civilStatusParameter = civilStatus != null ?
                new ObjectParameter("CivilStatus", civilStatus) :
                new ObjectParameter("CivilStatus", typeof(string));
    
            var landLineParameter = landLine != null ?
                new ObjectParameter("LandLine", landLine) :
                new ObjectParameter("LandLine", typeof(string));
    
            var mobileParameter = mobile != null ?
                new ObjectParameter("Mobile", mobile) :
                new ObjectParameter("Mobile", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var presentAddParameter = presentAdd != null ?
                new ObjectParameter("PresentAdd", presentAdd) :
                new ObjectParameter("PresentAdd", typeof(string));
    
            var permanentAddParameter = permanentAdd != null ?
                new ObjectParameter("PermanentAdd", permanentAdd) :
                new ObjectParameter("PermanentAdd", typeof(string));
    
            var provincialAddParameter = provincialAdd != null ?
                new ObjectParameter("ProvincialAdd", provincialAdd) :
                new ObjectParameter("ProvincialAdd", typeof(string));
    
            var prepositionParameter = preposition.HasValue ?
                new ObjectParameter("Preposition", preposition) :
                new ObjectParameter("Preposition", typeof(int));
    
            var grammarParameter = grammar.HasValue ?
                new ObjectParameter("Grammar", grammar) :
                new ObjectParameter("Grammar", typeof(int));
    
            var orderTakingParameter = orderTaking.HasValue ?
                new ObjectParameter("OrderTaking", orderTaking) :
                new ObjectParameter("OrderTaking", typeof(int));
    
            var firstInterviewParameter = firstInterview != null ?
                new ObjectParameter("FirstInterview", firstInterview) :
                new ObjectParameter("FirstInterview", typeof(string));
    
            var firstCommRatingParameter = firstCommRating != null ?
                new ObjectParameter("FirstCommRating", firstCommRating) :
                new ObjectParameter("FirstCommRating", typeof(string));
    
            var firstStoryRatingParameter = firstStoryRating != null ?
                new ObjectParameter("FirstStoryRating", firstStoryRating) :
                new ObjectParameter("FirstStoryRating", typeof(string));
    
            var firstRemParameter = firstRem != null ?
                new ObjectParameter("FirstRem", firstRem) :
                new ObjectParameter("FirstRem", typeof(string));
    
            var firstRecomParameter = firstRecom != null ?
                new ObjectParameter("FirstRecom", firstRecom) :
                new ObjectParameter("FirstRecom", typeof(string));
    
            var secondInterviewParameter = secondInterview != null ?
                new ObjectParameter("SecondInterview", secondInterview) :
                new ObjectParameter("SecondInterview", typeof(string));
    
            var secondCommRatingParameter = secondCommRating != null ?
                new ObjectParameter("SecondCommRating", secondCommRating) :
                new ObjectParameter("SecondCommRating", typeof(string));
    
            var secondRemParameter = secondRem != null ?
                new ObjectParameter("SecondRem", secondRem) :
                new ObjectParameter("SecondRem", typeof(string));
    
            var secondRecomParameter = secondRecom != null ?
                new ObjectParameter("SecondRecom", secondRecom) :
                new ObjectParameter("SecondRecom", typeof(string));
    
            var thirdInterviewParameter = thirdInterview != null ?
                new ObjectParameter("ThirdInterview", thirdInterview) :
                new ObjectParameter("ThirdInterview", typeof(string));
    
            var thirdCommRatingParameter = thirdCommRating != null ?
                new ObjectParameter("ThirdCommRating", thirdCommRating) :
                new ObjectParameter("ThirdCommRating", typeof(string));
    
            var thirdRemParameter = thirdRem != null ?
                new ObjectParameter("ThirdRem", thirdRem) :
                new ObjectParameter("ThirdRem", typeof(string));
    
            var thirdRecomParameter = thirdRecom != null ?
                new ObjectParameter("ThirdRecom", thirdRecom) :
                new ObjectParameter("ThirdRecom", typeof(string));
    
            var finalRemarksParameter = finalRemarks != null ?
                new ObjectParameter("FinalRemarks", finalRemarks) :
                new ObjectParameter("FinalRemarks", typeof(string));
    
            var finalRecommendationParameter = finalRecommendation != null ?
                new ObjectParameter("FinalRecommendation", finalRecommendation) :
                new ObjectParameter("FinalRecommendation", typeof(string));
    
            var positionParameter = position != null ?
                new ObjectParameter("Position", position) :
                new ObjectParameter("Position", typeof(string));
    
            var positionSelectedParameter = positionSelected != null ?
                new ObjectParameter("PositionSelected", positionSelected) :
                new ObjectParameter("PositionSelected", typeof(string));
    
            var campaignParameter = campaign != null ?
                new ObjectParameter("Campaign", campaign) :
                new ObjectParameter("Campaign", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var resultParameter = result != null ?
                new ObjectParameter("Result", result) :
                new ObjectParameter("Result", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoRecruitment", applicationDateParameter, sourcesParameter, referralParameter, lastNameParameter, firstNameParameter, middleNameParameter, dOBParameter, civilStatusParameter, landLineParameter, mobileParameter, emailParameter, presentAddParameter, permanentAddParameter, provincialAddParameter, prepositionParameter, grammarParameter, orderTakingParameter, firstInterviewParameter, firstCommRatingParameter, firstStoryRatingParameter, firstRemParameter, firstRecomParameter, secondInterviewParameter, secondCommRatingParameter, secondRemParameter, secondRecomParameter, thirdInterviewParameter, thirdCommRatingParameter, thirdRemParameter, thirdRecomParameter, finalRemarksParameter, finalRecommendationParameter, positionParameter, positionSelectedParameter, campaignParameter, startDateParameter, typeParameter, resultParameter);
        }
    
        public virtual int InsertIntoSponsor(string employeeNumber, string sponsor, Nullable<System.DateTime> startDate, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var sponsorParameter = sponsor != null ?
                new ObjectParameter("Sponsor", sponsor) :
                new ObjectParameter("Sponsor", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertIntoSponsor", employeeNumberParameter, sponsorParameter, startDateParameter, auditUserParameter);
        }
    
        public virtual int InsertOIC(string oICID, string subordinateID)
        {
            var oICIDParameter = oICID != null ?
                new ObjectParameter("OICID", oICID) :
                new ObjectParameter("OICID", typeof(string));
    
            var subordinateIDParameter = subordinateID != null ?
                new ObjectParameter("subordinateID", subordinateID) :
                new ObjectParameter("subordinateID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOIC", oICIDParameter, subordinateIDParameter);
        }
    
        public virtual int InsertOICRev(string oICID, string subordinateID, string audituser)
        {
            var oICIDParameter = oICID != null ?
                new ObjectParameter("OICID", oICID) :
                new ObjectParameter("OICID", typeof(string));
    
            var subordinateIDParameter = subordinateID != null ?
                new ObjectParameter("subordinateID", subordinateID) :
                new ObjectParameter("subordinateID", typeof(string));
    
            var audituserParameter = audituser != null ?
                new ObjectParameter("Audituser", audituser) :
                new ObjectParameter("Audituser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertOICRev", oICIDParameter, subordinateIDParameter, audituserParameter);
        }
    
        public virtual int InsertSequence(string year, Nullable<int> count)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("Count", count) :
                new ObjectParameter("Count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSequence", yearParameter, countParameter);
        }
    
        public virtual int insertToRef(string refType, string refcode, string refValue)
        {
            var refTypeParameter = refType != null ?
                new ObjectParameter("refType", refType) :
                new ObjectParameter("refType", typeof(string));
    
            var refcodeParameter = refcode != null ?
                new ObjectParameter("refcode", refcode) :
                new ObjectParameter("refcode", typeof(string));
    
            var refValueParameter = refValue != null ?
                new ObjectParameter("refValue", refValue) :
                new ObjectParameter("refValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertToRef", refTypeParameter, refcodeParameter, refValueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> IsLoggedIn(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("IsLoggedIn", employeeNumberParameter);
        }
    
        public virtual int Lates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Lates");
        }
    
        public virtual int Lates2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Lates2");
        }
    
        public virtual int LatesWeekly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LatesWeekly");
        }
    
        public virtual ObjectResult<string> LeaveAccrualReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LeaveAccrualReport");
        }
    
        public virtual int LeaveAttendance(string employeeNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string leaveType, Nullable<double> credit, string auditUser, Nullable<long> leaveID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaveAttendance", employeeNumberParameter, dateFromParameter, dateToParameter, leaveTypeParameter, creditParameter, auditUserParameter, leaveIDParameter);
        }
    
        public virtual int LeaveAttendance2Shift(string employeeNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo, string leaveType, Nullable<double> credit, string auditUser, Nullable<long> leaveID, Nullable<int> sCHEDID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(long));
    
            var sCHEDIDParameter = sCHEDID.HasValue ?
                new ObjectParameter("SCHEDID", sCHEDID) :
                new ObjectParameter("SCHEDID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LeaveAttendance2Shift", employeeNumberParameter, dateFromParameter, dateToParameter, leaveTypeParameter, creditParameter, auditUserParameter, leaveIDParameter, sCHEDIDParameter);
        }
    
        public virtual int LEAVESTEST()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LEAVESTEST");
        }
    
        public virtual int LoginInsert(string employeeNumber, Nullable<System.DateTime> timeIn)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoginInsert", employeeNumberParameter, timeInParameter);
        }
    
        public virtual ObjectResult<string> LoginUser(string employeeNumber, string password)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LoginUser", employeeNumberParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LoginUserEncrypted(string employeeNumber, string password, string loginFlag, string loginLocation)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var loginFlagParameter = loginFlag != null ?
                new ObjectParameter("LoginFlag", loginFlag) :
                new ObjectParameter("LoginFlag", typeof(string));
    
            var loginLocationParameter = loginLocation != null ?
                new ObjectParameter("LoginLocation", loginLocation) :
                new ObjectParameter("LoginLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LoginUserEncrypted", employeeNumberParameter, passwordParameter, loginFlagParameter, loginLocationParameter);
        }
    
        public virtual int LoginUserEncryptedOrig(string employeeNumber, string password, string loginFlag)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var loginFlagParameter = loginFlag != null ?
                new ObjectParameter("LoginFlag", loginFlag) :
                new ObjectParameter("LoginFlag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LoginUserEncryptedOrig", employeeNumberParameter, passwordParameter, loginFlagParameter);
        }
    
        public virtual int LogoutUser(string pIN, string password)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogoutUser", pINParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LogoutUserEncrypted(string employeeNumber, string password, string logoutLocation)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var logoutLocationParameter = logoutLocation != null ?
                new ObjectParameter("LogoutLocation", logoutLocation) :
                new ObjectParameter("LogoutLocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LogoutUserEncrypted", employeeNumberParameter, passwordParameter, logoutLocationParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LogoutUserEncryptedNEW(string employeeNumber, string password)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LogoutUserEncryptedNEW", employeeNumberParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> LogoutUserEncryptedOrig(string pIN, string password)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("LogoutUserEncryptedOrig", pINParameter, passwordParameter);
        }
    
        public virtual ObjectResult<LogoutUserTest_Result> LogoutUserTest(Nullable<System.DateTime> timein, Nullable<System.DateTime> timeout, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut)
        {
            var timeinParameter = timein.HasValue ?
                new ObjectParameter("Timein", timein) :
                new ObjectParameter("Timein", typeof(System.DateTime));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("Timeout", timeout) :
                new ObjectParameter("Timeout", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LogoutUserTest_Result>("LogoutUserTest", timeinParameter, timeoutParameter, schedInParameter, schedOutParameter);
        }
    
        public virtual int LogReCompute(Nullable<System.DateTime> date, string employeeNumber)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LogReCompute", dateParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<string> Menu_GetMenuFile(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Menu_GetMenuFile", employeeNumberParameter);
        }
    
        public virtual ObjectResult<NewEmployee_Result> NewEmployee(string employeeNumber, string lastName, string firstName, string middleName)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<NewEmployee_Result>("NewEmployee", employeeNumberParameter, lastNameParameter, firstNameParameter, middleNameParameter);
        }
    
        public virtual int NLRepAuto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NLRepAuto");
        }
    
        public virtual int NLRepAutoFinal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NLRepAutoFinal");
        }
    
        public virtual int NoTimeInToday()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NoTimeInToday");
        }
    
        public virtual ObjectResult<PayrollDataGenerated_Result> PayrollDataGenerated(string payrollNumber)
        {
            var payrollNumberParameter = payrollNumber != null ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayrollDataGenerated_Result>("PayrollDataGenerated", payrollNumberParameter);
        }
    
        public virtual int PayrollDeletePaymentNo(string payrollNumber)
        {
            var payrollNumberParameter = payrollNumber != null ?
                new ObjectParameter("PayrollNumber", payrollNumber) :
                new ObjectParameter("PayrollNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayrollDeletePaymentNo", payrollNumberParameter);
        }
    
        public virtual int PayrollResetPayrollNo(Nullable<long> payNo)
        {
            var payNoParameter = payNo.HasValue ?
                new ObjectParameter("PayNo", payNo) :
                new ObjectParameter("PayNo", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PayrollResetPayrollNo", payNoParameter);
        }
    
        public virtual ObjectResult<PayslipAdjustments_Result> PayslipAdjustments(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipAdjustments_Result>("PayslipAdjustments", iDParameter);
        }
    
        public virtual ObjectResult<PayslipAdjustmentsTest_Result> PayslipAdjustmentsTest(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipAdjustmentsTest_Result>("PayslipAdjustmentsTest", iDParameter);
        }
    
        public virtual ObjectResult<PayslipAdvances_Result> PayslipAdvances(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipAdvances_Result>("PayslipAdvances", iDParameter);
        }
    
        public virtual ObjectResult<PayslipAdvancesTest_Result> PayslipAdvancesTest(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipAdvancesTest_Result>("PayslipAdvancesTest", iDParameter);
        }
    
        public virtual ObjectResult<PayslipDetails_Result> PayslipDetails(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipDetails_Result>("PayslipDetails", iDParameter);
        }
    
        public virtual ObjectResult<PayslipDetailsTest_Result> PayslipDetailsTest(Nullable<int> iDnum)
        {
            var iDnumParameter = iDnum.HasValue ?
                new ObjectParameter("IDnum", iDnum) :
                new ObjectParameter("IDnum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipDetailsTest_Result>("PayslipDetailsTest", iDnumParameter);
        }
    
        public virtual ObjectResult<PayslipGetEmployees_Result> PayslipGetEmployees(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipGetEmployees_Result>("PayslipGetEmployees", employeeNumberParameter);
        }
    
        public virtual ObjectResult<PayslipHeaders_Result> PayslipHeaders(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string employeeNumber)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipHeaders_Result>("PayslipHeaders", startDateParameter, endDateParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<PayslipHeadersTest_Result> PayslipHeadersTest(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string employeeNumber)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipHeadersTest_Result>("PayslipHeadersTest", startDateParameter, endDateParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<PayslipRepresentation_Result> PayslipRepresentation(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipRepresentation_Result>("PayslipRepresentation", iDParameter);
        }
    
        public virtual ObjectResult<PayslipRepresentationTest_Result> PayslipRepresentationTest(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PayslipRepresentationTest_Result>("PayslipRepresentationTest", iDParameter);
        }
    
        public virtual int RC_GETREGND(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RC_GETREGND", startDateParameter, endDateParameter);
        }
    
        public virtual int RecomputeLogin(string employeeNumber, Nullable<int> userLogID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var userLogIDParameter = userLogID.HasValue ?
                new ObjectParameter("UserLogID", userLogID) :
                new ObjectParameter("UserLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecomputeLogin", employeeNumberParameter, userLogIDParameter);
        }
    
        public virtual int RecomputeLogout(string employeeNumber, Nullable<int> userLogID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var userLogIDParameter = userLogID.HasValue ?
                new ObjectParameter("UserLogID", userLogID) :
                new ObjectParameter("UserLogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecomputeLogout", employeeNumberParameter, userLogIDParameter);
        }
    
        public virtual int RecomputeLogs(string employeeNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecomputeLogs", employeeNumberParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int RecomputeLogs_OLD(string employeeNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RecomputeLogs_OLD", employeeNumberParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int RemoveSubordinate(string oICNumber, string subordinate)
        {
            var oICNumberParameter = oICNumber != null ?
                new ObjectParameter("OICNumber", oICNumber) :
                new ObjectParameter("OICNumber", typeof(string));
    
            var subordinateParameter = subordinate != null ?
                new ObjectParameter("Subordinate", subordinate) :
                new ObjectParameter("Subordinate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RemoveSubordinate", oICNumberParameter, subordinateParameter);
        }
    
        public virtual int RepMonthlySummaryWorkHour()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RepMonthlySummaryWorkHour");
        }
    
        public virtual int RepMonthlyWorkHour()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RepMonthlyWorkHour");
        }
    
        public virtual int RepMonthlyWorkHour15()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RepMonthlyWorkHour15");
        }
    
        public virtual ObjectResult<Report_BirthdayCelebrants_Result> Report_BirthdayCelebrants(Nullable<int> month)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_BirthdayCelebrants_Result>("Report_BirthdayCelebrants", monthParameter);
        }
    
        public virtual ObjectResult<Report_EmployeeContacts_Result> Report_EmployeeContacts(Nullable<int> flag)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_EmployeeContacts_Result>("Report_EmployeeContacts", flagParameter);
        }
    
        public virtual ObjectResult<Report_EmployeeNumbers_Result> Report_EmployeeNumbers(Nullable<int> flag)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_EmployeeNumbers_Result>("Report_EmployeeNumbers", flagParameter);
        }
    
        public virtual ObjectResult<Report_EmployeeTaxScheme_Result> Report_EmployeeTaxScheme(Nullable<int> flag)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_EmployeeTaxScheme_Result>("Report_EmployeeTaxScheme", flagParameter);
        }
    
        public virtual ObjectResult<Report_GetEmployeeSalaries_Result> Report_GetEmployeeSalaries(string flag)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetEmployeeSalaries_Result>("Report_GetEmployeeSalaries", flagParameter);
        }
    
        public virtual ObjectResult<Report_GetMonthylEmployeeLeaves_Result> Report_GetMonthylEmployeeLeaves(Nullable<int> month, string year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetMonthylEmployeeLeaves_Result>("Report_GetMonthylEmployeeLeaves", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Report_GetMonthylEmployeeLeavesDetailed_Result> Report_GetMonthylEmployeeLeavesDetailed(Nullable<int> month, string year, string type)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetMonthylEmployeeLeavesDetailed_Result>("Report_GetMonthylEmployeeLeavesDetailed", monthParameter, yearParameter, typeParameter);
        }
    
        public virtual ObjectResult<Report_GetMonthylEmployeeLeavesDetailedREV_Result> Report_GetMonthylEmployeeLeavesDetailedREV(string dateFrom, string dateTo, string type)
        {
            var dateFromParameter = dateFrom != null ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetMonthylEmployeeLeavesDetailedREV_Result>("Report_GetMonthylEmployeeLeavesDetailedREV", dateFromParameter, dateToParameter, typeParameter);
        }
    
        public virtual ObjectResult<Report_GetMonthylEmployeeLeavesOLD_Result> Report_GetMonthylEmployeeLeavesOLD(Nullable<int> month, string year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetMonthylEmployeeLeavesOLD_Result>("Report_GetMonthylEmployeeLeavesOLD", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Report_GetMonthylEmployeeLeavesSLELVL_Result> Report_GetMonthylEmployeeLeavesSLELVL(Nullable<int> month, Nullable<int> year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetMonthylEmployeeLeavesSLELVL_Result>("Report_GetMonthylEmployeeLeavesSLELVL", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Report_GetMonthylEmployeeSickLeaves_Result> Report_GetMonthylEmployeeSickLeaves(Nullable<int> month, string year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetMonthylEmployeeSickLeaves_Result>("Report_GetMonthylEmployeeSickLeaves", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Report_GetMonthylEmployeeSL_Result> Report_GetMonthylEmployeeSL(Nullable<int> month, string year)
        {
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_GetMonthylEmployeeSL_Result>("Report_GetMonthylEmployeeSL", monthParameter, yearParameter);
        }
    
        public virtual ObjectResult<Report_TaxTables_Result> Report_TaxTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_TaxTables_Result>("Report_TaxTables");
        }
    
        public virtual ObjectResult<Report_TaxWithHeld_GetEmployeeList_Result> Report_TaxWithHeld_GetEmployeeList(Nullable<int> flag)
        {
            var flagParameter = flag.HasValue ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_TaxWithHeld_GetEmployeeList_Result>("Report_TaxWithHeld_GetEmployeeList", flagParameter);
        }
    
        public virtual ObjectResult<Report_TaxWithHeld_GetReport_Result> Report_TaxWithHeld_GetReport(string employeeNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Report_TaxWithHeld_GetReport_Result>("Report_TaxWithHeld_GetReport", employeeNumberParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual int Representation13MonthPay(string employeeNumber, Nullable<decimal> advanceAmt, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, string rEMARKS, string auditUser, Nullable<System.DateTime> auditDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var advanceAmtParameter = advanceAmt.HasValue ?
                new ObjectParameter("AdvanceAmt", advanceAmt) :
                new ObjectParameter("AdvanceAmt", typeof(decimal));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var rEMARKSParameter = rEMARKS != null ?
                new ObjectParameter("REMARKS", rEMARKS) :
                new ObjectParameter("REMARKS", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var auditDateParameter = auditDate.HasValue ?
                new ObjectParameter("AuditDate", auditDate) :
                new ObjectParameter("AuditDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Representation13MonthPay", employeeNumberParameter, advanceAmtParameter, periodStartParameter, periodEndParameter, rEMARKSParameter, auditUserParameter, auditDateParameter);
        }
    
        public virtual ObjectResult<string> RetrievePassword(string empid)
        {
            var empidParameter = empid != null ?
                new ObjectParameter("empid", empid) :
                new ObjectParameter("empid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RetrievePassword", empidParameter);
        }
    
        public virtual int RPATTENDANCE()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RPATTENDANCE");
        }
    
        public virtual ObjectResult<SelectEmployeeBasicInfo_Result> SelectEmployeeBasicInfo(string pIN)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectEmployeeBasicInfo_Result>("SelectEmployeeBasicInfo", pINParameter);
        }
    
        public virtual int SelectUserLogins()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SelectUserLogins");
        }
    
        public virtual int SetInitialLogEntry(string flag, string empID)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            var empIDParameter = empID != null ?
                new ObjectParameter("empID", empID) :
                new ObjectParameter("empID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetInitialLogEntry", flagParameter, empIDParameter);
        }
    
        public virtual int SetLogEditingSchedule(string flag, Nullable<long> scheduleID, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetLogEditingSchedule", flagParameter, scheduleIDParameter, schedInParameter, schedOutParameter);
        }
    
        public virtual int SetMetrics(string employeeID, string campaignName, Nullable<double> regular, Nullable<double> oT, string remarks, Nullable<System.DateTime> dateCreated, Nullable<long> userlogID)
        {
            var employeeIDParameter = employeeID != null ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(string));
    
            var campaignNameParameter = campaignName != null ?
                new ObjectParameter("CampaignName", campaignName) :
                new ObjectParameter("CampaignName", typeof(string));
    
            var regularParameter = regular.HasValue ?
                new ObjectParameter("Regular", regular) :
                new ObjectParameter("Regular", typeof(double));
    
            var oTParameter = oT.HasValue ?
                new ObjectParameter("OT", oT) :
                new ObjectParameter("OT", typeof(double));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var userlogIDParameter = userlogID.HasValue ?
                new ObjectParameter("UserlogID", userlogID) :
                new ObjectParameter("UserlogID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetMetrics", employeeIDParameter, campaignNameParameter, regularParameter, oTParameter, remarksParameter, dateCreatedParameter, userlogIDParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> SetPayroll(Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, Nullable<System.DateTime> periodStart40Hour, Nullable<System.DateTime> periodPayDay, string auditUser, Nullable<int> weeks)
        {
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var periodStart40HourParameter = periodStart40Hour.HasValue ?
                new ObjectParameter("PeriodStart40Hour", periodStart40Hour) :
                new ObjectParameter("PeriodStart40Hour", typeof(System.DateTime));
    
            var periodPayDayParameter = periodPayDay.HasValue ?
                new ObjectParameter("PeriodPayDay", periodPayDay) :
                new ObjectParameter("PeriodPayDay", typeof(System.DateTime));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var weeksParameter = weeks.HasValue ?
                new ObjectParameter("Weeks", weeks) :
                new ObjectParameter("Weeks", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("SetPayroll", periodStartParameter, periodEndParameter, periodStart40HourParameter, periodPayDayParameter, auditUserParameter, weeksParameter);
        }
    
        public virtual int SetRemoveLeaveFiled(Nullable<long> leaveID, Nullable<System.DateTime> leaveFrom, Nullable<System.DateTime> leaveTo, string employeeNumber, Nullable<decimal> actualCount, string leaveType, string auditUser, Nullable<bool> withPay)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(long));
    
            var leaveFromParameter = leaveFrom.HasValue ?
                new ObjectParameter("LeaveFrom", leaveFrom) :
                new ObjectParameter("LeaveFrom", typeof(System.DateTime));
    
            var leaveToParameter = leaveTo.HasValue ?
                new ObjectParameter("LeaveTo", leaveTo) :
                new ObjectParameter("LeaveTo", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var actualCountParameter = actualCount.HasValue ?
                new ObjectParameter("ActualCount", actualCount) :
                new ObjectParameter("ActualCount", typeof(decimal));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var withPayParameter = withPay.HasValue ?
                new ObjectParameter("WithPay", withPay) :
                new ObjectParameter("WithPay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetRemoveLeaveFiled", leaveIDParameter, leaveFromParameter, leaveToParameter, employeeNumberParameter, actualCountParameter, leaveTypeParameter, auditUserParameter, withPayParameter);
        }
    
        public virtual int SetRemoveLeaveFiledREV(Nullable<long> leaveID, Nullable<System.DateTime> leaveFrom, Nullable<System.DateTime> leaveTo, string employeeNumber, Nullable<decimal> actualCount, string leaveType, string auditUser, string withPay)
        {
            var leaveIDParameter = leaveID.HasValue ?
                new ObjectParameter("LeaveID", leaveID) :
                new ObjectParameter("LeaveID", typeof(long));
    
            var leaveFromParameter = leaveFrom.HasValue ?
                new ObjectParameter("LeaveFrom", leaveFrom) :
                new ObjectParameter("LeaveFrom", typeof(System.DateTime));
    
            var leaveToParameter = leaveTo.HasValue ?
                new ObjectParameter("LeaveTo", leaveTo) :
                new ObjectParameter("LeaveTo", typeof(System.DateTime));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var actualCountParameter = actualCount.HasValue ?
                new ObjectParameter("ActualCount", actualCount) :
                new ObjectParameter("ActualCount", typeof(decimal));
    
            var leaveTypeParameter = leaveType != null ?
                new ObjectParameter("LeaveType", leaveType) :
                new ObjectParameter("LeaveType", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var withPayParameter = withPay != null ?
                new ObjectParameter("WithPay", withPay) :
                new ObjectParameter("WithPay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetRemoveLeaveFiledREV", leaveIDParameter, leaveFromParameter, leaveToParameter, employeeNumberParameter, actualCountParameter, leaveTypeParameter, auditUserParameter, withPayParameter);
        }
    
        public virtual int SetUnsendOT()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetUnsendOT");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_GetExcessOTHolidayRestday(Nullable<int> payrollnumber)
        {
            var payrollnumberParameter = payrollnumber.HasValue ?
                new ObjectParameter("payrollnumber", payrollnumber) :
                new ObjectParameter("payrollnumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetExcessOTHolidayRestday", payrollnumberParameter);
        }
    
        public virtual int sp_GetNDLH2011(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNDLH2011", datestartParameter, dateendParameter);
        }
    
        public virtual int sp_GetNDLH2012(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNDLH2012", datestartParameter, dateendParameter);
        }
    
        public virtual int sp_GetNDLHR2011(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNDLHR2011", datestartParameter, dateendParameter);
        }
    
        public virtual int sp_GetNDLHR2012(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNDLHR2012", datestartParameter, dateendParameter);
        }
    
        public virtual int SP_GETNDRD_2(Nullable<System.DateTime> dATESTART, Nullable<System.DateTime> dATEEND)
        {
            var dATESTARTParameter = dATESTART.HasValue ?
                new ObjectParameter("DATESTART", dATESTART) :
                new ObjectParameter("DATESTART", typeof(System.DateTime));
    
            var dATEENDParameter = dATEEND.HasValue ?
                new ObjectParameter("DATEEND", dATEEND) :
                new ObjectParameter("DATEEND", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GETNDRD_2", dATESTARTParameter, dATEENDParameter);
        }
    
        public virtual int sp_GetNDSH2011(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNDSH2011", datestartParameter, dateendParameter);
        }
    
        public virtual int sp_GetNDSH2012(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNDSH2012", datestartParameter, dateendParameter);
        }
    
        public virtual int sp_GetNDSHR2011(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNDSHR2011", datestartParameter, dateendParameter);
        }
    
        public virtual int sp_GetNDSHR2012(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetNDSHR2012", datestartParameter, dateendParameter);
        }
    
        public virtual ObjectResult<sp_GetNightDifferential_Result> sp_GetNightDifferential(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNightDifferential_Result>("sp_GetNightDifferential", startDateParameter, endDateParameter);
        }
    
        public virtual int sp_GetRDND2011(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetRDND2011", datestartParameter, dateendParameter);
        }
    
        public virtual int sp_GetRDND2012(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetRDND2012", datestartParameter, dateendParameter);
        }
    
        public virtual int SP_GETREGND_2(Nullable<System.DateTime> dATESTART, Nullable<System.DateTime> dATEEND)
        {
            var dATESTARTParameter = dATESTART.HasValue ?
                new ObjectParameter("DATESTART", dATESTART) :
                new ObjectParameter("DATESTART", typeof(System.DateTime));
    
            var dATEENDParameter = dATEEND.HasValue ?
                new ObjectParameter("DATEEND", dATEEND) :
                new ObjectParameter("DATEEND", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GETREGND_2", dATESTARTParameter, dATEENDParameter);
        }
    
        public virtual int sp_GetRegND2011(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetRegND2011", datestartParameter, dateendParameter);
        }
    
        public virtual int sp_GetRegND2012(Nullable<System.DateTime> datestart, Nullable<System.DateTime> dateend)
        {
            var datestartParameter = datestart.HasValue ?
                new ObjectParameter("datestart", datestart) :
                new ObjectParameter("datestart", typeof(System.DateTime));
    
            var dateendParameter = dateend.HasValue ?
                new ObjectParameter("dateend", dateend) :
                new ObjectParameter("dateend", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_GetRegND2012", datestartParameter, dateendParameter);
        }
    
        public virtual int SP_GETSH_2(Nullable<System.DateTime> dATESTART, Nullable<System.DateTime> dATEEND)
        {
            var dATESTARTParameter = dATESTART.HasValue ?
                new ObjectParameter("DATESTART", dATESTART) :
                new ObjectParameter("DATESTART", typeof(System.DateTime));
    
            var dATEENDParameter = dATEEND.HasValue ?
                new ObjectParameter("DATEEND", dATEEND) :
                new ObjectParameter("DATEEND", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GETSH_2", dATESTARTParameter, dATEENDParameter);
        }
    
        public virtual int SP_GETSHRD_2(Nullable<System.DateTime> dATESTART, Nullable<System.DateTime> dATEEND)
        {
            var dATESTARTParameter = dATESTART.HasValue ?
                new ObjectParameter("DATESTART", dATESTART) :
                new ObjectParameter("DATESTART", typeof(System.DateTime));
    
            var dATEENDParameter = dATEEND.HasValue ?
                new ObjectParameter("DATEEND", dATEEND) :
                new ObjectParameter("DATEEND", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GETSHRD_2", dATESTARTParameter, dATEENDParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_PaylipError(Nullable<int> payrollnumber)
        {
            var payrollnumberParameter = payrollnumber.HasValue ?
                new ObjectParameter("payrollnumber", payrollnumber) :
                new ObjectParameter("payrollnumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_PaylipError", payrollnumberParameter);
        }
    
        public virtual int sp_ReComputePayroll2011(Nullable<int> payrollnumber)
        {
            var payrollnumberParameter = payrollnumber.HasValue ?
                new ObjectParameter("Payrollnumber", payrollnumber) :
                new ObjectParameter("Payrollnumber", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ReComputePayroll2011", payrollnumberParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_UpdatesLogs(string auditUser, string employeenumber, string module, string field, string oldValue, string newValue)
        {
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var employeenumberParameter = employeenumber != null ?
                new ObjectParameter("Employeenumber", employeenumber) :
                new ObjectParameter("Employeenumber", typeof(string));
    
            var moduleParameter = module != null ?
                new ObjectParameter("Module", module) :
                new ObjectParameter("Module", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var oldValueParameter = oldValue != null ?
                new ObjectParameter("OldValue", oldValue) :
                new ObjectParameter("OldValue", typeof(string));
    
            var newValueParameter = newValue != null ?
                new ObjectParameter("NewValue", newValue) :
                new ObjectParameter("NewValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdatesLogs", auditUserParameter, employeenumberParameter, moduleParameter, fieldParameter, oldValueParameter, newValueParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<sp_WhoIsActive_Result> sp_WhoIsActive(string filter, string filter_type, string not_filter, string not_filter_type, Nullable<bool> show_own_spid, Nullable<bool> show_system_spids, Nullable<byte> show_sleeping_spids, Nullable<bool> get_full_inner_text, Nullable<byte> get_plans, Nullable<bool> get_outer_command, Nullable<bool> get_transaction_info, Nullable<byte> get_task_info, Nullable<bool> get_locks, Nullable<bool> get_avg_time, Nullable<bool> get_additional_info, Nullable<bool> find_block_leaders, Nullable<byte> delta_interval, string output_column_list, string sort_order, Nullable<byte> format_output, string destination_table, Nullable<bool> return_schema, ObjectParameter schema, Nullable<bool> help)
        {
            var filterParameter = filter != null ?
                new ObjectParameter("filter", filter) :
                new ObjectParameter("filter", typeof(string));
    
            var filter_typeParameter = filter_type != null ?
                new ObjectParameter("filter_type", filter_type) :
                new ObjectParameter("filter_type", typeof(string));
    
            var not_filterParameter = not_filter != null ?
                new ObjectParameter("not_filter", not_filter) :
                new ObjectParameter("not_filter", typeof(string));
    
            var not_filter_typeParameter = not_filter_type != null ?
                new ObjectParameter("not_filter_type", not_filter_type) :
                new ObjectParameter("not_filter_type", typeof(string));
    
            var show_own_spidParameter = show_own_spid.HasValue ?
                new ObjectParameter("show_own_spid", show_own_spid) :
                new ObjectParameter("show_own_spid", typeof(bool));
    
            var show_system_spidsParameter = show_system_spids.HasValue ?
                new ObjectParameter("show_system_spids", show_system_spids) :
                new ObjectParameter("show_system_spids", typeof(bool));
    
            var show_sleeping_spidsParameter = show_sleeping_spids.HasValue ?
                new ObjectParameter("show_sleeping_spids", show_sleeping_spids) :
                new ObjectParameter("show_sleeping_spids", typeof(byte));
    
            var get_full_inner_textParameter = get_full_inner_text.HasValue ?
                new ObjectParameter("get_full_inner_text", get_full_inner_text) :
                new ObjectParameter("get_full_inner_text", typeof(bool));
    
            var get_plansParameter = get_plans.HasValue ?
                new ObjectParameter("get_plans", get_plans) :
                new ObjectParameter("get_plans", typeof(byte));
    
            var get_outer_commandParameter = get_outer_command.HasValue ?
                new ObjectParameter("get_outer_command", get_outer_command) :
                new ObjectParameter("get_outer_command", typeof(bool));
    
            var get_transaction_infoParameter = get_transaction_info.HasValue ?
                new ObjectParameter("get_transaction_info", get_transaction_info) :
                new ObjectParameter("get_transaction_info", typeof(bool));
    
            var get_task_infoParameter = get_task_info.HasValue ?
                new ObjectParameter("get_task_info", get_task_info) :
                new ObjectParameter("get_task_info", typeof(byte));
    
            var get_locksParameter = get_locks.HasValue ?
                new ObjectParameter("get_locks", get_locks) :
                new ObjectParameter("get_locks", typeof(bool));
    
            var get_avg_timeParameter = get_avg_time.HasValue ?
                new ObjectParameter("get_avg_time", get_avg_time) :
                new ObjectParameter("get_avg_time", typeof(bool));
    
            var get_additional_infoParameter = get_additional_info.HasValue ?
                new ObjectParameter("get_additional_info", get_additional_info) :
                new ObjectParameter("get_additional_info", typeof(bool));
    
            var find_block_leadersParameter = find_block_leaders.HasValue ?
                new ObjectParameter("find_block_leaders", find_block_leaders) :
                new ObjectParameter("find_block_leaders", typeof(bool));
    
            var delta_intervalParameter = delta_interval.HasValue ?
                new ObjectParameter("delta_interval", delta_interval) :
                new ObjectParameter("delta_interval", typeof(byte));
    
            var output_column_listParameter = output_column_list != null ?
                new ObjectParameter("output_column_list", output_column_list) :
                new ObjectParameter("output_column_list", typeof(string));
    
            var sort_orderParameter = sort_order != null ?
                new ObjectParameter("sort_order", sort_order) :
                new ObjectParameter("sort_order", typeof(string));
    
            var format_outputParameter = format_output.HasValue ?
                new ObjectParameter("format_output", format_output) :
                new ObjectParameter("format_output", typeof(byte));
    
            var destination_tableParameter = destination_table != null ?
                new ObjectParameter("destination_table", destination_table) :
                new ObjectParameter("destination_table", typeof(string));
    
            var return_schemaParameter = return_schema.HasValue ?
                new ObjectParameter("return_schema", return_schema) :
                new ObjectParameter("return_schema", typeof(bool));
    
            var helpParameter = help.HasValue ?
                new ObjectParameter("help", help) :
                new ObjectParameter("help", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_WhoIsActive_Result>("sp_WhoIsActive", filterParameter, filter_typeParameter, not_filterParameter, not_filter_typeParameter, show_own_spidParameter, show_system_spidsParameter, show_sleeping_spidsParameter, get_full_inner_textParameter, get_plansParameter, get_outer_commandParameter, get_transaction_infoParameter, get_task_infoParameter, get_locksParameter, get_avg_timeParameter, get_additional_infoParameter, find_block_leadersParameter, delta_intervalParameter, output_column_listParameter, sort_orderParameter, format_outputParameter, destination_tableParameter, return_schemaParameter, schema, helpParameter);
        }
    
        public virtual int SpAddUserAccess(Nullable<long> moduleID, string employeeNumber, string auditUser)
        {
            var moduleIDParameter = moduleID.HasValue ?
                new ObjectParameter("ModuleID", moduleID) :
                new ObjectParameter("ModuleID", typeof(long));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAddUserAccess", moduleIDParameter, employeeNumberParameter, auditUserParameter);
        }
    
        public virtual int SpAdjustmentDelete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAdjustmentDelete", iDParameter);
        }
    
        public virtual ObjectResult<SpAdjustmentInsert_Result> SpAdjustmentInsert(string employeeNumber, Nullable<decimal> adjustmentAmt, string type, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, string remarks, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var adjustmentAmtParameter = adjustmentAmt.HasValue ?
                new ObjectParameter("AdjustmentAmt", adjustmentAmt) :
                new ObjectParameter("AdjustmentAmt", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAdjustmentInsert_Result>("SpAdjustmentInsert", employeeNumberParameter, adjustmentAmtParameter, typeParameter, periodStartParameter, periodEndParameter, remarksParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpAdjustmentSelect_Result> SpAdjustmentSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAdjustmentSelect_Result>("SpAdjustmentSelect");
        }
    
        public virtual int SpAdjustmentUpdate(string employeeNumber, Nullable<decimal> adjustmentAmt, string type, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, string remarks, string auditUser, Nullable<long> iD)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var adjustmentAmtParameter = adjustmentAmt.HasValue ?
                new ObjectParameter("AdjustmentAmt", adjustmentAmt) :
                new ObjectParameter("AdjustmentAmt", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAdjustmentUpdate", employeeNumberParameter, adjustmentAmtParameter, typeParameter, periodStartParameter, periodEndParameter, remarksParameter, auditUserParameter, iDParameter);
        }
    
        public virtual int SpAdvancesDelete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAdvancesDelete", iDParameter);
        }
    
        public virtual ObjectResult<SpAdvancesInsert_Result> SpAdvancesInsert(string employeeNumber, Nullable<decimal> advanceAmt, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, string remarks, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var advanceAmtParameter = advanceAmt.HasValue ?
                new ObjectParameter("AdvanceAmt", advanceAmt) :
                new ObjectParameter("AdvanceAmt", typeof(decimal));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAdvancesInsert_Result>("SpAdvancesInsert", employeeNumberParameter, advanceAmtParameter, periodStartParameter, periodEndParameter, remarksParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpAdvancesSelect_Result> SpAdvancesSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAdvancesSelect_Result>("SpAdvancesSelect");
        }
    
        public virtual ObjectResult<SpAdvancesUpdate_Result> SpAdvancesUpdate(string employeeNumber, Nullable<decimal> advanceAmt, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, string remarks, Nullable<long> iD, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var advanceAmtParameter = advanceAmt.HasValue ?
                new ObjectParameter("AdvanceAmt", advanceAmt) :
                new ObjectParameter("AdvanceAmt", typeof(decimal));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpAdvancesUpdate_Result>("SpAdvancesUpdate", employeeNumberParameter, advanceAmtParameter, periodStartParameter, periodEndParameter, remarksParameter, iDParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<spAllCampaignSummaryReports_Result> spAllCampaignSummaryReports(string date, string dateTo)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spAllCampaignSummaryReports_Result>("spAllCampaignSummaryReports", dateParameter, dateToParameter);
        }
    
        public virtual int spAttendanceSummary2011()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAttendanceSummary2011");
        }
    
        public virtual int SpCampaignDelete(Nullable<int> original_ID, string original_CampaignName, string original_Status)
        {
            var original_IDParameter = original_ID.HasValue ?
                new ObjectParameter("Original_ID", original_ID) :
                new ObjectParameter("Original_ID", typeof(int));
    
            var original_CampaignNameParameter = original_CampaignName != null ?
                new ObjectParameter("Original_CampaignName", original_CampaignName) :
                new ObjectParameter("Original_CampaignName", typeof(string));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpCampaignDelete", original_IDParameter, original_CampaignNameParameter, original_StatusParameter);
        }
    
        public virtual int spCampaignDetailsTEST(string campaignNamed, string date, string dateTo)
        {
            var campaignNamedParameter = campaignNamed != null ?
                new ObjectParameter("CampaignNamed", campaignNamed) :
                new ObjectParameter("CampaignNamed", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCampaignDetailsTEST", campaignNamedParameter, dateParameter, dateToParameter);
        }
    
        public virtual ObjectResult<SpCampaignInsert_Result> SpCampaignInsert(Nullable<int> iD, string campaignName, string status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var campaignNameParameter = campaignName != null ?
                new ObjectParameter("CampaignName", campaignName) :
                new ObjectParameter("CampaignName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCampaignInsert_Result>("SpCampaignInsert", iDParameter, campaignNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<SpCampaignSelect_Result> SpCampaignSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCampaignSelect_Result>("SpCampaignSelect");
        }
    
        public virtual int spCampaignSummaryDETAILS(string campaignNamed, string date, string dateTo)
        {
            var campaignNamedParameter = campaignNamed != null ?
                new ObjectParameter("CampaignNamed", campaignNamed) :
                new ObjectParameter("CampaignNamed", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCampaignSummaryDETAILS", campaignNamedParameter, dateParameter, dateToParameter);
        }
    
        public virtual ObjectResult<spCampaignSummaryReports_Result> spCampaignSummaryReports(string campaignNamed, string date, string dateTo)
        {
            var campaignNamedParameter = campaignNamed != null ?
                new ObjectParameter("CampaignNamed", campaignNamed) :
                new ObjectParameter("CampaignNamed", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCampaignSummaryReports_Result>("spCampaignSummaryReports", campaignNamedParameter, dateParameter, dateToParameter);
        }
    
        public virtual ObjectResult<spCampaignSummaryReports_2012_Result> spCampaignSummaryReports_2012(string date, string dateTo)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCampaignSummaryReports_2012_Result>("spCampaignSummaryReports_2012", dateParameter, dateToParameter);
        }
    
        public virtual ObjectResult<spCampaignSummaryReports_All_Result> spCampaignSummaryReports_All(string campaignNamed, string date, string dateTo)
        {
            var campaignNamedParameter = campaignNamed != null ?
                new ObjectParameter("CampaignNamed", campaignNamed) :
                new ObjectParameter("CampaignNamed", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCampaignSummaryReports_All_Result>("spCampaignSummaryReports_All", campaignNamedParameter, dateParameter, dateToParameter);
        }
    
        public virtual ObjectResult<spCampaignSummaryReports_AllCampaign_Result> spCampaignSummaryReports_AllCampaign(string date, string dateTo)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCampaignSummaryReports_AllCampaign_Result>("spCampaignSummaryReports_AllCampaign", dateParameter, dateToParameter);
        }
    
        public virtual int spCampaignSummaryReports_VERIFONE(string date, string dateTo)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCampaignSummaryReports_VERIFONE", dateParameter, dateToParameter);
        }
    
        public virtual int SPCAMPAIGNSUMMARYREPORTS2(string date, string dateTo)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPCAMPAIGNSUMMARYREPORTS2", dateParameter, dateToParameter);
        }
    
        public virtual int spCampaignSummaryReports2011(string campaignNamed, string date, string dateTo)
        {
            var campaignNamedParameter = campaignNamed != null ?
                new ObjectParameter("CampaignNamed", campaignNamed) :
                new ObjectParameter("CampaignNamed", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCampaignSummaryReports2011", campaignNamedParameter, dateParameter, dateToParameter);
        }
    
        public virtual int spCampaignSummaryReports2011REV(string date, string dateTo)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCampaignSummaryReports2011REV", dateParameter, dateToParameter);
        }
    
        public virtual int spCampaignSummaryReports2011x(string campaignNamed, string date, string dateTo)
        {
            var campaignNamedParameter = campaignNamed != null ?
                new ObjectParameter("CampaignNamed", campaignNamed) :
                new ObjectParameter("CampaignNamed", typeof(string));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var dateToParameter = dateTo != null ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spCampaignSummaryReports2011x", campaignNamedParameter, dateParameter, dateToParameter);
        }
    
        public virtual ObjectResult<SPCAMPAIGNSUMMARYREPORTS3_Result> SPCAMPAIGNSUMMARYREPORTS3(Nullable<System.DateTime> dATE, Nullable<System.DateTime> dATETO)
        {
            var dATEParameter = dATE.HasValue ?
                new ObjectParameter("DATE", dATE) :
                new ObjectParameter("DATE", typeof(System.DateTime));
    
            var dATETOParameter = dATETO.HasValue ?
                new ObjectParameter("DATETO", dATETO) :
                new ObjectParameter("DATETO", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPCAMPAIGNSUMMARYREPORTS3_Result>("SPCAMPAIGNSUMMARYREPORTS3", dATEParameter, dATETOParameter);
        }
    
        public virtual ObjectResult<SpCampaignUpdate_Result> SpCampaignUpdate(Nullable<int> iD, string campaignName, string status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var campaignNameParameter = campaignName != null ?
                new ObjectParameter("CampaignName", campaignName) :
                new ObjectParameter("CampaignName", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCampaignUpdate_Result>("SpCampaignUpdate", iDParameter, campaignNameParameter, statusParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpCheckHaveScheduleWrite(string flag, string employeeNumber)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpCheckHaveScheduleWrite", flagParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpCheckIfSubordinate(string flag, string tLEmpNo, string employeeNumber)
        {
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var tLEmpNoParameter = tLEmpNo != null ?
                new ObjectParameter("TLEmpNo", tLEmpNo) :
                new ObjectParameter("TLEmpNo", typeof(string));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpCheckIfSubordinate", flagParameter, tLEmpNoParameter, employeeNumberParameter);
        }
    
        public virtual ObjectResult<SpCivilStatusSelect_Result> SpCivilStatusSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpCivilStatusSelect_Result>("SpCivilStatusSelect");
        }
    
        public virtual int SpDepartmentDelete(Nullable<int> original_ID, string original_Description, string original_Status)
        {
            var original_IDParameter = original_ID.HasValue ?
                new ObjectParameter("Original_ID", original_ID) :
                new ObjectParameter("Original_ID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpDepartmentDelete", original_IDParameter, original_DescriptionParameter, original_StatusParameter);
        }
    
        public virtual ObjectResult<SpDepartmentInsert_Result> SpDepartmentInsert(Nullable<int> iD, string description, string status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpDepartmentInsert_Result>("SpDepartmentInsert", iDParameter, descriptionParameter, statusParameter);
        }
    
        public virtual ObjectResult<SpDepartmentSelect_Result> SpDepartmentSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpDepartmentSelect_Result>("SpDepartmentSelect");
        }
    
        public virtual ObjectResult<SpDepartmentUpdate_Result> SpDepartmentUpdate(Nullable<int> iD, string description, string status)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpDepartmentUpdate_Result>("SpDepartmentUpdate", iDParameter, descriptionParameter, statusParameter);
        }
    
        public virtual int SpEmployeeDelete(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeDelete", employeeIDParameter);
        }
    
        public virtual int SpEmployeeInsert(string firstName, string lastName, string middleName, string address, string telephone, string email, string cellphone, Nullable<System.DateTime> dateCreated, string pIN, string password, Nullable<int> department, Nullable<System.DateTime> dateHired, string isActive, Nullable<System.DateTime> dateSeparated, Nullable<int> positionID, Nullable<int> reportTo, Nullable<int> employeeTypeID, Nullable<int> taxCodeID, string accountNumber, string tinNo, string sssNo, string pHealthNo, string hdmfNo, Nullable<decimal> ratePerMonth, Nullable<decimal> ratePerDay, Nullable<decimal> ratePerHour, Nullable<decimal> ratePerMinute, Nullable<decimal> colaPerMonth, Nullable<decimal> colaPerDay, Nullable<decimal> colaPerHour, Nullable<decimal> colaPerMinute)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cellphoneParameter = cellphone != null ?
                new ObjectParameter("Cellphone", cellphone) :
                new ObjectParameter("Cellphone", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var dateHiredParameter = dateHired.HasValue ?
                new ObjectParameter("DateHired", dateHired) :
                new ObjectParameter("DateHired", typeof(System.DateTime));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var dateSeparatedParameter = dateSeparated.HasValue ?
                new ObjectParameter("DateSeparated", dateSeparated) :
                new ObjectParameter("DateSeparated", typeof(System.DateTime));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var reportToParameter = reportTo.HasValue ?
                new ObjectParameter("ReportTo", reportTo) :
                new ObjectParameter("ReportTo", typeof(int));
    
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(int));
    
            var taxCodeIDParameter = taxCodeID.HasValue ?
                new ObjectParameter("TaxCodeID", taxCodeID) :
                new ObjectParameter("TaxCodeID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var sssNoParameter = sssNo != null ?
                new ObjectParameter("SssNo", sssNo) :
                new ObjectParameter("SssNo", typeof(string));
    
            var pHealthNoParameter = pHealthNo != null ?
                new ObjectParameter("PHealthNo", pHealthNo) :
                new ObjectParameter("PHealthNo", typeof(string));
    
            var hdmfNoParameter = hdmfNo != null ?
                new ObjectParameter("HdmfNo", hdmfNo) :
                new ObjectParameter("HdmfNo", typeof(string));
    
            var ratePerMonthParameter = ratePerMonth.HasValue ?
                new ObjectParameter("RatePerMonth", ratePerMonth) :
                new ObjectParameter("RatePerMonth", typeof(decimal));
    
            var ratePerDayParameter = ratePerDay.HasValue ?
                new ObjectParameter("RatePerDay", ratePerDay) :
                new ObjectParameter("RatePerDay", typeof(decimal));
    
            var ratePerHourParameter = ratePerHour.HasValue ?
                new ObjectParameter("RatePerHour", ratePerHour) :
                new ObjectParameter("RatePerHour", typeof(decimal));
    
            var ratePerMinuteParameter = ratePerMinute.HasValue ?
                new ObjectParameter("RatePerMinute", ratePerMinute) :
                new ObjectParameter("RatePerMinute", typeof(decimal));
    
            var colaPerMonthParameter = colaPerMonth.HasValue ?
                new ObjectParameter("ColaPerMonth", colaPerMonth) :
                new ObjectParameter("ColaPerMonth", typeof(decimal));
    
            var colaPerDayParameter = colaPerDay.HasValue ?
                new ObjectParameter("ColaPerDay", colaPerDay) :
                new ObjectParameter("ColaPerDay", typeof(decimal));
    
            var colaPerHourParameter = colaPerHour.HasValue ?
                new ObjectParameter("ColaPerHour", colaPerHour) :
                new ObjectParameter("ColaPerHour", typeof(decimal));
    
            var colaPerMinuteParameter = colaPerMinute.HasValue ?
                new ObjectParameter("ColaPerMinute", colaPerMinute) :
                new ObjectParameter("ColaPerMinute", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeInsert", firstNameParameter, lastNameParameter, middleNameParameter, addressParameter, telephoneParameter, emailParameter, cellphoneParameter, dateCreatedParameter, pINParameter, passwordParameter, departmentParameter, dateHiredParameter, isActiveParameter, dateSeparatedParameter, positionIDParameter, reportToParameter, employeeTypeIDParameter, taxCodeIDParameter, accountNumberParameter, tinNoParameter, sssNoParameter, pHealthNoParameter, hdmfNoParameter, ratePerMonthParameter, ratePerDayParameter, ratePerHourParameter, ratePerMinuteParameter, colaPerMonthParameter, colaPerDayParameter, colaPerHourParameter, colaPerMinuteParameter);
        }
    
        public virtual int SpEmployeeLogDelete(Nullable<int> original_UserlogID)
        {
            var original_UserlogIDParameter = original_UserlogID.HasValue ?
                new ObjectParameter("Original_UserlogID", original_UserlogID) :
                new ObjectParameter("Original_UserlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeLogDelete", original_UserlogIDParameter);
        }
    
        public virtual ObjectResult<SpEmployeeLogInsert_Result> SpEmployeeLogInsert(string employeeNumber, Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeout, Nullable<int> overtime, Nullable<int> undertime, Nullable<int> late, Nullable<int> nightDifferential, Nullable<int> scheduleID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("Timeout", timeout) :
                new ObjectParameter("Timeout", typeof(System.DateTime));
    
            var overtimeParameter = overtime.HasValue ?
                new ObjectParameter("Overtime", overtime) :
                new ObjectParameter("Overtime", typeof(int));
    
            var undertimeParameter = undertime.HasValue ?
                new ObjectParameter("Undertime", undertime) :
                new ObjectParameter("Undertime", typeof(int));
    
            var lateParameter = late.HasValue ?
                new ObjectParameter("Late", late) :
                new ObjectParameter("Late", typeof(int));
    
            var nightDifferentialParameter = nightDifferential.HasValue ?
                new ObjectParameter("NightDifferential", nightDifferential) :
                new ObjectParameter("NightDifferential", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpEmployeeLogInsert_Result>("SpEmployeeLogInsert", employeeNumberParameter, timeInParameter, timeoutParameter, overtimeParameter, undertimeParameter, lateParameter, nightDifferentialParameter, scheduleIDParameter);
        }
    
        public virtual ObjectResult<SpEmployeeLogRestDayUpdate_Result> SpEmployeeLogRestDayUpdate(string employeeNumber, Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeout, Nullable<int> overtime, Nullable<int> undertime, Nullable<int> late, Nullable<int> nightDifferential, Nullable<int> scheduleID, Nullable<int> original_UserlogID, Nullable<int> userlogID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("Timeout", timeout) :
                new ObjectParameter("Timeout", typeof(System.DateTime));
    
            var overtimeParameter = overtime.HasValue ?
                new ObjectParameter("Overtime", overtime) :
                new ObjectParameter("Overtime", typeof(int));
    
            var undertimeParameter = undertime.HasValue ?
                new ObjectParameter("Undertime", undertime) :
                new ObjectParameter("Undertime", typeof(int));
    
            var lateParameter = late.HasValue ?
                new ObjectParameter("Late", late) :
                new ObjectParameter("Late", typeof(int));
    
            var nightDifferentialParameter = nightDifferential.HasValue ?
                new ObjectParameter("NightDifferential", nightDifferential) :
                new ObjectParameter("NightDifferential", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var original_UserlogIDParameter = original_UserlogID.HasValue ?
                new ObjectParameter("Original_UserlogID", original_UserlogID) :
                new ObjectParameter("Original_UserlogID", typeof(int));
    
            var userlogIDParameter = userlogID.HasValue ?
                new ObjectParameter("UserlogID", userlogID) :
                new ObjectParameter("UserlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpEmployeeLogRestDayUpdate_Result>("SpEmployeeLogRestDayUpdate", employeeNumberParameter, timeInParameter, timeoutParameter, overtimeParameter, undertimeParameter, lateParameter, nightDifferentialParameter, scheduleIDParameter, original_UserlogIDParameter, userlogIDParameter);
        }
    
        public virtual ObjectResult<SpEmployeeLogSelect_Result> SpEmployeeLogSelect(string employeeNumber, string rangeFrom, string rangeTo)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var rangeFromParameter = rangeFrom != null ?
                new ObjectParameter("RangeFrom", rangeFrom) :
                new ObjectParameter("RangeFrom", typeof(string));
    
            var rangeToParameter = rangeTo != null ?
                new ObjectParameter("RangeTo", rangeTo) :
                new ObjectParameter("RangeTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpEmployeeLogSelect_Result>("SpEmployeeLogSelect", employeeNumberParameter, rangeFromParameter, rangeToParameter);
        }
    
        public virtual ObjectResult<SpEmployeeLogUpdate_Result> SpEmployeeLogUpdate(string employeeNumber, Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeout, Nullable<int> overtime, Nullable<int> undertime, Nullable<int> late, Nullable<int> nightDifferential, Nullable<int> scheduleID, Nullable<int> original_UserlogID, Nullable<int> userlogID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("Timeout", timeout) :
                new ObjectParameter("Timeout", typeof(System.DateTime));
    
            var overtimeParameter = overtime.HasValue ?
                new ObjectParameter("Overtime", overtime) :
                new ObjectParameter("Overtime", typeof(int));
    
            var undertimeParameter = undertime.HasValue ?
                new ObjectParameter("Undertime", undertime) :
                new ObjectParameter("Undertime", typeof(int));
    
            var lateParameter = late.HasValue ?
                new ObjectParameter("Late", late) :
                new ObjectParameter("Late", typeof(int));
    
            var nightDifferentialParameter = nightDifferential.HasValue ?
                new ObjectParameter("NightDifferential", nightDifferential) :
                new ObjectParameter("NightDifferential", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var original_UserlogIDParameter = original_UserlogID.HasValue ?
                new ObjectParameter("Original_UserlogID", original_UserlogID) :
                new ObjectParameter("Original_UserlogID", typeof(int));
    
            var userlogIDParameter = userlogID.HasValue ?
                new ObjectParameter("UserlogID", userlogID) :
                new ObjectParameter("UserlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpEmployeeLogUpdate_Result>("SpEmployeeLogUpdate", employeeNumberParameter, timeInParameter, timeoutParameter, overtimeParameter, undertimeParameter, lateParameter, nightDifferentialParameter, scheduleIDParameter, original_UserlogIDParameter, userlogIDParameter);
        }
    
        public virtual int SpEmployeeSelect(string isActive)
        {
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeSelect", isActiveParameter);
        }
    
        public virtual int SpEmployeeTypeDelete(Nullable<int> original_ID, string original_Description, string original_Status)
        {
            var original_IDParameter = original_ID.HasValue ?
                new ObjectParameter("Original_ID", original_ID) :
                new ObjectParameter("Original_ID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeTypeDelete", original_IDParameter, original_DescriptionParameter, original_StatusParameter);
        }
    
        public virtual ObjectResult<SpEmployeeTypeInsert_Result> SpEmployeeTypeInsert(string description, string status)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpEmployeeTypeInsert_Result>("SpEmployeeTypeInsert", descriptionParameter, statusParameter);
        }
    
        public virtual ObjectResult<SpEmployeeTypeSelect_Result> SpEmployeeTypeSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpEmployeeTypeSelect_Result>("SpEmployeeTypeSelect");
        }
    
        public virtual ObjectResult<SpEmployeeTypeUpdate_Result> SpEmployeeTypeUpdate(string description, string status, Nullable<int> original_ID, string original_Description, string original_Status, Nullable<int> iD)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var original_IDParameter = original_ID.HasValue ?
                new ObjectParameter("Original_ID", original_ID) :
                new ObjectParameter("Original_ID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpEmployeeTypeUpdate_Result>("SpEmployeeTypeUpdate", descriptionParameter, statusParameter, original_IDParameter, original_DescriptionParameter, original_StatusParameter, iDParameter);
        }
    
        public virtual int SpEmployeeUpdate(Nullable<int> employeeID, string firstName, string lastName, string middleName, string address, string telephone, string email, string cellphone, Nullable<System.DateTime> dateCreated, string pIN, string password, Nullable<int> department, Nullable<System.DateTime> dateHired, string isActive, Nullable<System.DateTime> dateSeparated, Nullable<int> positionID, Nullable<int> reportTo, Nullable<int> employeeTypeID, Nullable<int> taxCodeID, string accountNumber, string tinNo, string sssNo, string pHealthNo, string hdmfNo, Nullable<decimal> ratePerMonth, Nullable<decimal> ratePerDay, Nullable<decimal> ratePerHour, Nullable<decimal> ratePerMinute, Nullable<decimal> colaPerMonth, Nullable<decimal> colaPerDay, Nullable<decimal> colaPerHour, Nullable<decimal> colaPerMinute)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cellphoneParameter = cellphone != null ?
                new ObjectParameter("Cellphone", cellphone) :
                new ObjectParameter("Cellphone", typeof(string));
    
            var dateCreatedParameter = dateCreated.HasValue ?
                new ObjectParameter("DateCreated", dateCreated) :
                new ObjectParameter("DateCreated", typeof(System.DateTime));
    
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var dateHiredParameter = dateHired.HasValue ?
                new ObjectParameter("DateHired", dateHired) :
                new ObjectParameter("DateHired", typeof(System.DateTime));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var dateSeparatedParameter = dateSeparated.HasValue ?
                new ObjectParameter("DateSeparated", dateSeparated) :
                new ObjectParameter("DateSeparated", typeof(System.DateTime));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var reportToParameter = reportTo.HasValue ?
                new ObjectParameter("ReportTo", reportTo) :
                new ObjectParameter("ReportTo", typeof(int));
    
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(int));
    
            var taxCodeIDParameter = taxCodeID.HasValue ?
                new ObjectParameter("TaxCodeID", taxCodeID) :
                new ObjectParameter("TaxCodeID", typeof(int));
    
            var accountNumberParameter = accountNumber != null ?
                new ObjectParameter("AccountNumber", accountNumber) :
                new ObjectParameter("AccountNumber", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var sssNoParameter = sssNo != null ?
                new ObjectParameter("SssNo", sssNo) :
                new ObjectParameter("SssNo", typeof(string));
    
            var pHealthNoParameter = pHealthNo != null ?
                new ObjectParameter("PHealthNo", pHealthNo) :
                new ObjectParameter("PHealthNo", typeof(string));
    
            var hdmfNoParameter = hdmfNo != null ?
                new ObjectParameter("HdmfNo", hdmfNo) :
                new ObjectParameter("HdmfNo", typeof(string));
    
            var ratePerMonthParameter = ratePerMonth.HasValue ?
                new ObjectParameter("RatePerMonth", ratePerMonth) :
                new ObjectParameter("RatePerMonth", typeof(decimal));
    
            var ratePerDayParameter = ratePerDay.HasValue ?
                new ObjectParameter("RatePerDay", ratePerDay) :
                new ObjectParameter("RatePerDay", typeof(decimal));
    
            var ratePerHourParameter = ratePerHour.HasValue ?
                new ObjectParameter("RatePerHour", ratePerHour) :
                new ObjectParameter("RatePerHour", typeof(decimal));
    
            var ratePerMinuteParameter = ratePerMinute.HasValue ?
                new ObjectParameter("RatePerMinute", ratePerMinute) :
                new ObjectParameter("RatePerMinute", typeof(decimal));
    
            var colaPerMonthParameter = colaPerMonth.HasValue ?
                new ObjectParameter("ColaPerMonth", colaPerMonth) :
                new ObjectParameter("ColaPerMonth", typeof(decimal));
    
            var colaPerDayParameter = colaPerDay.HasValue ?
                new ObjectParameter("ColaPerDay", colaPerDay) :
                new ObjectParameter("ColaPerDay", typeof(decimal));
    
            var colaPerHourParameter = colaPerHour.HasValue ?
                new ObjectParameter("ColaPerHour", colaPerHour) :
                new ObjectParameter("ColaPerHour", typeof(decimal));
    
            var colaPerMinuteParameter = colaPerMinute.HasValue ?
                new ObjectParameter("ColaPerMinute", colaPerMinute) :
                new ObjectParameter("ColaPerMinute", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpEmployeeUpdate", employeeIDParameter, firstNameParameter, lastNameParameter, middleNameParameter, addressParameter, telephoneParameter, emailParameter, cellphoneParameter, dateCreatedParameter, pINParameter, passwordParameter, departmentParameter, dateHiredParameter, isActiveParameter, dateSeparatedParameter, positionIDParameter, reportToParameter, employeeTypeIDParameter, taxCodeIDParameter, accountNumberParameter, tinNoParameter, sssNoParameter, pHealthNoParameter, hdmfNoParameter, ratePerMonthParameter, ratePerDayParameter, ratePerHourParameter, ratePerMinuteParameter, colaPerMonthParameter, colaPerDayParameter, colaPerHourParameter, colaPerMinuteParameter);
        }
    
        public virtual int spGetAllLeaves()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetAllLeaves");
        }
    
        public virtual ObjectResult<spGetCampaignType_Result> spGetCampaignType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetCampaignType_Result>("spGetCampaignType");
        }
    
        public virtual int spGetEmployeeLeaves(string eMPLOYEENUMBER)
        {
            var eMPLOYEENUMBERParameter = eMPLOYEENUMBER != null ?
                new ObjectParameter("EMPLOYEENUMBER", eMPLOYEENUMBER) :
                new ObjectParameter("EMPLOYEENUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmployeeLeaves", eMPLOYEENUMBERParameter);
        }
    
        public virtual int spGetEmployeeLeavesOLD(string eMPLOYEENUMBER)
        {
            var eMPLOYEENUMBERParameter = eMPLOYEENUMBER != null ?
                new ObjectParameter("EMPLOYEENUMBER", eMPLOYEENUMBER) :
                new ObjectParameter("EMPLOYEENUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetEmployeeLeavesOLD", eMPLOYEENUMBERParameter);
        }
    
        public virtual ObjectResult<spGetEmployeeSchedule_Result> spGetEmployeeSchedule(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeeSchedule_Result>("spGetEmployeeSchedule", employeeNumberParameter);
        }
    
        public virtual ObjectResult<spGetEmployeesOverBreak_Result> spGetEmployeesOverBreak(string employeeNumber, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetEmployeesOverBreak_Result>("spGetEmployeesOverBreak", employeeNumberParameter, periodStartParameter, periodEndParameter);
        }
    
        public virtual ObjectResult<spGetSLbyEmployee_Result> spGetSLbyEmployee(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSLbyEmployee_Result>("spGetSLbyEmployee", employeeNumberParameter);
        }
    
        public virtual int spGetVERIFONEAgentsPayroll(Nullable<System.DateTime> datefrom, Nullable<System.DateTime> dateto)
        {
            var datefromParameter = datefrom.HasValue ?
                new ObjectParameter("datefrom", datefrom) :
                new ObjectParameter("datefrom", typeof(System.DateTime));
    
            var datetoParameter = dateto.HasValue ?
                new ObjectParameter("dateto", dateto) :
                new ObjectParameter("dateto", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetVERIFONEAgentsPayroll", datefromParameter, datetoParameter);
        }
    
        public virtual int SpHolidayDelete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpHolidayDelete", iDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SpHolidayGetYears()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SpHolidayGetYears");
        }
    
        public virtual ObjectResult<SpHolidayInsert_Result> SpHolidayInsert(Nullable<System.DateTime> date, Nullable<double> credit, string name, string type, string auditUser)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpHolidayInsert_Result>("SpHolidayInsert", dateParameter, creditParameter, nameParameter, typeParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpHolidaySelect_Result> SpHolidaySelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpHolidaySelect_Result>("SpHolidaySelect");
        }
    
        public virtual ObjectResult<SpHolidaySelectByYear_Result> SpHolidaySelectByYear(Nullable<int> year)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpHolidaySelectByYear_Result>("SpHolidaySelectByYear", yearParameter);
        }
    
        public virtual ObjectResult<SpHolidayUpdate_Result> SpHolidayUpdate(Nullable<System.DateTime> date, Nullable<double> credit, string name, string type, string auditUser, Nullable<long> iD)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var creditParameter = credit.HasValue ?
                new ObjectParameter("Credit", credit) :
                new ObjectParameter("Credit", typeof(double));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpHolidayUpdate_Result>("SpHolidayUpdate", dateParameter, creditParameter, nameParameter, typeParameter, auditUserParameter, iDParameter);
        }
    
        public virtual int SpLeaveCreditDelete(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLeaveCreditDelete", employeeNumberParameter);
        }
    
        public virtual ObjectResult<SpLeaveCreditInsert_Result> SpLeaveCreditInsert(string employeeNumber, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpLeaveCreditInsert_Result>("SpLeaveCreditInsert", employeeNumberParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpLeaveCreditSelect_Result> SpLeaveCreditSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpLeaveCreditSelect_Result>("SpLeaveCreditSelect");
        }
    
        public virtual ObjectResult<SpLeaveCreditUpdate_Result> SpLeaveCreditUpdate(string employeeNumber, Nullable<decimal> sick, Nullable<decimal> vacation, Nullable<decimal> emergency, Nullable<decimal> maternity, Nullable<decimal> paternity, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var sickParameter = sick.HasValue ?
                new ObjectParameter("Sick", sick) :
                new ObjectParameter("Sick", typeof(decimal));
    
            var vacationParameter = vacation.HasValue ?
                new ObjectParameter("Vacation", vacation) :
                new ObjectParameter("Vacation", typeof(decimal));
    
            var emergencyParameter = emergency.HasValue ?
                new ObjectParameter("Emergency", emergency) :
                new ObjectParameter("Emergency", typeof(decimal));
    
            var maternityParameter = maternity.HasValue ?
                new ObjectParameter("Maternity", maternity) :
                new ObjectParameter("Maternity", typeof(decimal));
    
            var paternityParameter = paternity.HasValue ?
                new ObjectParameter("Paternity", paternity) :
                new ObjectParameter("Paternity", typeof(decimal));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpLeaveCreditUpdate_Result>("SpLeaveCreditUpdate", employeeNumberParameter, sickParameter, vacationParameter, emergencyParameter, maternityParameter, paternityParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SpLeaveFiledInsert(string employeeNumber, Nullable<System.DateTime> dateFiled, Nullable<System.DateTime> leaveFrom, Nullable<System.DateTime> leaveTo, Nullable<decimal> leaveCount, string type, string reason, string auditUser, Nullable<bool> withPay)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFiledParameter = dateFiled.HasValue ?
                new ObjectParameter("DateFiled", dateFiled) :
                new ObjectParameter("DateFiled", typeof(System.DateTime));
    
            var leaveFromParameter = leaveFrom.HasValue ?
                new ObjectParameter("LeaveFrom", leaveFrom) :
                new ObjectParameter("LeaveFrom", typeof(System.DateTime));
    
            var leaveToParameter = leaveTo.HasValue ?
                new ObjectParameter("LeaveTo", leaveTo) :
                new ObjectParameter("LeaveTo", typeof(System.DateTime));
    
            var leaveCountParameter = leaveCount.HasValue ?
                new ObjectParameter("LeaveCount", leaveCount) :
                new ObjectParameter("LeaveCount", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var withPayParameter = withPay.HasValue ?
                new ObjectParameter("WithPay", withPay) :
                new ObjectParameter("WithPay", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SpLeaveFiledInsert", employeeNumberParameter, dateFiledParameter, leaveFromParameter, leaveToParameter, leaveCountParameter, typeParameter, reasonParameter, auditUserParameter, withPayParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> SpLeaveFiledInsertREV(string employeeNumber, Nullable<System.DateTime> dateFiled, Nullable<System.DateTime> leaveFrom, Nullable<System.DateTime> leaveTo, Nullable<decimal> leaveCount, string type, string reason, string auditUser, string withPay)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFiledParameter = dateFiled.HasValue ?
                new ObjectParameter("DateFiled", dateFiled) :
                new ObjectParameter("DateFiled", typeof(System.DateTime));
    
            var leaveFromParameter = leaveFrom.HasValue ?
                new ObjectParameter("LeaveFrom", leaveFrom) :
                new ObjectParameter("LeaveFrom", typeof(System.DateTime));
    
            var leaveToParameter = leaveTo.HasValue ?
                new ObjectParameter("LeaveTo", leaveTo) :
                new ObjectParameter("LeaveTo", typeof(System.DateTime));
    
            var leaveCountParameter = leaveCount.HasValue ?
                new ObjectParameter("LeaveCount", leaveCount) :
                new ObjectParameter("LeaveCount", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var withPayParameter = withPay != null ?
                new ObjectParameter("WithPay", withPay) :
                new ObjectParameter("WithPay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("SpLeaveFiledInsertREV", employeeNumberParameter, dateFiledParameter, leaveFromParameter, leaveToParameter, leaveCountParameter, typeParameter, reasonParameter, auditUserParameter, withPayParameter);
        }
    
        public virtual ObjectResult<SpLeaveFiledSelect_Result> SpLeaveFiledSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpLeaveFiledSelect_Result>("SpLeaveFiledSelect");
        }
    
        public virtual ObjectResult<SpLeaveTypeSelect_Result> SpLeaveTypeSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpLeaveTypeSelect_Result>("SpLeaveTypeSelect");
        }
    
        public virtual int SpLoanPaymentInsert(string employeeNumber, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, Nullable<System.DateTime> payDate, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var payDateParameter = payDate.HasValue ?
                new ObjectParameter("PayDate", payDate) :
                new ObjectParameter("PayDate", typeof(System.DateTime));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpLoanPaymentInsert", employeeNumberParameter, periodStartParameter, periodEndParameter, payDateParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpLoanPaymentSelect_Result> SpLoanPaymentSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpLoanPaymentSelect_Result>("SpLoanPaymentSelect");
        }
    
        public virtual int spManageMetrics(string oICNUMBER)
        {
            var oICNUMBERParameter = oICNUMBER != null ?
                new ObjectParameter("OICNUMBER", oICNUMBER) :
                new ObjectParameter("OICNUMBER", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spManageMetrics", oICNUMBERParameter);
        }
    
        public virtual ObjectResult<SpNotificationModeSelect_Result> SpNotificationModeSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpNotificationModeSelect_Result>("SpNotificationModeSelect");
        }
    
        public virtual int SpPositionDelete(Nullable<int> original_ID, string original_Description, string original_Status)
        {
            var original_IDParameter = original_ID.HasValue ?
                new ObjectParameter("Original_ID", original_ID) :
                new ObjectParameter("Original_ID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpPositionDelete", original_IDParameter, original_DescriptionParameter, original_StatusParameter);
        }
    
        public virtual ObjectResult<SpPositionInsert_Result> SpPositionInsert(string description, string status)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPositionInsert_Result>("SpPositionInsert", descriptionParameter, statusParameter);
        }
    
        public virtual ObjectResult<SpPositionSelect_Result> SpPositionSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPositionSelect_Result>("SpPositionSelect");
        }
    
        public virtual ObjectResult<SpPositionUpdate_Result> SpPositionUpdate(string description, string status, Nullable<int> original_ID, string original_Description, string original_Status, Nullable<int> iD)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var original_IDParameter = original_ID.HasValue ?
                new ObjectParameter("Original_ID", original_ID) :
                new ObjectParameter("Original_ID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpPositionUpdate_Result>("SpPositionUpdate", descriptionParameter, statusParameter, original_IDParameter, original_DescriptionParameter, original_StatusParameter, iDParameter);
        }
    
        public virtual ObjectResult<Spread_AnnualReport_TaxWithHeld_Result> Spread_AnnualReport_TaxWithHeld(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spread_AnnualReport_TaxWithHeld_Result>("Spread_AnnualReport_TaxWithHeld", yearParameter);
        }
    
        public virtual ObjectResult<Spread_GetMonthlyEmployeeLeaves_OPTSSLELLWOP_Result> Spread_GetMonthlyEmployeeLeaves_OPTSSLELLWOP(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spread_GetMonthlyEmployeeLeaves_OPTSSLELLWOP_Result>("Spread_GetMonthlyEmployeeLeaves_OPTSSLELLWOP", yearParameter);
        }
    
        public virtual ObjectResult<Spread_GetMonthlyEmployeeLeavesSL_Result> Spread_GetMonthlyEmployeeLeavesSL(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spread_GetMonthlyEmployeeLeavesSL_Result>("Spread_GetMonthlyEmployeeLeavesSL", yearParameter);
        }
    
        public virtual ObjectResult<Spread_GetMonthlyEmployeeLeavesSLELLWOP_Result> Spread_GetMonthlyEmployeeLeavesSLELLWOP(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Spread_GetMonthlyEmployeeLeavesSLELLWOP_Result>("Spread_GetMonthlyEmployeeLeavesSLELLWOP", yearParameter);
        }
    
        public virtual int SpRemoveUserAccess(Nullable<long> accessID)
        {
            var accessIDParameter = accessID.HasValue ?
                new ObjectParameter("AccessID", accessID) :
                new ObjectParameter("AccessID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRemoveUserAccess", accessIDParameter);
        }
    
        public virtual int SpRepresentationDelete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRepresentationDelete", iDParameter);
        }
    
        public virtual ObjectResult<SpRepresentationInsert_Result> SpRepresentationInsert(string employeeNumber, Nullable<decimal> representationAmt, string type, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, string remarks, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var representationAmtParameter = representationAmt.HasValue ?
                new ObjectParameter("RepresentationAmt", representationAmt) :
                new ObjectParameter("RepresentationAmt", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRepresentationInsert_Result>("SpRepresentationInsert", employeeNumberParameter, representationAmtParameter, typeParameter, periodStartParameter, periodEndParameter, remarksParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpRepresentationSelect_Result> SpRepresentationSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpRepresentationSelect_Result>("SpRepresentationSelect");
        }
    
        public virtual int SpRepresentationUpdate(string employeeNumber, Nullable<decimal> representationAmt, string type, Nullable<System.DateTime> periodStart, Nullable<System.DateTime> periodEnd, string remarks, string auditUser, Nullable<long> iD)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var representationAmtParameter = representationAmt.HasValue ?
                new ObjectParameter("RepresentationAmt", representationAmt) :
                new ObjectParameter("RepresentationAmt", typeof(decimal));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var periodStartParameter = periodStart.HasValue ?
                new ObjectParameter("PeriodStart", periodStart) :
                new ObjectParameter("PeriodStart", typeof(System.DateTime));
    
            var periodEndParameter = periodEnd.HasValue ?
                new ObjectParameter("PeriodEnd", periodEnd) :
                new ObjectParameter("PeriodEnd", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpRepresentationUpdate", employeeNumberParameter, representationAmtParameter, typeParameter, periodStartParameter, periodEndParameter, remarksParameter, auditUserParameter, iDParameter);
        }
    
        public virtual int SpSaltDelete(string original_PIN, string original_Salt)
        {
            var original_PINParameter = original_PIN != null ?
                new ObjectParameter("Original_PIN", original_PIN) :
                new ObjectParameter("Original_PIN", typeof(string));
    
            var original_SaltParameter = original_Salt != null ?
                new ObjectParameter("Original_Salt", original_Salt) :
                new ObjectParameter("Original_Salt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSaltDelete", original_PINParameter, original_SaltParameter);
        }
    
        public virtual ObjectResult<SpSaltInsert_Result> SpSaltInsert(string pIN, string salt)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSaltInsert_Result>("SpSaltInsert", pINParameter, saltParameter);
        }
    
        public virtual ObjectResult<SpSaltSelect_Result> SpSaltSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSaltSelect_Result>("SpSaltSelect");
        }
    
        public virtual ObjectResult<string> SpSaltSelectByPIN(string pIN)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpSaltSelectByPIN", pINParameter);
        }
    
        public virtual ObjectResult<SpSaltUpdate_Result> SpSaltUpdate(string pIN, string salt)
        {
            var pINParameter = pIN != null ?
                new ObjectParameter("PIN", pIN) :
                new ObjectParameter("PIN", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("Salt", salt) :
                new ObjectParameter("Salt", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSaltUpdate_Result>("SpSaltUpdate", pINParameter, saltParameter);
        }
    
        public virtual int SpScheduleDelete(Nullable<long> scheduleID, string auditUser)
        {
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpScheduleDelete", scheduleIDParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpScheduleInsert_Result> SpScheduleInsert(string employeeNumber, Nullable<System.DateTime> date, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, Nullable<System.DateTime> @break, string isRestday, string isHolidayRestDay, string isSuspended, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var breakParameter = @break.HasValue ?
                new ObjectParameter("Break", @break) :
                new ObjectParameter("Break", typeof(System.DateTime));
    
            var isRestdayParameter = isRestday != null ?
                new ObjectParameter("IsRestday", isRestday) :
                new ObjectParameter("IsRestday", typeof(string));
    
            var isHolidayRestDayParameter = isHolidayRestDay != null ?
                new ObjectParameter("IsHolidayRestDay", isHolidayRestDay) :
                new ObjectParameter("IsHolidayRestDay", typeof(string));
    
            var isSuspendedParameter = isSuspended != null ?
                new ObjectParameter("IsSuspended", isSuspended) :
                new ObjectParameter("IsSuspended", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpScheduleInsert_Result>("SpScheduleInsert", employeeNumberParameter, dateParameter, schedInParameter, schedOutParameter, breakParameter, isRestdayParameter, isHolidayRestDayParameter, isSuspendedParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpScheduleInsert_OLD_Result> SpScheduleInsert_OLD(string employeeNumber, Nullable<System.DateTime> date, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, Nullable<System.DateTime> @break, string isRestday, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var breakParameter = @break.HasValue ?
                new ObjectParameter("Break", @break) :
                new ObjectParameter("Break", typeof(System.DateTime));
    
            var isRestdayParameter = isRestday != null ?
                new ObjectParameter("IsRestday", isRestday) :
                new ObjectParameter("IsRestday", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpScheduleInsert_OLD_Result>("SpScheduleInsert_OLD", employeeNumberParameter, dateParameter, schedInParameter, schedOutParameter, breakParameter, isRestdayParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpScheduleSelect_Result> SpScheduleSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpScheduleSelect_Result>("SpScheduleSelect");
        }
    
        public virtual ObjectResult<SpScheduleUpdate_Result> SpScheduleUpdate(string employeeNumber, Nullable<System.DateTime> date, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, Nullable<System.DateTime> @break, string isRestday, string isHolidayRestDay, string isSuspended, Nullable<long> scheduleID, string auditUser, string remarks)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var breakParameter = @break.HasValue ?
                new ObjectParameter("Break", @break) :
                new ObjectParameter("Break", typeof(System.DateTime));
    
            var isRestdayParameter = isRestday != null ?
                new ObjectParameter("IsRestday", isRestday) :
                new ObjectParameter("IsRestday", typeof(string));
    
            var isHolidayRestDayParameter = isHolidayRestDay != null ?
                new ObjectParameter("IsHolidayRestDay", isHolidayRestDay) :
                new ObjectParameter("IsHolidayRestDay", typeof(string));
    
            var isSuspendedParameter = isSuspended != null ?
                new ObjectParameter("IsSuspended", isSuspended) :
                new ObjectParameter("IsSuspended", typeof(string));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpScheduleUpdate_Result>("SpScheduleUpdate", employeeNumberParameter, dateParameter, schedInParameter, schedOutParameter, breakParameter, isRestdayParameter, isHolidayRestDayParameter, isSuspendedParameter, scheduleIDParameter, auditUserParameter, remarksParameter);
        }
    
        public virtual ObjectResult<SpScheduleUpdate_OLD_Result> SpScheduleUpdate_OLD(string employeeNumber, Nullable<System.DateTime> date, Nullable<System.DateTime> schedIn, Nullable<System.DateTime> schedOut, Nullable<System.DateTime> @break, string isRestday, Nullable<long> scheduleID, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var schedInParameter = schedIn.HasValue ?
                new ObjectParameter("SchedIn", schedIn) :
                new ObjectParameter("SchedIn", typeof(System.DateTime));
    
            var schedOutParameter = schedOut.HasValue ?
                new ObjectParameter("SchedOut", schedOut) :
                new ObjectParameter("SchedOut", typeof(System.DateTime));
    
            var breakParameter = @break.HasValue ?
                new ObjectParameter("Break", @break) :
                new ObjectParameter("Break", typeof(System.DateTime));
    
            var isRestdayParameter = isRestday != null ?
                new ObjectParameter("IsRestday", isRestday) :
                new ObjectParameter("IsRestday", typeof(string));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(long));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpScheduleUpdate_OLD_Result>("SpScheduleUpdate_OLD", employeeNumberParameter, dateParameter, schedInParameter, schedOutParameter, breakParameter, isRestdayParameter, scheduleIDParameter, auditUserParameter);
        }
    
        public virtual int spsltest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spsltest");
        }
    
        public virtual int SpSSSLoanDelete(Nullable<long> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSSSLoanDelete", iDParameter);
        }
    
        public virtual int SpSSSLoanInsert(string employeeNumber, Nullable<decimal> monthlyAmortization, Nullable<decimal> totalPayable, Nullable<decimal> loanAmount, Nullable<System.DateTime> dateIssued, Nullable<System.DateTime> deductionStart, string remarks, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var monthlyAmortizationParameter = monthlyAmortization.HasValue ?
                new ObjectParameter("MonthlyAmortization", monthlyAmortization) :
                new ObjectParameter("MonthlyAmortization", typeof(decimal));
    
            var totalPayableParameter = totalPayable.HasValue ?
                new ObjectParameter("TotalPayable", totalPayable) :
                new ObjectParameter("TotalPayable", typeof(decimal));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var dateIssuedParameter = dateIssued.HasValue ?
                new ObjectParameter("DateIssued", dateIssued) :
                new ObjectParameter("DateIssued", typeof(System.DateTime));
    
            var deductionStartParameter = deductionStart.HasValue ?
                new ObjectParameter("DeductionStart", deductionStart) :
                new ObjectParameter("DeductionStart", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSSSLoanInsert", employeeNumberParameter, monthlyAmortizationParameter, totalPayableParameter, loanAmountParameter, dateIssuedParameter, deductionStartParameter, remarksParameter, auditUserParameter);
        }
    
        public virtual ObjectResult<SpSSSLoanSelect_Result> SpSSSLoanSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpSSSLoanSelect_Result>("SpSSSLoanSelect");
        }
    
        public virtual int SpSSSLoanUpdate(Nullable<long> loanID, string employeeNumber, Nullable<decimal> monthlyAmortization, Nullable<decimal> totalPayable, Nullable<decimal> loanAmount, Nullable<System.DateTime> dateIssued, Nullable<System.DateTime> deductionStart, string remarks, string auditUser)
        {
            var loanIDParameter = loanID.HasValue ?
                new ObjectParameter("LoanID", loanID) :
                new ObjectParameter("LoanID", typeof(long));
    
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var monthlyAmortizationParameter = monthlyAmortization.HasValue ?
                new ObjectParameter("MonthlyAmortization", monthlyAmortization) :
                new ObjectParameter("MonthlyAmortization", typeof(decimal));
    
            var totalPayableParameter = totalPayable.HasValue ?
                new ObjectParameter("TotalPayable", totalPayable) :
                new ObjectParameter("TotalPayable", typeof(decimal));
    
            var loanAmountParameter = loanAmount.HasValue ?
                new ObjectParameter("LoanAmount", loanAmount) :
                new ObjectParameter("LoanAmount", typeof(decimal));
    
            var dateIssuedParameter = dateIssued.HasValue ?
                new ObjectParameter("DateIssued", dateIssued) :
                new ObjectParameter("DateIssued", typeof(System.DateTime));
    
            var deductionStartParameter = deductionStart.HasValue ?
                new ObjectParameter("DeductionStart", deductionStart) :
                new ObjectParameter("DeductionStart", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpSSSLoanUpdate", loanIDParameter, employeeNumberParameter, monthlyAmortizationParameter, totalPayableParameter, loanAmountParameter, dateIssuedParameter, deductionStartParameter, remarksParameter, auditUserParameter);
        }
    
        public virtual int SpTaxDelete(Nullable<int> original_ID, string original_Description, string original_Status)
        {
            var original_IDParameter = original_ID.HasValue ?
                new ObjectParameter("Original_ID", original_ID) :
                new ObjectParameter("Original_ID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpTaxDelete", original_IDParameter, original_DescriptionParameter, original_StatusParameter);
        }
    
        public virtual int SpTaxInsert(string description, string status)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpTaxInsert", descriptionParameter, statusParameter);
        }
    
        public virtual int SpTaxSelect()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpTaxSelect");
        }
    
        public virtual int SpTaxUpdate(string description, string status, Nullable<int> original_ID, string original_Description, string original_Status, Nullable<int> iD)
        {
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var original_IDParameter = original_ID.HasValue ?
                new ObjectParameter("Original_ID", original_ID) :
                new ObjectParameter("Original_ID", typeof(int));
    
            var original_DescriptionParameter = original_Description != null ?
                new ObjectParameter("Original_Description", original_Description) :
                new ObjectParameter("Original_Description", typeof(string));
    
            var original_StatusParameter = original_Status != null ?
                new ObjectParameter("Original_Status", original_Status) :
                new ObjectParameter("Original_Status", typeof(string));
    
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpTaxUpdate", descriptionParameter, statusParameter, original_IDParameter, original_DescriptionParameter, original_StatusParameter, iDParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> spUnauthorizedLogs_Insert(string empNo, string userName, string attempTo)
        {
            var empNoParameter = empNo != null ?
                new ObjectParameter("EmpNo", empNo) :
                new ObjectParameter("EmpNo", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var attempToParameter = attempTo != null ?
                new ObjectParameter("AttempTo", attempTo) :
                new ObjectParameter("AttempTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("spUnauthorizedLogs_Insert", empNoParameter, userNameParameter, attempToParameter);
        }
    
        public virtual ObjectResult<string> SpUpdateSLandVL(string auditUser)
        {
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpUpdateSLandVL", auditUserParameter);
        }
    
        public virtual ObjectResult<string> SpUpdateSLandVL2009(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpUpdateSLandVL2009", dateParameter);
        }
    
        public virtual ObjectResult<string> SpUpdateSLandVL2013(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpUpdateSLandVL2013", dateParameter);
        }
    
        public virtual ObjectResult<SpUpdateSLandVL2013Manual_Result> SpUpdateSLandVL2013Manual(Nullable<System.DateTime> dateGiven)
        {
            var dateGivenParameter = dateGiven.HasValue ?
                new ObjectParameter("DateGiven", dateGiven) :
                new ObjectParameter("DateGiven", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpUpdateSLandVL2013Manual_Result>("SpUpdateSLandVL2013Manual", dateGivenParameter);
        }
    
        public virtual ObjectResult<string> SpUpdateSLandVL2013REV()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpUpdateSLandVL2013REV");
        }
    
        public virtual ObjectResult<string> SpUpdateSLandVL2013REVAuto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SpUpdateSLandVL2013REVAuto");
        }
    
        public virtual int SpUserLogDelete(Nullable<int> original_UserlogID)
        {
            var original_UserlogIDParameter = original_UserlogID.HasValue ?
                new ObjectParameter("Original_UserlogID", original_UserlogID) :
                new ObjectParameter("Original_UserlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUserLogDelete", original_UserlogIDParameter);
        }
    
        public virtual int SpUserLogInsert(string employeeNumber, Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeout, Nullable<int> overtime, Nullable<int> undertime, Nullable<int> late, Nullable<int> nightDifferential, Nullable<int> scheduleID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("Timeout", timeout) :
                new ObjectParameter("Timeout", typeof(System.DateTime));
    
            var overtimeParameter = overtime.HasValue ?
                new ObjectParameter("Overtime", overtime) :
                new ObjectParameter("Overtime", typeof(int));
    
            var undertimeParameter = undertime.HasValue ?
                new ObjectParameter("Undertime", undertime) :
                new ObjectParameter("Undertime", typeof(int));
    
            var lateParameter = late.HasValue ?
                new ObjectParameter("Late", late) :
                new ObjectParameter("Late", typeof(int));
    
            var nightDifferentialParameter = nightDifferential.HasValue ?
                new ObjectParameter("NightDifferential", nightDifferential) :
                new ObjectParameter("NightDifferential", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUserLogInsert", employeeNumberParameter, timeInParameter, timeoutParameter, overtimeParameter, undertimeParameter, lateParameter, nightDifferentialParameter, scheduleIDParameter);
        }
    
        public virtual int SpUserLogSelect(string employeeNumber, string rangeFrom, string rangeTo)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var rangeFromParameter = rangeFrom != null ?
                new ObjectParameter("RangeFrom", rangeFrom) :
                new ObjectParameter("RangeFrom", typeof(string));
    
            var rangeToParameter = rangeTo != null ?
                new ObjectParameter("RangeTo", rangeTo) :
                new ObjectParameter("RangeTo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUserLogSelect", employeeNumberParameter, rangeFromParameter, rangeToParameter);
        }
    
        public virtual int SpUserLogUpdate(string employeeNumber, Nullable<System.DateTime> timeIn, Nullable<System.DateTime> timeout, Nullable<int> overtime, Nullable<int> undertime, Nullable<int> late, Nullable<int> nightDifferential, Nullable<int> scheduleID, Nullable<int> original_UserlogID, Nullable<int> userlogID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var timeInParameter = timeIn.HasValue ?
                new ObjectParameter("TimeIn", timeIn) :
                new ObjectParameter("TimeIn", typeof(System.DateTime));
    
            var timeoutParameter = timeout.HasValue ?
                new ObjectParameter("Timeout", timeout) :
                new ObjectParameter("Timeout", typeof(System.DateTime));
    
            var overtimeParameter = overtime.HasValue ?
                new ObjectParameter("Overtime", overtime) :
                new ObjectParameter("Overtime", typeof(int));
    
            var undertimeParameter = undertime.HasValue ?
                new ObjectParameter("Undertime", undertime) :
                new ObjectParameter("Undertime", typeof(int));
    
            var lateParameter = late.HasValue ?
                new ObjectParameter("Late", late) :
                new ObjectParameter("Late", typeof(int));
    
            var nightDifferentialParameter = nightDifferential.HasValue ?
                new ObjectParameter("NightDifferential", nightDifferential) :
                new ObjectParameter("NightDifferential", typeof(int));
    
            var scheduleIDParameter = scheduleID.HasValue ?
                new ObjectParameter("ScheduleID", scheduleID) :
                new ObjectParameter("ScheduleID", typeof(int));
    
            var original_UserlogIDParameter = original_UserlogID.HasValue ?
                new ObjectParameter("Original_UserlogID", original_UserlogID) :
                new ObjectParameter("Original_UserlogID", typeof(int));
    
            var userlogIDParameter = userlogID.HasValue ?
                new ObjectParameter("UserlogID", userlogID) :
                new ObjectParameter("UserlogID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpUserLogUpdate", employeeNumberParameter, timeInParameter, timeoutParameter, overtimeParameter, undertimeParameter, lateParameter, nightDifferentialParameter, scheduleIDParameter, original_UserlogIDParameter, userlogIDParameter);
        }
    
        public virtual ObjectResult<Temp1500LOSE_Result> Temp1500LOSE(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Temp1500LOSE_Result>("Temp1500LOSE", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual int test()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("test");
        }
    
        public virtual ObjectResult<TEST_SP_Result> TEST_SP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TEST_SP_Result>("TEST_SP");
        }
    
        public virtual ObjectResult<TestM_Result> TestM(string lastName)
        {
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TestM_Result>("TestM", lastNameParameter);
        }
    
        public virtual ObjectResult<string> Tracker_EmpLeaveList(string employeeNumber, Nullable<System.DateTime> dateFrom, Nullable<System.DateTime> dateTo)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var dateFromParameter = dateFrom.HasValue ?
                new ObjectParameter("DateFrom", dateFrom) :
                new ObjectParameter("DateFrom", typeof(System.DateTime));
    
            var dateToParameter = dateTo.HasValue ?
                new ObjectParameter("DateTo", dateTo) :
                new ObjectParameter("DateTo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Tracker_EmpLeaveList", employeeNumberParameter, dateFromParameter, dateToParameter);
        }
    
        public virtual ObjectResult<Tracker_EmployeeInfo_Result> Tracker_EmployeeInfo(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tracker_EmployeeInfo_Result>("Tracker_EmployeeInfo", employeeNumberParameter);
        }
    
        public virtual ObjectResult<Tracker_GetEmployeesList_Result> Tracker_GetEmployeesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tracker_GetEmployeesList_Result>("Tracker_GetEmployeesList");
        }
    
        public virtual int Tracker_InsertNotify(string employeeNumber, Nullable<long> scheduleId, Nullable<short> notificationMode, Nullable<System.DateTime> notificationTime, Nullable<short> leaveId, string reason, string remarks, Nullable<short> campaignid, string auditUser, Nullable<System.DateTime> auditDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var scheduleIdParameter = scheduleId.HasValue ?
                new ObjectParameter("ScheduleId", scheduleId) :
                new ObjectParameter("ScheduleId", typeof(long));
    
            var notificationModeParameter = notificationMode.HasValue ?
                new ObjectParameter("NotificationMode", notificationMode) :
                new ObjectParameter("NotificationMode", typeof(short));
    
            var notificationTimeParameter = notificationTime.HasValue ?
                new ObjectParameter("NotificationTime", notificationTime) :
                new ObjectParameter("NotificationTime", typeof(System.DateTime));
    
            var leaveIdParameter = leaveId.HasValue ?
                new ObjectParameter("LeaveId", leaveId) :
                new ObjectParameter("LeaveId", typeof(short));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var campaignidParameter = campaignid.HasValue ?
                new ObjectParameter("Campaignid", campaignid) :
                new ObjectParameter("Campaignid", typeof(short));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var auditDateParameter = auditDate.HasValue ?
                new ObjectParameter("AuditDate", auditDate) :
                new ObjectParameter("AuditDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tracker_InsertNotify", employeeNumberParameter, scheduleIdParameter, notificationModeParameter, notificationTimeParameter, leaveIdParameter, reasonParameter, remarksParameter, campaignidParameter, auditUserParameter, auditDateParameter);
        }
    
        public virtual ObjectResult<Tracker_LogIn_Result> Tracker_LogIn(string employeeNumber, string password)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Tracker_LogIn_Result>("Tracker_LogIn", employeeNumberParameter, passwordParameter);
        }
    
        public virtual int Tracker_UpdateRemarks(Nullable<int> oID, string remarks, string auditUser)
        {
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Tracker_UpdateRemarks", oIDParameter, remarksParameter, auditUserParameter);
        }
    
        public virtual int Undertime()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Undertime");
        }
    
        public virtual int Undertime2()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Undertime2");
        }
    
        public virtual ObjectResult<string> UpdateEmployeeCampaign(string employeeNumber, Nullable<int> campaignID)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UpdateEmployeeCampaign", employeeNumberParameter, campaignIDParameter);
        }
    
        public virtual int UpdateEmployeeProfile(string employeeNumber, string lastName, string firstName, string middleName, string password, string telephone, string cellphone, string email, string acctNo, string tinNo, string sssNo, string pHealthNo, string hdmfNo, Nullable<int> civilStatusID, string address, Nullable<int> positionID, Nullable<int> departmentID, Nullable<int> employeeTypeID, Nullable<System.DateTime> dateHired, Nullable<System.DateTime> dateSeparated, string active, string taxCode, Nullable<bool> pwChange, string level, string reportTo, string auditUser, Nullable<System.DateTime> dOB, string gender, Nullable<System.DateTime> regularized, string withOTPay, string withHolidayPay, string withNDPay)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var cellphoneParameter = cellphone != null ?
                new ObjectParameter("Cellphone", cellphone) :
                new ObjectParameter("Cellphone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var acctNoParameter = acctNo != null ?
                new ObjectParameter("AcctNo", acctNo) :
                new ObjectParameter("AcctNo", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var sssNoParameter = sssNo != null ?
                new ObjectParameter("SssNo", sssNo) :
                new ObjectParameter("SssNo", typeof(string));
    
            var pHealthNoParameter = pHealthNo != null ?
                new ObjectParameter("PHealthNo", pHealthNo) :
                new ObjectParameter("PHealthNo", typeof(string));
    
            var hdmfNoParameter = hdmfNo != null ?
                new ObjectParameter("HdmfNo", hdmfNo) :
                new ObjectParameter("HdmfNo", typeof(string));
    
            var civilStatusIDParameter = civilStatusID.HasValue ?
                new ObjectParameter("CivilStatusID", civilStatusID) :
                new ObjectParameter("CivilStatusID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(int));
    
            var dateHiredParameter = dateHired.HasValue ?
                new ObjectParameter("DateHired", dateHired) :
                new ObjectParameter("DateHired", typeof(System.DateTime));
    
            var dateSeparatedParameter = dateSeparated.HasValue ?
                new ObjectParameter("DateSeparated", dateSeparated) :
                new ObjectParameter("DateSeparated", typeof(System.DateTime));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            var pwChangeParameter = pwChange.HasValue ?
                new ObjectParameter("PwChange", pwChange) :
                new ObjectParameter("PwChange", typeof(bool));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var reportToParameter = reportTo != null ?
                new ObjectParameter("ReportTo", reportTo) :
                new ObjectParameter("ReportTo", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var regularizedParameter = regularized.HasValue ?
                new ObjectParameter("Regularized", regularized) :
                new ObjectParameter("Regularized", typeof(System.DateTime));
    
            var withOTPayParameter = withOTPay != null ?
                new ObjectParameter("WithOTPay", withOTPay) :
                new ObjectParameter("WithOTPay", typeof(string));
    
            var withHolidayPayParameter = withHolidayPay != null ?
                new ObjectParameter("WithHolidayPay", withHolidayPay) :
                new ObjectParameter("WithHolidayPay", typeof(string));
    
            var withNDPayParameter = withNDPay != null ?
                new ObjectParameter("WithNDPay", withNDPay) :
                new ObjectParameter("WithNDPay", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeProfile", employeeNumberParameter, lastNameParameter, firstNameParameter, middleNameParameter, passwordParameter, telephoneParameter, cellphoneParameter, emailParameter, acctNoParameter, tinNoParameter, sssNoParameter, pHealthNoParameter, hdmfNoParameter, civilStatusIDParameter, addressParameter, positionIDParameter, departmentIDParameter, employeeTypeIDParameter, dateHiredParameter, dateSeparatedParameter, activeParameter, taxCodeParameter, pwChangeParameter, levelParameter, reportToParameter, auditUserParameter, dOBParameter, genderParameter, regularizedParameter, withOTPayParameter, withHolidayPayParameter, withNDPayParameter);
        }
    
        public virtual int UpdateEmployeeProfile2011(string employeeNumber, string lastName, string firstName, string middleName, string password, string telephone, string cellphone, string email, string acctNo, string tinNo, string sssNo, string pHealthNo, string hdmfNo, Nullable<int> civilStatusID, string address, Nullable<int> positionID, string picturePath, Nullable<int> departmentID, Nullable<int> campaignID, Nullable<int> employeeTypeID, Nullable<System.DateTime> nearHire, Nullable<System.DateTime> dateHired, Nullable<System.DateTime> dateSeparated, string active, string taxCode, Nullable<bool> pwChange, string level, string reportTo, string auditUser, Nullable<System.DateTime> dOB, string gender, Nullable<System.DateTime> regularized, string withOTPay, string withHolidayPay, string withNDPay, string taxExempt, string dailyAllowance, string l2Incentive, Nullable<System.DateTime> probationaryDate, string education, string experience, string remarks)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var cellphoneParameter = cellphone != null ?
                new ObjectParameter("Cellphone", cellphone) :
                new ObjectParameter("Cellphone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var acctNoParameter = acctNo != null ?
                new ObjectParameter("AcctNo", acctNo) :
                new ObjectParameter("AcctNo", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var sssNoParameter = sssNo != null ?
                new ObjectParameter("SssNo", sssNo) :
                new ObjectParameter("SssNo", typeof(string));
    
            var pHealthNoParameter = pHealthNo != null ?
                new ObjectParameter("PHealthNo", pHealthNo) :
                new ObjectParameter("PHealthNo", typeof(string));
    
            var hdmfNoParameter = hdmfNo != null ?
                new ObjectParameter("HdmfNo", hdmfNo) :
                new ObjectParameter("HdmfNo", typeof(string));
    
            var civilStatusIDParameter = civilStatusID.HasValue ?
                new ObjectParameter("CivilStatusID", civilStatusID) :
                new ObjectParameter("CivilStatusID", typeof(int));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var picturePathParameter = picturePath != null ?
                new ObjectParameter("PicturePath", picturePath) :
                new ObjectParameter("PicturePath", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var campaignIDParameter = campaignID.HasValue ?
                new ObjectParameter("CampaignID", campaignID) :
                new ObjectParameter("CampaignID", typeof(int));
    
            var employeeTypeIDParameter = employeeTypeID.HasValue ?
                new ObjectParameter("EmployeeTypeID", employeeTypeID) :
                new ObjectParameter("EmployeeTypeID", typeof(int));
    
            var nearHireParameter = nearHire.HasValue ?
                new ObjectParameter("NearHire", nearHire) :
                new ObjectParameter("NearHire", typeof(System.DateTime));
    
            var dateHiredParameter = dateHired.HasValue ?
                new ObjectParameter("DateHired", dateHired) :
                new ObjectParameter("DateHired", typeof(System.DateTime));
    
            var dateSeparatedParameter = dateSeparated.HasValue ?
                new ObjectParameter("DateSeparated", dateSeparated) :
                new ObjectParameter("DateSeparated", typeof(System.DateTime));
    
            var activeParameter = active != null ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(string));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            var pwChangeParameter = pwChange.HasValue ?
                new ObjectParameter("PwChange", pwChange) :
                new ObjectParameter("PwChange", typeof(bool));
    
            var levelParameter = level != null ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(string));
    
            var reportToParameter = reportTo != null ?
                new ObjectParameter("ReportTo", reportTo) :
                new ObjectParameter("ReportTo", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var regularizedParameter = regularized.HasValue ?
                new ObjectParameter("Regularized", regularized) :
                new ObjectParameter("Regularized", typeof(System.DateTime));
    
            var withOTPayParameter = withOTPay != null ?
                new ObjectParameter("WithOTPay", withOTPay) :
                new ObjectParameter("WithOTPay", typeof(string));
    
            var withHolidayPayParameter = withHolidayPay != null ?
                new ObjectParameter("WithHolidayPay", withHolidayPay) :
                new ObjectParameter("WithHolidayPay", typeof(string));
    
            var withNDPayParameter = withNDPay != null ?
                new ObjectParameter("WithNDPay", withNDPay) :
                new ObjectParameter("WithNDPay", typeof(string));
    
            var taxExemptParameter = taxExempt != null ?
                new ObjectParameter("TaxExempt", taxExempt) :
                new ObjectParameter("TaxExempt", typeof(string));
    
            var dailyAllowanceParameter = dailyAllowance != null ?
                new ObjectParameter("DailyAllowance", dailyAllowance) :
                new ObjectParameter("DailyAllowance", typeof(string));
    
            var l2IncentiveParameter = l2Incentive != null ?
                new ObjectParameter("L2Incentive", l2Incentive) :
                new ObjectParameter("L2Incentive", typeof(string));
    
            var probationaryDateParameter = probationaryDate.HasValue ?
                new ObjectParameter("ProbationaryDate", probationaryDate) :
                new ObjectParameter("ProbationaryDate", typeof(System.DateTime));
    
            var educationParameter = education != null ?
                new ObjectParameter("Education", education) :
                new ObjectParameter("Education", typeof(string));
    
            var experienceParameter = experience != null ?
                new ObjectParameter("Experience", experience) :
                new ObjectParameter("Experience", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeProfile2011", employeeNumberParameter, lastNameParameter, firstNameParameter, middleNameParameter, passwordParameter, telephoneParameter, cellphoneParameter, emailParameter, acctNoParameter, tinNoParameter, sssNoParameter, pHealthNoParameter, hdmfNoParameter, civilStatusIDParameter, addressParameter, positionIDParameter, picturePathParameter, departmentIDParameter, campaignIDParameter, employeeTypeIDParameter, nearHireParameter, dateHiredParameter, dateSeparatedParameter, activeParameter, taxCodeParameter, pwChangeParameter, levelParameter, reportToParameter, auditUserParameter, dOBParameter, genderParameter, regularizedParameter, withOTPayParameter, withHolidayPayParameter, withNDPayParameter, taxExemptParameter, dailyAllowanceParameter, l2IncentiveParameter, probationaryDateParameter, educationParameter, experienceParameter, remarksParameter);
        }
    
        public virtual int UpdateEmployeeRate(string employeeNumber, Nullable<double> perMonth, Nullable<decimal> representation, Nullable<decimal> taxShield, Nullable<decimal> allowance, Nullable<decimal> transpo, Nullable<decimal> l2Incentive)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var perMonthParameter = perMonth.HasValue ?
                new ObjectParameter("PerMonth", perMonth) :
                new ObjectParameter("PerMonth", typeof(double));
    
            var representationParameter = representation.HasValue ?
                new ObjectParameter("Representation", representation) :
                new ObjectParameter("Representation", typeof(decimal));
    
            var taxShieldParameter = taxShield.HasValue ?
                new ObjectParameter("TaxShield", taxShield) :
                new ObjectParameter("TaxShield", typeof(decimal));
    
            var allowanceParameter = allowance.HasValue ?
                new ObjectParameter("Allowance", allowance) :
                new ObjectParameter("Allowance", typeof(decimal));
    
            var transpoParameter = transpo.HasValue ?
                new ObjectParameter("Transpo", transpo) :
                new ObjectParameter("Transpo", typeof(decimal));
    
            var l2IncentiveParameter = l2Incentive.HasValue ?
                new ObjectParameter("L2Incentive", l2Incentive) :
                new ObjectParameter("L2Incentive", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateEmployeeRate", employeeNumberParameter, perMonthParameter, representationParameter, taxShieldParameter, allowanceParameter, transpoParameter, l2IncentiveParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UpdatePersonalProfile(string employeeNumber, string firstName, string middleName, string lastName, string address, string telephone, string email, string cellphone, Nullable<int> positionID, Nullable<int> department, string supervisor, string tinNo, string sssNo, Nullable<System.DateTime> dOB, string gender, string auditUser)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var telephoneParameter = telephone != null ?
                new ObjectParameter("Telephone", telephone) :
                new ObjectParameter("Telephone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var cellphoneParameter = cellphone != null ?
                new ObjectParameter("Cellphone", cellphone) :
                new ObjectParameter("Cellphone", typeof(string));
    
            var positionIDParameter = positionID.HasValue ?
                new ObjectParameter("PositionID", positionID) :
                new ObjectParameter("PositionID", typeof(int));
    
            var departmentParameter = department.HasValue ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(int));
    
            var supervisorParameter = supervisor != null ?
                new ObjectParameter("Supervisor", supervisor) :
                new ObjectParameter("Supervisor", typeof(string));
    
            var tinNoParameter = tinNo != null ?
                new ObjectParameter("TinNo", tinNo) :
                new ObjectParameter("TinNo", typeof(string));
    
            var sssNoParameter = sssNo != null ?
                new ObjectParameter("SssNo", sssNo) :
                new ObjectParameter("SssNo", typeof(string));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var auditUserParameter = auditUser != null ?
                new ObjectParameter("AuditUser", auditUser) :
                new ObjectParameter("AuditUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdatePersonalProfile", employeeNumberParameter, firstNameParameter, middleNameParameter, lastNameParameter, addressParameter, telephoneParameter, emailParameter, cellphoneParameter, positionIDParameter, departmentParameter, supervisorParameter, tinNoParameter, sssNoParameter, dOBParameter, genderParameter, auditUserParameter);
        }
    
        public virtual int UpdateSponsorMonthly(string employeeNumber, Nullable<System.DateTime> startDate)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSponsorMonthly", employeeNumberParameter, startDateParameter);
        }
    
        public virtual int UpdateSponsorVR(Nullable<int> iD, Nullable<int> col)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var colParameter = col.HasValue ?
                new ObjectParameter("Col", col) :
                new ObjectParameter("Col", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateSponsorVR", iDParameter, colParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserHasSubordinates(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserHasSubordinates", employeeNumberParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> UserVoted(string employeeNumber)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UserVoted", employeeNumberParameter);
        }
    
        public virtual ObjectResult<v3GetEmployeeSchedules_Result> v3GetEmployeeSchedules(string employeeNumber, Nullable<System.DateTime> from, Nullable<System.DateTime> to)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var fromParameter = from.HasValue ?
                new ObjectParameter("From", from) :
                new ObjectParameter("From", typeof(System.DateTime));
    
            var toParameter = to.HasValue ?
                new ObjectParameter("To", to) :
                new ObjectParameter("To", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<v3GetEmployeeSchedules_Result>("v3GetEmployeeSchedules", employeeNumberParameter, fromParameter, toParameter);
        }
    
        public virtual ObjectResult<v3LeaveTypeSelect_Result> v3LeaveTypeSelect(string whereValues)
        {
            var whereValuesParameter = whereValues != null ?
                new ObjectParameter("WhereValues", whereValues) :
                new ObjectParameter("WhereValues", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<v3LeaveTypeSelect_Result>("v3LeaveTypeSelect", whereValuesParameter);
        }
    
        public virtual int WFMInsertAuditTrail(string audit_user, string audit_module, string audit_remarks, string audit_system)
        {
            var audit_userParameter = audit_user != null ?
                new ObjectParameter("audit_user", audit_user) :
                new ObjectParameter("audit_user", typeof(string));
    
            var audit_moduleParameter = audit_module != null ?
                new ObjectParameter("audit_module", audit_module) :
                new ObjectParameter("audit_module", typeof(string));
    
            var audit_remarksParameter = audit_remarks != null ?
                new ObjectParameter("audit_remarks", audit_remarks) :
                new ObjectParameter("audit_remarks", typeof(string));
    
            var audit_systemParameter = audit_system != null ?
                new ObjectParameter("audit_system", audit_system) :
                new ObjectParameter("audit_system", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WFMInsertAuditTrail", audit_userParameter, audit_moduleParameter, audit_remarksParameter, audit_systemParameter);
        }
    
        public virtual ObjectResult<WFMLogin_Result> WFMLogin(string employeeNumber, string password)
        {
            var employeeNumberParameter = employeeNumber != null ?
                new ObjectParameter("EmployeeNumber", employeeNumber) :
                new ObjectParameter("EmployeeNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<WFMLogin_Result>("WFMLogin", employeeNumberParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> WorkWhourRepSpecDates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WorkWhourRepSpecDates");
        }
    
        public virtual ObjectResult<string> WorkWhourRepSpecDatesTest()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("WorkWhourRepSpecDatesTest");
        }
    
        public virtual int WorkWhourSpecDates()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkWhourSpecDates");
        }
    
        public virtual int WorkWhourWeekly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("WorkWhourWeekly");
        }
    }
}
